;;================================================
;; bindings.lisp
;;
;; written by R.Ueda (garaemon)
;;================================================



;; for export symbols
;; alexandria:define-constant -> _defcon
;; (in-package :alexandria)
;; (defmacro define-constant (a &rest args)
;;   `(format t "#:~A~%" ',a))
;; ;; cffi:defcfun -> _defcfun
;; (in-package :cffi)
;; (defmacro defcfun ((a name) &rest args)
;;   `(format t "#:~A~%" ',name))

(in-package :clyax)

;;================================
;; X11
;; mostly automatically generated by
;; swig.
;;
;; from Xlib.h
;; $ swig -cffi -module x11 -o x11.lisp /usr/X11/include/X11/Xlib.h
;;================================

(alexandria:define-constant XlibSpecificationRelease 6)

(cffi:defcfun ("_Xmblen" _Xmblen) :int
  (str :string)
  (len :int))

(alexandria:define-constant X_HAVE_UTF8_STRING 1)

(alexandria:define-constant True 1)

(alexandria:define-constant False 0)

(alexandria:define-constant QueuedAlready 0)

(alexandria:define-constant QueuedAfterReading 1)

(alexandria:define-constant QueuedAfterFlush 2)

(cffi:defcstruct XExtData
	(number :int)
	(next :pointer)
	(free_private :pointer)
	(private_data :string))

(cffi:defcstruct XExtCodes
	(extension :int)
	(major_opcode :int)
	(first_event :int)
	(first_error :int))

(cffi:defcstruct XPixmapFormatValues
	(depth :int)
	(bits_per_pixel :int)
	(scanline_pad :int))

(cffi:defcstruct XGCValues
	(function :int)
	(plane_mask :unsigned-long)
	(foreground :unsigned-long)
	(background :unsigned-long)
	(line_width :int)
	(line_style :int)
	(cap_style :int)
	(join_style :int)
	(fill_style :int)
	(fill_rule :int)
	(arc_mode :int)
	(tile :pointer)
	(stipple :pointer)
	(ts_x_origin :int)
	(ts_y_origin :int)
	(font :pointer)
	(subwindow_mode :int)
	(graphics_exposures :int)
	(clip_x_origin :int)
	(clip_y_origin :int)
	(clip_mask :pointer)
	(dash_offset :int)
	(dashes :char))

(cffi:defcstruct Visual
	(ext_data :pointer)
	(visualid :pointer)
	(class :int)
	(red_mask :unsigned-long)
	(green_mask :unsigned-long)
	(blue_mask :unsigned-long)
	(bits_per_rgb :int)
	(map_entries :int))

(cffi:defcstruct Depth
	(depth :int)
	(nvisuals :int)
	(visuals :pointer))

(cffi:defcstruct Screen
	(ext_data :pointer)
	(display :pointer)
	(root :pointer)
	(width :int)
	(height :int)
	(mwidth :int)
	(mheight :int)
	(ndepths :int)
	(depths :pointer)
	(root_depth :int)
	(root_visual :pointer)
	(default_gc :pointer)
	(cmap :pointer)
	(white_pixel :unsigned-long)
	(black_pixel :unsigned-long)
	(max_maps :int)
	(min_maps :int)
	(backing_store :int)
	(save_unders :int)
	(root_input_mask :long))

(cffi:defcstruct ScreenFormat
	(ext_data :pointer)
	(depth :int)
	(bits_per_pixel :int)
	(scanline_pad :int))

(cffi:defcstruct XSetWindowAttributes
	(background_pixmap :pointer)
	(background_pixel :unsigned-long)
	(border_pixmap :pointer)
	(border_pixel :unsigned-long)
	(bit_gravity :int)
	(win_gravity :int)
	(backing_store :int)
	(backing_planes :unsigned-long)
	(backing_pixel :unsigned-long)
	(save_under :int)
	(event_mask :long)
	(do_not_propagate_mask :long)
	(override_redirect :int)
	(colormap :pointer)
	(cursor :pointer))

(cffi:defcstruct XWindowAttributes
	(x :int)
	(y :int)
	(width :int)
	(height :int)
	(border_width :int)
	(depth :int)
	(visual :pointer)
	(root :pointer)
	(class :int)
	(bit_gravity :int)
	(win_gravity :int)
	(backing_store :int)
	(backing_planes :unsigned-long)
	(backing_pixel :unsigned-long)
	(save_under :int)
	(colormap :pointer)
	(map_installed :int)
	(map_state :int)
	(all_event_masks :long)
	(your_event_mask :long)
	(do_not_propagate_mask :long)
	(override_redirect :int)
	(screen :pointer))

(cffi:defcstruct XHostAddress
	(family :int)
	(length :int)
	(address :string))

(cffi:defcstruct XServerInterpretedAddress
	(typelength :int)
	(valuelength :int)
	(type :string)
	(value :string))

(cffi:defcstruct XImage
	(width :int)
	(height :int)
	(xoffset :int)
	(format :int)
	(data :string)
	(byte_order :int)
	(bitmap_unit :int)
	(bitmap_bit_order :int)
	(bitmap_pad :int)
	(depth :int)
	(bytes_per_line :int)
	(bits_per_pixel :int)
	(red_mask :unsigned-long)
	(green_mask :unsigned-long)
	(blue_mask :unsigned-long)
	(obdata :string)
	(f :pointer))

(cffi:defcstruct XImage_f
	(create_image :pointer)
	(destroy_image :pointer)
	(get_pixel :pointer)
	(put_pixel :pointer)
	(sub_image :pointer)
	(add_pixel :pointer))

(cffi:defcstruct XWindowChanges
	(x :int)
	(y :int)
	(width :int)
	(height :int)
	(border_width :int)
	(sibling :pointer)
	(stack_mode :int))

(cffi:defcstruct XColor
	(pixel :unsigned-long)
	(red :unsigned-short)
	(green :unsigned-short)
	(blue :unsigned-short)
	(flags :char)
	(pad :char))

(cffi:defcstruct XSegment
	(x1 :short)
	(y1 :short)
	(x2 :short)
	(y2 :short))

(cffi:defcstruct XPoint
	(x :short)
	(y :short))

(cffi:defcstruct XRectangle
	(x :short)
	(y :short)
	(width :unsigned-short)
	(height :unsigned-short))

(cffi:defcstruct XArc
	(x :short)
	(y :short)
	(width :unsigned-short)
	(height :unsigned-short)
	(angle1 :short)
	(angle2 :short))

(cffi:defcstruct XKeyboardControl
	(key_click_percent :int)
	(bell_percent :int)
	(bell_pitch :int)
	(bell_duration :int)
	(led :int)
	(led_mode :int)
	(key :int)
	(auto_repeat_mode :int))

(cffi:defcstruct XKeyboardState
	(key_click_percent :int)
	(bell_percent :int)
	(bell_pitch :unsigned-int)
	(bell_duration :unsigned-int)
	(led_mask :unsigned-long)
	(global_auto_repeat :int)
	(auto_repeats :pointer))

(cffi:defcstruct XTimeCoord
	(time :pointer)
	(x :short)
	(y :short))

(cffi:defcstruct XModifierKeymap
	(max_keypermod :int)
	(modifiermap :pointer))

(cffi:defcstruct XKeyEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(root :pointer)
	(subwindow :pointer)
	(time :pointer)
	(x :int)
	(y :int)
	(x_root :int)
	(y_root :int)
	(state :unsigned-int)
	(keycode :unsigned-int)
	(same_screen :int))

(cffi:defcstruct XButtonEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(root :pointer)
	(subwindow :pointer)
	(time :pointer)
	(x :int)
	(y :int)
	(x_root :int)
	(y_root :int)
	(state :unsigned-int)
	(button :unsigned-int)
	(same_screen :int))

(cffi:defcstruct XMotionEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(root :pointer)
	(subwindow :pointer)
	(time :pointer)
	(x :int)
	(y :int)
	(x_root :int)
	(y_root :int)
	(state :unsigned-int)
	(is_hint :char)
	(same_screen :int))

(cffi:defcstruct XCrossingEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(root :pointer)
	(subwindow :pointer)
	(time :pointer)
	(x :int)
	(y :int)
	(x_root :int)
	(y_root :int)
	(mode :int)
	(detail :int)
	(same_screen :int)
	(focus :int)
	(state :unsigned-int))

(cffi:defcstruct XFocusChangeEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(mode :int)
	(detail :int))

(cffi:defcstruct XKeymapEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(key_vector :pointer))

(cffi:defcstruct XExposeEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(x :int)
	(y :int)
	(width :int)
	(height :int)
	(count :int))

(cffi:defcstruct XGraphicsExposeEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(drawable :pointer)
	(x :int)
	(y :int)
	(width :int)
	(height :int)
	(count :int)
	(major_code :int)
	(minor_code :int))

(cffi:defcstruct XNoExposeEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(drawable :pointer)
	(major_code :int)
	(minor_code :int))

(cffi:defcstruct XVisibilityEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(state :int))

(cffi:defcstruct XCreateWindowEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(parent :pointer)
	(window :pointer)
	(x :int)
	(y :int)
	(width :int)
	(height :int)
	(border_width :int)
	(override_redirect :int))

(cffi:defcstruct XDestroyWindowEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(event :pointer)
	(window :pointer))

(cffi:defcstruct XUnmapEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(event :pointer)
	(window :pointer)
	(from_configure :int))

(cffi:defcstruct XMapEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(event :pointer)
	(window :pointer)
	(override_redirect :int))

(cffi:defcstruct XMapRequestEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(parent :pointer)
	(window :pointer))

(cffi:defcstruct XReparentEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(event :pointer)
	(window :pointer)
	(parent :pointer)
	(x :int)
	(y :int)
	(override_redirect :int))

(cffi:defcstruct XConfigureEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(event :pointer)
	(window :pointer)
	(x :int)
	(y :int)
	(width :int)
	(height :int)
	(border_width :int)
	(above :pointer)
	(override_redirect :int))

(cffi:defcstruct XGravityEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(event :pointer)
	(window :pointer)
	(x :int)
	(y :int))

(cffi:defcstruct XResizeRequestEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(width :int)
	(height :int))

(cffi:defcstruct XConfigureRequestEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(parent :pointer)
	(window :pointer)
	(x :int)
	(y :int)
	(width :int)
	(height :int)
	(border_width :int)
	(above :pointer)
	(detail :int)
	(value_mask :unsigned-long))

(cffi:defcstruct XCirculateEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(event :pointer)
	(window :pointer)
	(place :int))

(cffi:defcstruct XCirculateRequestEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(parent :pointer)
	(window :pointer)
	(place :int))

(cffi:defcstruct XPropertyEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(atom :pointer)
	(time :pointer)
	(state :int))

(cffi:defcstruct XSelectionClearEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(selection :pointer)
	(time :pointer))

(cffi:defcstruct XSelectionRequestEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(owner :pointer)
	(requestor :pointer)
	(selection :pointer)
	(target :pointer)
	(property :pointer)
	(time :pointer))

(cffi:defcstruct XSelectionEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(requestor :pointer)
	(selection :pointer)
	(target :pointer)
	(property :pointer)
	(time :pointer))

(cffi:defcstruct XColormapEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(colormap :pointer)
	(new :int)
	(state :int))

(cffi:defcstruct XClientMessageEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(message_type :pointer)
	(format :int)
	(data :pointer))

(cffi:defcunion XClientMessageEvent_data
	(b :pointer)
	(s :pointer)
	(l :pointer))

(cffi:defcstruct XMappingEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer)
	(request :int)
	(first_keycode :int)
	(count :int))

(cffi:defcstruct XErrorEvent
	(type :int)
	(display :pointer)
	(resourceid :pointer)
	(serial :unsigned-long)
	(error_code :unsigned-char)
	(request_code :unsigned-char)
	(minor_code :unsigned-char))

(cffi:defcstruct XAnyEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(window :pointer))

(cffi:defcstruct XGenericEvent
	(type :int)
	(serial :unsigned-long)
	(send_event :int)
	(display :pointer)
	(extension :int)
	(evtype :int))

(cffi:defcunion XEvent
	(type :int)
	(xany XAnyEvent)
	(xkey XKeyEvent)
	(xbutton XButtonEvent)
	(xmotion XMotionEvent)
	(xcrossing XCrossingEvent)
	(xfocus XFocusChangeEvent)
	(xexpose XExposeEvent)
	(xgraphicsexpose XGraphicsExposeEvent)
	(xnoexpose XNoExposeEvent)
	(xvisibility XVisibilityEvent)
	(xcreatewindow XCreateWindowEvent)
	(xdestroywindow XDestroyWindowEvent)
	(xunmap XUnmapEvent)
	(xmap XMapEvent)
	(xmaprequest XMapRequestEvent)
	(xreparent XReparentEvent)
	(xconfigure XConfigureEvent)
	(xgravity XGravityEvent)
	(xresizerequest XResizeRequestEvent)
	(xconfigurerequest XConfigureRequestEvent)
	(xcirculate XCirculateEvent)
	(xcirculaterequest XCirculateRequestEvent)
	(xproperty XPropertyEvent)
	(xselectionclear XSelectionClearEvent)
	(xselectionrequest XSelectionRequestEvent)
	(xselection XSelectionEvent)
	(xcolormap XColormapEvent)
	(xclient XClientMessageEvent)
	(xmapping XMappingEvent)
	(xerror XErrorEvent)
	(xkeymap XKeymapEvent)
	(pad :pointer))

(cffi:defcstruct XCharStruct
	(lbearing :short)
	(rbearing :short)
	(width :short)
	(ascent :short)
	(descent :short)
	(attributes :unsigned-short))

(cffi:defcstruct XFontProp
	(name :pointer)
	(card32 :unsigned-long))

(cffi:defcstruct XFontStruct
	(ext_data :pointer)
	(fid :pointer)
	(direction :unsigned-int)
	(min_char_or_byte2 :unsigned-int)
	(max_char_or_byte2 :unsigned-int)
	(min_byte1 :unsigned-int)
	(max_byte1 :unsigned-int)
	(all_chars_exist :int)
	(default_char :unsigned-int)
	(n_properties :int)
	(properties :pointer)
	(min_bounds XCharStruct)
	(max_bounds XCharStruct)
	(per_char :pointer)
	(ascent :int)
	(descent :int))

(cffi:defcstruct XTextItem
	(chars :string)
	(nchars :int)
	(delta :int)
	(font :pointer))

(cffi:defcstruct XChar2b
	(byte1 :unsigned-char)
	(byte2 :unsigned-char))

(cffi:defcstruct XTextItem16
	(chars :pointer)
	(nchars :int)
	(delta :int)
	(font :pointer))

(cffi:defcunion XEDataObject
	(display :pointer)
	(gc :pointer)
	(visual :pointer)
	(screen :pointer)
	(pixmap_format :pointer)
	(font :pointer))

(cffi:defcstruct XFontSetExtents
	(max_ink_extent XRectangle)
	(max_logical_extent XRectangle))

(cffi:defcstruct XmbTextItem
	(chars :string)
	(nchars :int)
	(delta :int)
	(font_set :pointer))

(cffi:defcstruct XwcTextItem
	(chars :pointer)
	(nchars :int)
	(delta :int)
	(font_set :pointer))

(alexandria:define-constant XNRequiredCharSet "requiredCharSet" :test #'string=)

(alexandria:define-constant XNQueryOrientation "queryOrientation" :test #'string=)

(alexandria:define-constant XNBaseFontName "baseFontName" :test #'string=)

(alexandria:define-constant XNOMAutomatic "omAutomatic" :test #'string=)

(alexandria:define-constant XNMissingCharSet "missingCharSet" :test #'string=)

(alexandria:define-constant XNDefaultString "defaultString" :test #'string=)

(alexandria:define-constant XNOrientation "orientation" :test #'string=)

(alexandria:define-constant XNDirectionalDependentDrawing "directionalDependentDrawing" :test #'string=)

(alexandria:define-constant XNContextualDrawing "contextualDrawing" :test #'string=)

(alexandria:define-constant XNFontInfo "fontInfo" :test #'string=)

(cffi:defcstruct XOMCharSetList
	(charset_count :int)
	(charset_list :pointer))

(cffi:defcenum XOrientation
	:XOMOrientation_LTR_TTB
	:XOMOrientation_RTL_TTB
	:XOMOrientation_TTB_LTR
	:XOMOrientation_TTB_RTL
	:XOMOrientation_Context)

(cffi:defcstruct XOMOrientation
	(num_orientation :int)
	(orientation :pointer))

(cffi:defcstruct XOMFontInfo
	(num_font :int)
	(font_struct_list :pointer)
	(font_name_list :pointer))

(cffi:defcstruct XIMStyles
	(count_styles :unsigned-short)
	(supported_styles :pointer))

;; ???
(alexandria:define-constant XIMPreeditArea #x01)

(alexandria:define-constant XIMPreeditCallbacks #x02)

(alexandria:define-constant XIMPreeditPosition #x04)

(alexandria:define-constant XIMPreeditNothing #x08)

(alexandria:define-constant XIMPreeditNone #x010)

(alexandria:define-constant XIMStatusArea #x0100)

(alexandria:define-constant XIMStatusCallbacks #x0200)

(alexandria:define-constant XIMStatusNothing #x0400)

(alexandria:define-constant XIMStatusNone #x0800)

(alexandria:define-constant XNVaNestedList "XNVaNestedList" :test #'string=)

(alexandria:define-constant XNQueryInputStyle "queryInputStyle" :test #'string=)

(alexandria:define-constant XNClientWindow "clientWindow" :test #'string=)

(alexandria:define-constant XNInputStyle "inputStyle" :test #'string=)

(alexandria:define-constant XNFocusWindow "focusWindow" :test #'string=)

(alexandria:define-constant XNResourceName "resourceName" :test #'string=)

(alexandria:define-constant XNResourceClass "resourceClass" :test #'string=)

(alexandria:define-constant XNGeometryCallback "geometryCallback" :test #'string=)

(alexandria:define-constant XNDestroyCallback "destroyCallback" :test #'string=)

(alexandria:define-constant XNFilterEvents "filterEvents" :test #'string=)

(alexandria:define-constant XNPreeditStartCallback "preeditStartCallback" :test #'string=)

(alexandria:define-constant XNPreeditDoneCallback "preeditDoneCallback" :test #'string=)

(alexandria:define-constant XNPreeditDrawCallback "preeditDrawCallback" :test #'string=)

(alexandria:define-constant XNPreeditCaretCallback "preeditCaretCallback" :test #'string=)

(alexandria:define-constant XNPreeditStateNotifyCallback "preeditStateNotifyCallback" :test #'string=)

(alexandria:define-constant XNPreeditAttributes "preeditAttributes" :test #'string=)

(alexandria:define-constant XNStatusStartCallback "statusStartCallback" :test #'string=)

(alexandria:define-constant XNStatusDoneCallback "statusDoneCallback" :test #'string=)

(alexandria:define-constant XNStatusDrawCallback "statusDrawCallback" :test #'string=)

(alexandria:define-constant XNStatusAttributes "statusAttributes" :test #'string=)

(alexandria:define-constant XNArea "area" :test #'string=)

(alexandria:define-constant XNAreaNeeded "areaNeeded" :test #'string=)

(alexandria:define-constant XNSpotLocation "spotLocation" :test #'string=)

(alexandria:define-constant XNColormap "colorMap" :test #'string=)

(alexandria:define-constant XNStdColormap "stdColorMap" :test #'string=)

(alexandria:define-constant XNForeground "foreground" :test #'string=)

(alexandria:define-constant XNBackground "background" :test #'string=)

(alexandria:define-constant XNBackgroundPixmap "backgroundPixmap" :test #'string=)

(alexandria:define-constant XNFontSet "fontSet" :test #'string=)

(alexandria:define-constant XNLineSpace "lineSpace" :test #'string=)

(alexandria:define-constant XNCursor "cursor" :test #'string=)

(alexandria:define-constant XNQueryIMValuesList "queryIMValuesList" :test #'string=)

(alexandria:define-constant XNQueryICValuesList "queryICValuesList" :test #'string=)

(alexandria:define-constant XNVisiblePosition "visiblePosition" :test #'string=)

(alexandria:define-constant XNR6PreeditCallback "r6PreeditCallback" :test #'string=)

(alexandria:define-constant XNStringConversionCallback "stringConversionCallback" :test #'string=)

(alexandria:define-constant XNStringConversion "stringConversion" :test #'string=)

(alexandria:define-constant XNResetState "resetState" :test #'string=)

(alexandria:define-constant XNHotKey "hotKey" :test #'string=)

(alexandria:define-constant XNHotKeyState "hotKeyState" :test #'string=)

(alexandria:define-constant XNPreeditState "preeditState" :test #'string=)

(alexandria:define-constant XNSeparatorofNestedList "separatorofNestedList" :test #'string=)

(alexandria:define-constant XBufferOverflow -1)

(alexandria:define-constant XLookupNone 1)

(alexandria:define-constant XLookupChars 2)

(alexandria:define-constant XLookupKeySym 3)

(alexandria:define-constant XLookupBoth 4)

(cffi:defcstruct XIMCallback
	(client_data :string)
	(callback :pointer))

(cffi:defcstruct XICCallback
	(client_data :string)
	(callback :pointer))

(alexandria:define-constant XIMReverse 1)

(alexandria:define-constant XIMUnderline (ash 1 1))

(alexandria:define-constant XIMHighlight (ash 1 2))

(alexandria:define-constant XIMPrimary (ash 1 5))

(alexandria:define-constant XIMSecondary (ash 1 6))

(alexandria:define-constant XIMTertiary (ash 1 7))

(alexandria:define-constant XIMVisibleToForward (ash 1 8))

(alexandria:define-constant XIMVisibleToBackword (ash 1 9))

(alexandria:define-constant XIMVisibleToCenter (ash 1 10))

(cffi:defcstruct XIMText
	(length :unsigned-short)
	(feedback :pointer)
	(encoding_is_wchar :int)
	(string :pointer))

(cffi:defcunion XIMText_string
	(multi_byte :string)
	(wide_char :pointer))

(alexandria:define-constant XIMPreeditUnKnown 0)

(alexandria:define-constant XIMPreeditEnable 1)

(alexandria:define-constant XIMPreeditDisable (ash 1 1))

(cffi:defcstruct XIMPreeditStateNotifyCallbackStruct
	(state :unsigned-long))

(alexandria:define-constant XIMInitialState 1)

(alexandria:define-constant XIMPreserveState (ash 1 1))

(alexandria:define-constant XIMStringConversionLeftEdge #x01)

(alexandria:define-constant XIMStringConversionRightEdge #x02)

(alexandria:define-constant XIMStringConversionTopEdge #x04)

(alexandria:define-constant XIMStringConversionBottomEdge #x08)

(alexandria:define-constant XIMStringConversionConcealed #x010)

(alexandria:define-constant XIMStringConversionWrapped #x020)

(cffi:defcstruct XIMStringConversionText
	(length :unsigned-short)
	(feedback :pointer)
	(encoding_is_wchar :int)
	(string :pointer))

(cffi:defcunion XIMStringConversionText_string
	(mbs :string)
	(wcs :pointer))

(alexandria:define-constant XIMStringConversionBuffer #x01)

(alexandria:define-constant XIMStringConversionLine #x02)

(alexandria:define-constant XIMStringConversionWord #x03)

(alexandria:define-constant XIMStringConversionChar #x04)

(alexandria:define-constant XIMStringConversionSubstitution #x01)

(alexandria:define-constant XIMStringConversionRetrieval #x02)

(cffi:defcenum XIMCaretDirection
	:XIMForwardChar
	:XIMBackwardChar
	:XIMForwardWord
	:XIMBackwardWord
	:XIMCaretUp
	:XIMCaretDown
	:XIMNextLine
	:XIMPreviousLine
	:XIMLineStart
	:XIMLineEnd
	:XIMAbsolutePosition
	:XIMDontChange)

(cffi:defcstruct XIMStringConversionCallbackStruct
	(position :unsigned-short)
	(direction XIMCaretDirection)
	(operation :unsigned-short)
	(factor :unsigned-short)
	(text :pointer))

(cffi:defcstruct XIMPreeditDrawCallbackStruct
	(caret :int)
	(chg_first :int)
	(chg_length :int)
	(text :pointer))

(cffi:defcenum XIMCaretStyle
	:XIMIsInvisible
	:XIMIsPrimary
	:XIMIsSecondary)

(cffi:defcstruct XIMPreeditCaretCallbackStruct
	(position :int)
	(direction XIMCaretDirection)
	(style XIMCaretStyle))

(cffi:defcenum XIMStatusDataType
	:XIMTextType
	:XIMBitmapType)

(cffi:defcstruct XIMStatusDrawCallbackStruct
	(type XIMStatusDataType)
	(data :pointer))

(cffi:defcunion XIMStatusDrawCallbackStruct_data
	(text :pointer)
	(bitmap :pointer))

(cffi:defcstruct XIMHotKeyTrigger
	(keysym :pointer)
	(modifier :int)
	(modifier_mask :int))

(cffi:defcstruct XIMHotKeyTriggers
	(num_hot_key :int)
	(key :pointer))

(alexandria:define-constant XIMHotKeyStateON #x01)

(alexandria:define-constant XIMHotKeyStateOFF #x02)

(cffi:defcstruct XIMValuesList
	(count_values :unsigned-short)
	(supported_values :pointer))

(cffi:defcvar ("_Xdebug" _Xdebug)
 :int)

(cffi:defcfun ("XQueryFont" XQueryFont) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XGetMotionEvents" XGetMotionEvents) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(cffi:defcfun ("XDeleteModifiermapEntry" XDeleteModifiermapEntry) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XGetModifierMapping" XGetModifierMapping) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XInsertModifiermapEntry" XInsertModifiermapEntry) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XNewModifiermap" XNewModifiermap) :pointer
  (arg0 :int))

(cffi:defcfun ("XCreateImage" XCreateImage) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :int)
  (arg4 :int)
  (arg5 :string)
  (arg6 :unsigned-int)
  (arg7 :unsigned-int)
  (arg8 :int)
  (arg9 :int))

(cffi:defcfun ("XInitImage" XInitImage) :int
  (arg0 :pointer))

(cffi:defcfun ("XGetImage" XGetImage) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-long)
  (arg7 :int))

(cffi:defcfun ("XGetSubImage" XGetSubImage) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-long)
  (arg7 :int)
  (arg8 :pointer)
  (arg9 :int)
  (arg10 :int))

(cffi:defcfun ("XrmInitialize" XrmInitialize) :void)

(cffi:defcfun ("XFetchBytes" XFetchBytes) :string
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XFetchBuffer" XFetchBuffer) :string
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XGetAtomName" XGetAtomName) :string
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XGetAtomNames" XGetAtomNames) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer))

(cffi:defcfun ("XKeysymToString" XKeysymToString) :string
  (arg0 :pointer))

(cffi:defcfun ("XSynchronize" XSynchronize) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XSetAfterFunction" XSetAfterFunction) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XInternAtoms" XInternAtoms) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :pointer))

(cffi:defcfun ("XCopyColormapAndFree" XCopyColormapAndFree) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XCreateColormap" XCreateColormap) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int))

(cffi:defcfun ("XCreatePixmapCursor" XCreatePixmapCursor) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int))

(cffi:defcfun ("XCreateFontCursor" XCreateFontCursor) :pointer
  (arg0 :pointer)
  (arg1 :unsigned-int))

(cffi:defcfun ("XCreateGC" XCreateGC) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :pointer))

(cffi:defcfun ("XGContextFromGC" XGContextFromGC) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XFlushGC" XFlushGC) :void
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XCreatePixmap" XCreatePixmap) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int)
  (arg4 :unsigned-int))

(cffi:defcfun ("XCreatePixmapFromBitmapData" XCreatePixmapFromBitmapData) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :unsigned-int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-long)
  (arg6 :unsigned-long)
  (arg7 :unsigned-int))

(cffi:defcfun ("XCreateSimpleWindow" XCreateSimpleWindow) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int)
  (arg7 :unsigned-long)
  (arg8 :unsigned-long))

(cffi:defcfun ("XGetSelectionOwner" XGetSelectionOwner) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XCreateWindow" XCreateWindow) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int)
  (arg7 :int)
  (arg8 :unsigned-int)
  (arg9 :pointer)
  (arg10 :unsigned-long)
  (arg11 :pointer))

(cffi:defcfun ("XListInstalledColormaps" XListInstalledColormaps) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XGetFontPath" XGetFontPath) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XListExtensions" XListExtensions) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XListProperties" XListProperties) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XListHosts" XListHosts) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XKeycodeToKeysym" XKeycodeToKeysym) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XLookupKeysym" XLookupKeysym) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XGetKeyboardMapping" XGetKeyboardMapping) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer))

(cffi:defcfun ("XMaxRequestSize" XMaxRequestSize) :long
  (arg0 :pointer))

(cffi:defcfun ("XExtendedMaxRequestSize" XExtendedMaxRequestSize) :long
  (arg0 :pointer))

(cffi:defcfun ("XResourceManagerString" XResourceManagerString) :string
  (arg0 :pointer))

(cffi:defcfun ("XScreenResourceString" XScreenResourceString) :string
  (arg0 :pointer))

(cffi:defcfun ("XDisplayMotionBufferSize" XDisplayMotionBufferSize) :unsigned-long
  (arg0 :pointer))

(cffi:defcfun ("XVisualIDFromVisual" XVisualIDFromVisual) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XInitThreads" XInitThreads) :int)

(cffi:defcfun ("XLockDisplay" XLockDisplay) :void
  (arg0 :pointer))

(cffi:defcfun ("XUnlockDisplay" XUnlockDisplay) :void
  (arg0 :pointer))

(cffi:defcfun ("XAddExtension" XAddExtension) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XFindOnExtensionList" XFindOnExtensionList) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XEHeadOfExtensionList" XEHeadOfExtensionList) :pointer
  (arg0 XEDataObject))

(cffi:defcfun ("XRootWindow" XRootWindow) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDefaultRootWindow" XDefaultRootWindow) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XRootWindowOfScreen" XRootWindowOfScreen) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XDefaultVisual" XDefaultVisual) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDefaultVisualOfScreen" XDefaultVisualOfScreen) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XDefaultGC" XDefaultGC) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDefaultGCOfScreen" XDefaultGCOfScreen) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XBlackPixel" XBlackPixel) :unsigned-long
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XWhitePixel" XWhitePixel) :unsigned-long
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XAllPlanes" XAllPlanes) :unsigned-long)

(cffi:defcfun ("XBlackPixelOfScreen" XBlackPixelOfScreen) :unsigned-long
  (arg0 :pointer))

(cffi:defcfun ("XWhitePixelOfScreen" XWhitePixelOfScreen) :unsigned-long
  (arg0 :pointer))

(cffi:defcfun ("XNextRequest" XNextRequest) :unsigned-long
  (arg0 :pointer))

(cffi:defcfun ("XLastKnownRequestProcessed" XLastKnownRequestProcessed) :unsigned-long
  (arg0 :pointer))

(cffi:defcfun ("XServerVendor" XServerVendor) :string
  (arg0 :pointer))

(cffi:defcfun ("XDisplayString" XDisplayString) :string
  (arg0 :pointer))

(cffi:defcfun ("XDefaultColormap" XDefaultColormap) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDefaultColormapOfScreen" XDefaultColormapOfScreen) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XDisplayOfScreen" XDisplayOfScreen) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XScreenOfDisplay" XScreenOfDisplay) :pointer
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDefaultScreenOfDisplay" XDefaultScreenOfDisplay) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XEventMaskOfScreen" XEventMaskOfScreen) :long
  (arg0 :pointer))

(cffi:defcfun ("XScreenNumberOfScreen" XScreenNumberOfScreen) :int
  (arg0 :pointer))

(cffi:defcfun ("XSetErrorHandler" XSetErrorHandler) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XSetIOErrorHandler" XSetIOErrorHandler) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XListPixmapFormats" XListPixmapFormats) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XListDepths" XListDepths) :pointer
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :pointer))

(cffi:defcfun ("XReconfigureWMWindow" XReconfigureWMWindow) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :unsigned-int)
  (arg4 :pointer))

(cffi:defcfun ("XGetWMProtocols" XGetWMProtocols) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XSetWMProtocols" XSetWMProtocols) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int))

(cffi:defcfun ("XIconifyWindow" XIconifyWindow) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XWithdrawWindow" XWithdrawWindow) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XGetCommand" XGetCommand) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XGetWMColormapWindows" XGetWMColormapWindows) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XSetWMColormapWindows" XSetWMColormapWindows) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int))

(cffi:defcfun ("XFreeStringList" XFreeStringList) :void
  (arg0 :pointer))

(cffi:defcfun ("XSetTransientForHint" XSetTransientForHint) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XActivateScreenSaver" XActivateScreenSaver) :int
  (arg0 :pointer))

(cffi:defcfun ("XAddHost" XAddHost) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XAddHosts" XAddHosts) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XAddToExtensionList" XAddToExtensionList) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XAddToSaveSet" XAddToSaveSet) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XAllocColor" XAllocColor) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XAllocColorCells" XAllocColorCells) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :unsigned-int)
  (arg5 :pointer)
  (arg6 :unsigned-int))

(cffi:defcfun ("XAllocColorPlanes" XAllocColorPlanes) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :int)
  (arg7 :int)
  (arg8 :pointer)
  (arg9 :pointer)
  (arg10 :pointer))

(cffi:defcfun ("XAllowEvents" XAllowEvents) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :pointer))

(cffi:defcfun ("XAutoRepeatOff" XAutoRepeatOff) :int
  (arg0 :pointer))

(cffi:defcfun ("XAutoRepeatOn" XAutoRepeatOn) :int
  (arg0 :pointer))

(cffi:defcfun ("XBell" XBell) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XBitmapBitOrder" XBitmapBitOrder) :int
  (arg0 :pointer))

(cffi:defcfun ("XBitmapPad" XBitmapPad) :int
  (arg0 :pointer))

(cffi:defcfun ("XBitmapUnit" XBitmapUnit) :int
  (arg0 :pointer))

(cffi:defcfun ("XCellsOfScreen" XCellsOfScreen) :int
  (arg0 :pointer))

(cffi:defcfun ("XChangeActivePointerGrab" XChangeActivePointerGrab) :int
  (arg0 :pointer)
  (arg1 :unsigned-int)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XChangeGC" XChangeGC) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :pointer))

(cffi:defcfun ("XChangeKeyboardControl" XChangeKeyboardControl) :int
  (arg0 :pointer)
  (arg1 :unsigned-long)
  (arg2 :pointer))

(cffi:defcfun ("XChangeKeyboardMapping" XChangeKeyboardMapping) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :int))

(cffi:defcfun ("XChangePointerControl" XChangePointerControl) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :int)
  (arg4 :int)
  (arg5 :int))

(cffi:defcfun ("XChangeSaveSet" XChangeSaveSet) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XChangeWindowAttributes" XChangeWindowAttributes) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :pointer))

(cffi:defcfun ("XCheckIfEvent" XCheckIfEvent) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :string))

(cffi:defcfun ("XCheckMaskEvent" XCheckMaskEvent) :int
  (arg0 :pointer)
  (arg1 :long)
  (arg2 :pointer))

(cffi:defcfun ("XCheckTypedEvent" XCheckTypedEvent) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :pointer))

(cffi:defcfun ("XCheckTypedWindowEvent" XCheckTypedWindowEvent) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer))

(cffi:defcfun ("XCheckWindowEvent" XCheckWindowEvent) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :long)
  (arg3 :pointer))

(cffi:defcfun ("XCirculateSubwindows" XCirculateSubwindows) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XCirculateSubwindowsDown" XCirculateSubwindowsDown) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XCirculateSubwindowsUp" XCirculateSubwindowsUp) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XClearArea" XClearArea) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int)
  (arg6 :int))

(cffi:defcfun ("XClearWindow" XClearWindow) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XCloseDisplay" XCloseDisplay) :int
  (arg0 :pointer))

(cffi:defcfun ("XConfigureWindow" XConfigureWindow) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :pointer))

(cffi:defcfun ("XConnectionNumber" XConnectionNumber) :int
  (arg0 :pointer))

(cffi:defcfun ("XConvertSelection" XConvertSelection) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer))

(cffi:defcfun ("XCopyArea" XCopyArea) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :unsigned-int)
  (arg7 :unsigned-int)
  (arg8 :int)
  (arg9 :int))

(cffi:defcfun ("XCopyGC" XCopyGC) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :pointer))

(cffi:defcfun ("XCopyPlane" XCopyPlane) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :unsigned-int)
  (arg7 :unsigned-int)
  (arg8 :int)
  (arg9 :int)
  (arg10 :unsigned-long))

(cffi:defcfun ("XDefaultDepth" XDefaultDepth) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDefaultDepthOfScreen" XDefaultDepthOfScreen) :int
  (arg0 :pointer))

(cffi:defcfun ("XDefaultScreen" XDefaultScreen) :int
  (arg0 :pointer))

(cffi:defcfun ("XDefineCursor" XDefineCursor) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XDeleteProperty" XDeleteProperty) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XDestroyWindow" XDestroyWindow) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XDestroySubwindows" XDestroySubwindows) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XDoesBackingStore" XDoesBackingStore) :int
  (arg0 :pointer))

(cffi:defcfun ("XDoesSaveUnders" XDoesSaveUnders) :int
  (arg0 :pointer))

(cffi:defcfun ("XDisableAccessControl" XDisableAccessControl) :int
  (arg0 :pointer))

(cffi:defcfun ("XDisplayCells" XDisplayCells) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDisplayHeight" XDisplayHeight) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDisplayHeightMM" XDisplayHeightMM) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDisplayKeycodes" XDisplayKeycodes) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XDisplayPlanes" XDisplayPlanes) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDisplayWidth" XDisplayWidth) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDisplayWidthMM" XDisplayWidthMM) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XDrawArc" XDrawArc) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int)
  (arg7 :int)
  (arg8 :int))

(cffi:defcfun ("XDrawArcs" XDrawArcs) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int))

(cffi:defcfun ("XDrawLine" XDrawLine) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :int)
  (arg6 :int))

(cffi:defcfun ("XDrawLines" XDrawLines) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int))

(cffi:defcfun ("XDrawPoint" XDrawPoint) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int))

(cffi:defcfun ("XDrawPoints" XDrawPoints) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int))

(cffi:defcfun ("XDrawRectangle" XDrawRectangle) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int))

(cffi:defcfun ("XDrawRectangles" XDrawRectangles) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int))

(cffi:defcfun ("XDrawSegments" XDrawSegments) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int))

(cffi:defcfun ("XDrawText" XDrawText) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cffi:defcfun ("XDrawText16" XDrawText16) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cffi:defcfun ("XEnableAccessControl" XEnableAccessControl) :int
  (arg0 :pointer))

(cffi:defcfun ("XEventsQueued" XEventsQueued) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XFetchName" XFetchName) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XFillArc" XFillArc) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int)
  (arg7 :int)
  (arg8 :int))

(cffi:defcfun ("XFillArcs" XFillArcs) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int))

(cffi:defcfun ("XFillPolygon" XFillPolygon) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :int))

(cffi:defcfun ("XFillRectangle" XFillRectangle) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int))

(cffi:defcfun ("XFillRectangles" XFillRectangles) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int))

(cffi:defcfun ("XFlush" XFlush) :int
  (arg0 :pointer))

(cffi:defcfun ("XForceScreenSaver" XForceScreenSaver) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XFree" XFree) :int
  (arg0 :pointer))

(cffi:defcfun ("XFreeColormap" XFreeColormap) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XFreeColors" XFreeColors) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :unsigned-long))

(cffi:defcfun ("XFreeCursor" XFreeCursor) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XFreeExtensionList" XFreeExtensionList) :int
  (arg0 :pointer))

(cffi:defcfun ("XFreeFont" XFreeFont) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XFreeFontInfo" XFreeFontInfo) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XFreeFontNames" XFreeFontNames) :int
  (arg0 :pointer))

(cffi:defcfun ("XFreeFontPath" XFreeFontPath) :int
  (arg0 :pointer))

(cffi:defcfun ("XFreeGC" XFreeGC) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XFreeModifiermap" XFreeModifiermap) :int
  (arg0 :pointer))

(cffi:defcfun ("XFreePixmap" XFreePixmap) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XGetErrorText" XGetErrorText) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :string)
  (arg3 :int))

(cffi:defcfun ("XGetFontProperty" XGetFontProperty) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XGetGCValues" XGetGCValues) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :pointer))

(cffi:defcfun ("XGetGeometry" XGetGeometry) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cffi:defcfun ("XGetIconName" XGetIconName) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XGetInputFocus" XGetInputFocus) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XGetKeyboardControl" XGetKeyboardControl) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XGetPointerControl" XGetPointerControl) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XGetPointerMapping" XGetPointerMapping) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XGetScreenSaver" XGetScreenSaver) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(cffi:defcfun ("XGetTransientForHint" XGetTransientForHint) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XGetWindowProperty" XGetWindowProperty) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :long)
  (arg4 :long)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer)
  (arg9 :pointer)
  (arg10 :pointer)
  (arg11 :pointer))

(cffi:defcfun ("XGetWindowAttributes" XGetWindowAttributes) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XGrabButton" XGrabButton) :int
  (arg0 :pointer)
  (arg1 :unsigned-int)
  (arg2 :unsigned-int)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :int)
  (arg7 :int)
  (arg8 :pointer)
  (arg9 :pointer))

(cffi:defcfun ("XGrabKey" XGrabKey) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :unsigned-int)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :int))

(cffi:defcfun ("XGrabKeyboard" XGrabKeyboard) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer))

(cffi:defcfun ("XGrabPointer" XGrabPointer) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :unsigned-int)
  (arg4 :int)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cffi:defcfun ("XGrabServer" XGrabServer) :int
  (arg0 :pointer))

(cffi:defcfun ("XHeightMMOfScreen" XHeightMMOfScreen) :int
  (arg0 :pointer))

(cffi:defcfun ("XHeightOfScreen" XHeightOfScreen) :int
  (arg0 :pointer))

(cffi:defcfun ("XIfEvent" XIfEvent) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :string))

(cffi:defcfun ("XImageByteOrder" XImageByteOrder) :int
  (arg0 :pointer))

(cffi:defcfun ("XInstallColormap" XInstallColormap) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XKeysymToKeycode" XKeysymToKeycode) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XKillClient" XKillClient) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XLowerWindow" XLowerWindow) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XMapRaised" XMapRaised) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XMapSubwindows" XMapSubwindows) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XMapWindow" XMapWindow) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XMaskEvent" XMaskEvent) :int
  (arg0 :pointer)
  (arg1 :long)
  (arg2 :pointer))

(cffi:defcfun ("XMaxCmapsOfScreen" XMaxCmapsOfScreen) :int
  (arg0 :pointer))

(cffi:defcfun ("XMinCmapsOfScreen" XMinCmapsOfScreen) :int
  (arg0 :pointer))

(cffi:defcfun ("XMoveResizeWindow" XMoveResizeWindow) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :unsigned-int)
  (arg5 :unsigned-int))

(cffi:defcfun ("XMoveWindow" XMoveWindow) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int))

(cffi:defcfun ("XNextEvent" XNextEvent) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XNoOp" XNoOp) :int
  (arg0 :pointer))

(cffi:defcfun ("XPeekEvent" XPeekEvent) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XPeekIfEvent" XPeekIfEvent) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :string))

(cffi:defcfun ("XPending" XPending) :int
  (arg0 :pointer))

(cffi:defcfun ("XPlanesOfScreen" XPlanesOfScreen) :int
  (arg0 :pointer))

(cffi:defcfun ("XProtocolRevision" XProtocolRevision) :int
  (arg0 :pointer))

(cffi:defcfun ("XProtocolVersion" XProtocolVersion) :int
  (arg0 :pointer))

(cffi:defcfun ("XPutBackEvent" XPutBackEvent) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XPutImage" XPutImage) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :int)
  (arg5 :int)
  (arg6 :int)
  (arg7 :int)
  (arg8 :unsigned-int)
  (arg9 :unsigned-int))

(cffi:defcfun ("XQLength" XQLength) :int
  (arg0 :pointer))

(cffi:defcfun ("XQueryBestCursor" XQueryBestCursor) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int)
  (arg4 :pointer)
  (arg5 :pointer))

(cffi:defcfun ("XQueryBestSize" XQueryBestSize) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :pointer)
  (arg3 :unsigned-int)
  (arg4 :unsigned-int)
  (arg5 :pointer)
  (arg6 :pointer))

(cffi:defcfun ("XQueryBestStipple" XQueryBestStipple) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int)
  (arg4 :pointer)
  (arg5 :pointer))

(cffi:defcfun ("XQueryBestTile" XQueryBestTile) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int)
  (arg4 :pointer)
  (arg5 :pointer))

(cffi:defcfun ("XQueryColor" XQueryColor) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XQueryColors" XQueryColors) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int))

(cffi:defcfun ("XQueryKeymap" XQueryKeymap) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XQueryPointer" XQueryPointer) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cffi:defcfun ("XQueryTree" XQueryTree) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :pointer))

(cffi:defcfun ("XRaiseWindow" XRaiseWindow) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XRecolorCursor" XRecolorCursor) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XRefreshKeyboardMapping" XRefreshKeyboardMapping) :int
  (arg0 :pointer))

(cffi:defcfun ("XRemoveFromSaveSet" XRemoveFromSaveSet) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XRemoveHost" XRemoveHost) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XRemoveHosts" XRemoveHosts) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XReparentWindow" XReparentWindow) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int))

(cffi:defcfun ("XResetScreenSaver" XResetScreenSaver) :int
  (arg0 :pointer))

(cffi:defcfun ("XResizeWindow" XResizeWindow) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :unsigned-int))

(cffi:defcfun ("XRestackWindows" XRestackWindows) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XRotateBuffers" XRotateBuffers) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XRotateWindowProperties" XRotateWindowProperties) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int))

(cffi:defcfun ("XScreenCount" XScreenCount) :int
  (arg0 :pointer))

(cffi:defcfun ("XSelectInput" XSelectInput) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :long))

(cffi:defcfun ("XSendEvent" XSendEvent) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :long)
  (arg4 :pointer))

(cffi:defcfun ("XSetAccessControl" XSetAccessControl) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XSetArcMode" XSetArcMode) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XSetBackground" XSetBackground) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long))

(cffi:defcfun ("XSetClipMask" XSetClipMask) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetClipOrigin" XSetClipOrigin) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int))

(cffi:defcfun ("XSetClipRectangles" XSetClipRectangles) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int)
  (arg4 :pointer)
  (arg5 :int)
  (arg6 :int))

(cffi:defcfun ("XSetCloseDownMode" XSetCloseDownMode) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XSetCommand" XSetCommand) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int))

(cffi:defcfun ("XSetFillRule" XSetFillRule) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XSetFillStyle" XSetFillStyle) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XSetFont" XSetFont) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetFontPath" XSetFontPath) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XSetForeground" XSetForeground) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long))

(cffi:defcfun ("XSetFunction" XSetFunction) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XSetGraphicsExposures" XSetGraphicsExposures) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XSetInputFocus" XSetInputFocus) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer))

(cffi:defcfun ("XSetLineAttributes" XSetLineAttributes) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int)
  (arg3 :int)
  (arg4 :int)
  (arg5 :int))

(cffi:defcfun ("XSetModifierMapping" XSetModifierMapping) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XSetPlaneMask" XSetPlaneMask) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long))

(cffi:defcfun ("XSetScreenSaver" XSetScreenSaver) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :int)
  (arg4 :int))

(cffi:defcfun ("XSetSelectionOwner" XSetSelectionOwner) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XSetState" XSetState) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long)
  (arg3 :unsigned-long)
  (arg4 :int)
  (arg5 :unsigned-long))

(cffi:defcfun ("XSetStipple" XSetStipple) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetSubwindowMode" XSetSubwindowMode) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XSetTSOrigin" XSetTSOrigin) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :int))

(cffi:defcfun ("XSetTile" XSetTile) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetWindowBackground" XSetWindowBackground) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long))

(cffi:defcfun ("XSetWindowBackgroundPixmap" XSetWindowBackgroundPixmap) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetWindowBorder" XSetWindowBorder) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-long))

(cffi:defcfun ("XSetWindowBorderPixmap" XSetWindowBorderPixmap) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetWindowBorderWidth" XSetWindowBorderWidth) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :unsigned-int))

(cffi:defcfun ("XSetWindowColormap" XSetWindowColormap) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XStoreColor" XStoreColor) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XStoreColors" XStoreColors) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int))

(cffi:defcfun ("XSync" XSync) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XTranslateCoordinates" XTranslateCoordinates) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :pointer)
  (arg7 :pointer))

(cffi:defcfun ("XUndefineCursor" XUndefineCursor) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XUngrabButton" XUngrabButton) :int
  (arg0 :pointer)
  (arg1 :unsigned-int)
  (arg2 :unsigned-int)
  (arg3 :pointer))

(cffi:defcfun ("XUngrabKey" XUngrabKey) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :unsigned-int)
  (arg3 :pointer))

(cffi:defcfun ("XUngrabKeyboard" XUngrabKeyboard) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XUngrabPointer" XUngrabPointer) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XUngrabServer" XUngrabServer) :int
  (arg0 :pointer))

(cffi:defcfun ("XUninstallColormap" XUninstallColormap) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XUnloadFont" XUnloadFont) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XUnmapSubwindows" XUnmapSubwindows) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XUnmapWindow" XUnmapWindow) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XVendorRelease" XVendorRelease) :int
  (arg0 :pointer))

(cffi:defcfun ("XWarpPointer" XWarpPointer) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :unsigned-int)
  (arg6 :unsigned-int)
  (arg7 :int)
  (arg8 :int))

(cffi:defcfun ("XWidthMMOfScreen" XWidthMMOfScreen) :int
  (arg0 :pointer))

(cffi:defcfun ("XWidthOfScreen" XWidthOfScreen) :int
  (arg0 :pointer))

(cffi:defcfun ("XWindowEvent" XWindowEvent) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :long)
  (arg3 :pointer))

(cffi:defcfun ("XSupportsLocale" XSupportsLocale) :int)

(cffi:defcfun ("XSetLocaleModifiers" XSetLocaleModifiers) :string
  (arg0 :string))

(cffi:defcfun ("XCloseOM" XCloseOM) :int
  (arg0 :pointer))

(cffi:defcfun ("XDisplayOfOM" XDisplayOfOM) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XLocaleOfOM" XLocaleOfOM) :string
  (arg0 :pointer))

(cffi:defcfun ("XDestroyOC" XDestroyOC) :void
  (arg0 :pointer))

(cffi:defcfun ("XOMOfOC" XOMOfOC) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XFreeFontSet" XFreeFontSet) :void
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XFontsOfFontSet" XFontsOfFontSet) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XBaseFontNameListOfFontSet" XBaseFontNameListOfFontSet) :string
  (arg0 :pointer))

(cffi:defcfun ("XLocaleOfFontSet" XLocaleOfFontSet) :string
  (arg0 :pointer))

(cffi:defcfun ("XContextDependentDrawing" XContextDependentDrawing) :int
  (arg0 :pointer))

(cffi:defcfun ("XDirectionalDependentDrawing" XDirectionalDependentDrawing) :int
  (arg0 :pointer))

(cffi:defcfun ("XContextualDrawing" XContextualDrawing) :int
  (arg0 :pointer))

(cffi:defcfun ("XExtentsOfFontSet" XExtentsOfFontSet) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XmbDrawText" XmbDrawText) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cffi:defcfun ("XwcDrawText" XwcDrawText) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cffi:defcfun ("Xutf8DrawText" Xutf8DrawText) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :int)
  (arg5 :pointer)
  (arg6 :int))

(cffi:defcfun ("XOpenIM" XOpenIM) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :string))

(cffi:defcfun ("XCloseIM" XCloseIM) :int
  (arg0 :pointer))

(cffi:defcfun ("XDisplayOfIM" XDisplayOfIM) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XLocaleOfIM" XLocaleOfIM) :string
  (arg0 :pointer))

(cffi:defcfun ("XDestroyIC" XDestroyIC) :void
  (arg0 :pointer))

(cffi:defcfun ("XSetICFocus" XSetICFocus) :void
  (arg0 :pointer))

(cffi:defcfun ("XUnsetICFocus" XUnsetICFocus) :void
  (arg0 :pointer))

(cffi:defcfun ("XwcResetIC" XwcResetIC) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XmbResetIC" XmbResetIC) :string
  (arg0 :pointer))

(cffi:defcfun ("Xutf8ResetIC" Xutf8ResetIC) :string
  (arg0 :pointer))

(cffi:defcfun ("XIMOfIC" XIMOfIC) :pointer
  (arg0 :pointer))

(cffi:defcfun ("XFilterEvent" XFilterEvent) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XmbLookupString" XmbLookupString) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :int)
  (arg4 :pointer)
  (arg5 :pointer))

(cffi:defcfun ("XwcLookupString" XwcLookupString) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :pointer)
  (arg5 :pointer))

(cffi:defcfun ("Xutf8LookupString" Xutf8LookupString) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :int)
  (arg4 :pointer)
  (arg5 :pointer))

(cffi:defcfun ("XRegisterIMInstantiateCallback" XRegisterIMInstantiateCallback) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :string)
  (arg4 :pointer)
  (arg5 :string))

(cffi:defcfun ("XUnregisterIMInstantiateCallback" XUnregisterIMInstantiateCallback) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :string)
  (arg4 :pointer)
  (arg5 :string))

(cffi:defcfun ("XInternalConnectionNumbers" XInternalConnectionNumbers) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XProcessInternalConnection" XProcessInternalConnection) :void
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("XAddConnectionWatch" XAddConnectionWatch) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :string))

(cffi:defcfun ("XRemoveConnectionWatch" XRemoveConnectionWatch) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :string))

(cffi:defcfun ("XSetAuthorization" XSetAuthorization) :void
  (arg0 :string)
  (arg1 :int)
  (arg2 :string)
  (arg3 :int))

(cffi:defcfun ("_Xmbtowc" _Xmbtowc) :int
  (arg0 :pointer)
  (arg1 :string)
  (arg2 :int))

(cffi:defcfun ("_Xwctomb" _Xwctomb) :int
  (arg0 :string)
  (arg1 :pointer))

;;================================
;; from X.h
;; $ swig -cffi -module x11 -o x.lisp /usr/X11/include/X11/X.h
;;================================
(alexandria:define-constant X_PROTOCOL 11)

(alexandria:define-constant X_PROTOCOL_REVISION 0)

(alexandria:define-constant None #x0)

(alexandria:define-constant ParentRelative 1)

(alexandria:define-constant CopyFromParent #x0)

(alexandria:define-constant PointerWindow #x0)

(alexandria:define-constant InputFocus 1)

(alexandria:define-constant PointerRoot 1)

(alexandria:define-constant AnyPropertyType #x0)

(alexandria:define-constant AnyKey #x0)

(alexandria:define-constant AnyButton #x0)

(alexandria:define-constant AllTemporary #x0)

(alexandria:define-constant CurrentTime #x0)

(alexandria:define-constant NoSymbol #x0)

(alexandria:define-constant NoEventMask #x0)

(alexandria:define-constant KeyPressMask (ash 1 0))

(alexandria:define-constant KeyReleaseMask (ash 1 1))

(alexandria:define-constant ButtonPressMask (ash 1 2))

(alexandria:define-constant ButtonReleaseMask (ash 1 3))

(alexandria:define-constant EnterWindowMask (ash 1 4))

(alexandria:define-constant LeaveWindowMask (ash 1 5))

(alexandria:define-constant PointerMotionMask (ash 1 6))

(alexandria:define-constant PointerMotionHintMask (ash 1 7))

(alexandria:define-constant Button1MotionMask (ash 1 8))

(alexandria:define-constant Button2MotionMask (ash 1 9))

(alexandria:define-constant Button3MotionMask (ash 1 10))

(alexandria:define-constant Button4MotionMask (ash 1 11))

(alexandria:define-constant Button5MotionMask (ash 1 12))

(alexandria:define-constant ButtonMotionMask (ash 1 13))

(alexandria:define-constant KeymapStateMask (ash 1 14))

(alexandria:define-constant ExposureMask (ash 1 15))

(alexandria:define-constant VisibilityChangeMask (ash 1 16))

(alexandria:define-constant StructureNotifyMask (ash 1 17))

(alexandria:define-constant ResizeRedirectMask (ash 1 18))

(alexandria:define-constant SubstructureNotifyMask (ash 1 19))

(alexandria:define-constant SubstructureRedirectMask (ash 1 20))

(alexandria:define-constant FocusChangeMask (ash 1 21))

(alexandria:define-constant PropertyChangeMask (ash 1 22))

(alexandria:define-constant ColormapChangeMask (ash 1 23))

(alexandria:define-constant OwnerGrabButtonMask (ash 1 24))

(alexandria:define-constant KeyPress 2)

(alexandria:define-constant KeyRelease 3)

(alexandria:define-constant ButtonPress 4)

(alexandria:define-constant ButtonRelease 5)

(alexandria:define-constant MotionNotify 6)

(alexandria:define-constant EnterNotify 7)

(alexandria:define-constant LeaveNotify 8)

(alexandria:define-constant FocusIn 9)

(alexandria:define-constant FocusOut 10)

(alexandria:define-constant KeymapNotify 11)

(alexandria:define-constant Expose 12)

(alexandria:define-constant GraphicsExpose 13)

(alexandria:define-constant NoExpose 14)

(alexandria:define-constant VisibilityNotify 15)

(alexandria:define-constant CreateNotify 16)

(alexandria:define-constant DestroyNotify 17)

(alexandria:define-constant UnmapNotify 18)

(alexandria:define-constant MapNotify 19)

(alexandria:define-constant MapRequest 20)

(alexandria:define-constant ReparentNotify 21)

(alexandria:define-constant ConfigureNotify 22)

(alexandria:define-constant ConfigureRequest 23)

(alexandria:define-constant GravityNotify 24)

(alexandria:define-constant ResizeRequest 25)

(alexandria:define-constant CirculateNotify 26)

(alexandria:define-constant CirculateRequest 27)

(alexandria:define-constant PropertyNotify 28)

(alexandria:define-constant SelectionClear 29)

(alexandria:define-constant SelectionRequest 30)

(alexandria:define-constant SelectionNotify 31)

(alexandria:define-constant ColormapNotify 32)

(alexandria:define-constant ClientMessage 33)

(alexandria:define-constant MappingNotify 34)

(alexandria:define-constant GenericEvent 35)

(alexandria:define-constant LASTEvent 36)

(alexandria:define-constant ShiftMask (cl:ash 1 0))

(alexandria:define-constant LockMask (cl:ash 1 1))

(alexandria:define-constant ControlMask (cl:ash 1 2))

(alexandria:define-constant Mod1Mask (cl:ash 1 3))

(alexandria:define-constant Mod2Mask (cl:ash 1 4))

(alexandria:define-constant Mod3Mask (cl:ash 1 5))

(alexandria:define-constant Mod4Mask (cl:ash 1 6))

(alexandria:define-constant Mod5Mask (cl:ash 1 7))

(alexandria:define-constant ShiftMapIndex 0)

(alexandria:define-constant LockMapIndex 1)

(alexandria:define-constant ControlMapIndex 2)

(alexandria:define-constant Mod1MapIndex 3)

(alexandria:define-constant Mod2MapIndex 4)

(alexandria:define-constant Mod3MapIndex 5)

(alexandria:define-constant Mod4MapIndex 6)

(alexandria:define-constant Mod5MapIndex 7)

(alexandria:define-constant Button1Mask (cl:ash 1 8))

(alexandria:define-constant Button2Mask (cl:ash 1 9))

(alexandria:define-constant Button3Mask (cl:ash 1 10))

(alexandria:define-constant Button4Mask (cl:ash 1 11))

(alexandria:define-constant Button5Mask (cl:ash 1 12))

(alexandria:define-constant AnyModifier (cl:ash 1 15))

(alexandria:define-constant Button1 1)

(alexandria:define-constant Button2 2)

(alexandria:define-constant Button3 3)

(alexandria:define-constant Button4 4)

(alexandria:define-constant Button5 5)

(alexandria:define-constant NotifyNormal 0)

(alexandria:define-constant NotifyGrab 1)

(alexandria:define-constant NotifyUngrab 2)

(alexandria:define-constant NotifyWhileGrabbed 3)

(alexandria:define-constant NotifyHint 1)

(alexandria:define-constant NotifyAncestor 0)

(alexandria:define-constant NotifyVirtual 1)

(alexandria:define-constant NotifyInferior 2)

(alexandria:define-constant NotifyNonlinear 3)

(alexandria:define-constant NotifyNonlinearVirtual 4)

(alexandria:define-constant NotifyPointer 5)

(alexandria:define-constant NotifyPointerRoot 6)

(alexandria:define-constant NotifyDetailNone 7)

(alexandria:define-constant VisibilityUnobscured 0)

(alexandria:define-constant VisibilityPartiallyObscured 1)

(alexandria:define-constant VisibilityFullyObscured 2)

(alexandria:define-constant PlaceOnTop 0)

(alexandria:define-constant PlaceOnBottom 1)

(alexandria:define-constant FamilyInternet 0)

(alexandria:define-constant FamilyDECnet 1)

(alexandria:define-constant FamilyChaos 2)

(alexandria:define-constant FamilyInternet6 6)

(alexandria:define-constant FamilyServerInterpreted 5)

(alexandria:define-constant PropertyNewValue 0)

(alexandria:define-constant PropertyDelete 1)

(alexandria:define-constant ColormapUninstalled 0)

(alexandria:define-constant ColormapInstalled 1)

(alexandria:define-constant GrabModeSync 0)

(alexandria:define-constant GrabModeAsync 1)

(alexandria:define-constant GrabSuccess 0)

(alexandria:define-constant AlreadyGrabbed 1)

(alexandria:define-constant GrabInvalidTime 2)

(alexandria:define-constant GrabNotViewable 3)

(alexandria:define-constant GrabFrozen 4)

(alexandria:define-constant AsyncPointer 0)

(alexandria:define-constant SyncPointer 1)

(alexandria:define-constant ReplayPointer 2)

(alexandria:define-constant AsyncKeyboard 3)

(alexandria:define-constant SyncKeyboard 4)

(alexandria:define-constant ReplayKeyboard 5)

(alexandria:define-constant AsyncBoth 6)

(alexandria:define-constant SyncBoth 7)

(alexandria:define-constant RevertToParent 2)

(alexandria:define-constant Success 0)

(alexandria:define-constant BadRequest 1)

(alexandria:define-constant BadValue 2)

(alexandria:define-constant BadWindow 3)

(alexandria:define-constant BadPixmap 4)

(alexandria:define-constant BadAtom 5)

(alexandria:define-constant BadCursor 6)

(alexandria:define-constant BadFont 7)

(alexandria:define-constant BadMatch 8)

(alexandria:define-constant BadDrawable 9)

(alexandria:define-constant BadAccess 10)

(alexandria:define-constant BadAlloc 11)

(alexandria:define-constant BadColor 12)

(alexandria:define-constant BadGC 13)

(alexandria:define-constant BadIDChoice 14)

(alexandria:define-constant BadName 15)

(alexandria:define-constant BadLength 16)

(alexandria:define-constant BadImplementation 17)

(alexandria:define-constant FirstExtensionError 128)

(alexandria:define-constant LastExtensionError 255)

(alexandria:define-constant InputOutput 1)

(alexandria:define-constant InputOnly 2)

(alexandria:define-constant CWBackPixmap (ash 1 0))

(alexandria:define-constant CWBackPixel (ash 1 1))

(alexandria:define-constant CWBorderPixmap (ash 1 2))

(alexandria:define-constant CWBorderPixel (ash 1 3))

(alexandria:define-constant CWBitGravity (ash 1 4))

(alexandria:define-constant CWWinGravity (ash 1 5))

(alexandria:define-constant CWBackingStore (ash 1 6))

(alexandria:define-constant CWBackingPlanes (ash 1 7))

(alexandria:define-constant CWBackingPixel (ash 1 8))

(alexandria:define-constant CWOverrideRedirect (ash 1 9))

(alexandria:define-constant CWSaveUnder (ash 1 10))

(alexandria:define-constant CWEventMask (ash 1 11))

(alexandria:define-constant CWDontPropagate (ash 1 12))

(alexandria:define-constant CWColormap (ash 1 13))

(alexandria:define-constant CWCursor (ash 1 14))

(alexandria:define-constant CWX (cl:ash 1 0))

(alexandria:define-constant CWY (cl:ash 1 1))

(alexandria:define-constant CWWidth (cl:ash 1 2))

(alexandria:define-constant CWHeight (cl:ash 1 3))

(alexandria:define-constant CWBorderWidth (cl:ash 1 4))

(alexandria:define-constant CWSibling (cl:ash 1 5))

(alexandria:define-constant CWStackMode (cl:ash 1 6))

(alexandria:define-constant ForgetGravity 0)

(alexandria:define-constant NorthWestGravity 1)

(alexandria:define-constant NorthGravity 2)

(alexandria:define-constant NorthEastGravity 3)

(alexandria:define-constant WestGravity 4)

(alexandria:define-constant CenterGravity 5)

(alexandria:define-constant EastGravity 6)

(alexandria:define-constant SouthWestGravity 7)

(alexandria:define-constant SouthGravity 8)

(alexandria:define-constant SouthEastGravity 9)

(alexandria:define-constant StaticGravity 10)

(alexandria:define-constant UnmapGravity 0)

(alexandria:define-constant NotUseful 0)

(alexandria:define-constant WhenMapped 1)

(alexandria:define-constant Always 2)

(alexandria:define-constant IsUnmapped 0)

(alexandria:define-constant IsUnviewable 1)

(alexandria:define-constant IsViewable 2)

(alexandria:define-constant SetModeInsert 0)

(alexandria:define-constant SetModeDelete 1)

(alexandria:define-constant DestroyAll 0)

(alexandria:define-constant RetainPermanent 1)

(alexandria:define-constant RetainTemporary 2)

(alexandria:define-constant Above 0)

(alexandria:define-constant Below 1)

(alexandria:define-constant TopIf 2)

(alexandria:define-constant BottomIf 3)

(alexandria:define-constant Opposite 4)

(alexandria:define-constant RaiseLowest 0)

(alexandria:define-constant LowerHighest 1)

(alexandria:define-constant PropModeReplace 0)

(alexandria:define-constant PropModePrepend 1)

(alexandria:define-constant PropModeAppend 2)

(alexandria:define-constant GXclear #x0)

(alexandria:define-constant GXand #x01)

(alexandria:define-constant GXandReverse #x02)

(alexandria:define-constant GXcopy #x03)

(alexandria:define-constant GXandInverted #x04)

(alexandria:define-constant GXnoop #x05)

(alexandria:define-constant GXxor #x06)

(alexandria:define-constant GXor #x07)

(alexandria:define-constant GXnor #x08)

(alexandria:define-constant GXequiv #x09)

(alexandria:define-constant GXinvert #x0A)

(alexandria:define-constant GXorReverse #x0B)

(alexandria:define-constant GXcopyInverted #x0C)

(alexandria:define-constant GXorInverted #x0D)

(alexandria:define-constant GXnand #x0E)

(alexandria:define-constant GXset #x0F)

(alexandria:define-constant LineSolid 0)

(alexandria:define-constant LineOnOffDash 1)

(alexandria:define-constant LineDoubleDash 2)

(alexandria:define-constant CapNotLast 0)

(alexandria:define-constant CapButt 1)

(alexandria:define-constant CapRound 2)

(alexandria:define-constant CapProjecting 3)

(alexandria:define-constant JoinMiter 0)

(alexandria:define-constant JoinRound 1)

(alexandria:define-constant JoinBevel 2)

(alexandria:define-constant FillSolid 0)

(alexandria:define-constant FillTiled 1)

(alexandria:define-constant FillStippled 2)

(alexandria:define-constant FillOpaqueStippled 3)

(alexandria:define-constant EvenOddRule 0)

(alexandria:define-constant WindingRule 1)

(alexandria:define-constant ClipByChildren 0)

(alexandria:define-constant IncludeInferiors 1)

(alexandria:define-constant Unsorted 0)

(alexandria:define-constant YSorted 1)

(alexandria:define-constant YXSorted 2)

(alexandria:define-constant YXBanded 3)

(alexandria:define-constant CoordModeOrigin 0)

(alexandria:define-constant CoordModePrevious 1)

(alexandria:define-constant Complex 0)

(alexandria:define-constant Nonconvex 1)

(alexandria:define-constant Convex 2)

(alexandria:define-constant ArcChord 0)

(alexandria:define-constant ArcPieSlice 1)

(alexandria:define-constant GCFunction (ash 1 0))

(alexandria:define-constant GCPlaneMask (ash 1 1))

(alexandria:define-constant GCForeground (ash 1 2))

(alexandria:define-constant GCBackground (ash 1 3))

(alexandria:define-constant GCLineWidth (ash 1 4))

(alexandria:define-constant GCLineStyle (ash 1 5))

(alexandria:define-constant GCCapStyle (ash 1 6))

(alexandria:define-constant GCJoinStyle (ash 1 7))

(alexandria:define-constant GCFillStyle (ash 1 8))

(alexandria:define-constant GCFillRule (ash 1 9))

(alexandria:define-constant GCTile (ash 1 10))

(alexandria:define-constant GCStipple (ash 1 11))

(alexandria:define-constant GCTileStipXOrigin (ash 1 12))

(alexandria:define-constant GCTileStipYOrigin (ash 1 13))

(alexandria:define-constant GCFont (ash 1 14))

(alexandria:define-constant GCSubwindowMode (ash 1 15))

(alexandria:define-constant GCGraphicsExposures (ash 1 16))

(alexandria:define-constant GCClipXOrigin (ash 1 17))

(alexandria:define-constant GCClipYOrigin (ash 1 18))

(alexandria:define-constant GCClipMask (ash 1 19))

(alexandria:define-constant GCDashOffset (ash 1 20))

(alexandria:define-constant GCDashList (ash 1 21))

(alexandria:define-constant GCArcMode (ash 1 22))

(alexandria:define-constant GCLastBit 22)

(alexandria:define-constant FontLeftToRight 0)

(alexandria:define-constant FontRightToLeft 1)

(alexandria:define-constant FontChange 255)

(alexandria:define-constant XYBitmap 0)

(alexandria:define-constant XYPixmap 1)

(alexandria:define-constant ZPixmap 2)

(alexandria:define-constant AllocNone 0)

(alexandria:define-constant AllocAll 1)

(alexandria:define-constant DoRed (cl:ash 1 0))

(alexandria:define-constant DoGreen (cl:ash 1 1))

(alexandria:define-constant DoBlue (cl:ash 1 2))

(alexandria:define-constant CursorShape 0)

(alexandria:define-constant TileShape 1)

(alexandria:define-constant StippleShape 2)

(alexandria:define-constant AutoRepeatModeOff 0)

(alexandria:define-constant AutoRepeatModeOn 1)

(alexandria:define-constant AutoRepeatModeDefault 2)

(alexandria:define-constant LedModeOff 0)

(alexandria:define-constant LedModeOn 1)

(alexandria:define-constant KBKeyClickPercent (ash 1 0))

(alexandria:define-constant KBBellPercent (ash 1 1))

(alexandria:define-constant KBBellPitch (ash 1 2))

(alexandria:define-constant KBBellDuration (ash 1 3))

(alexandria:define-constant KBLed (ash 1 4))

(alexandria:define-constant KBLedMode (ash 1 5))

(alexandria:define-constant KBKey (ash 1 6))

(alexandria:define-constant KBAutoRepeatMode (ash 1 7))

(alexandria:define-constant MappingSuccess 0)

(alexandria:define-constant MappingBusy 1)

(alexandria:define-constant MappingFailed 2)

(alexandria:define-constant MappingModifier 0)

(alexandria:define-constant MappingKeyboard 1)

(alexandria:define-constant MappingPointer 2)

(alexandria:define-constant DontPreferBlanking 0)

(alexandria:define-constant PreferBlanking 1)

(alexandria:define-constant DefaultBlanking 2)

(alexandria:define-constant DisableScreenSaver 0)

(alexandria:define-constant DisableScreenInterval 0)

(alexandria:define-constant DontAllowExposures 0)

(alexandria:define-constant AllowExposures 1)

(alexandria:define-constant DefaultExposures 2)

(alexandria:define-constant ScreenSaverReset 0)

(alexandria:define-constant ScreenSaverActive 1)

(alexandria:define-constant HostInsert 0)

(alexandria:define-constant HostDelete 1)

(alexandria:define-constant EnableAccess 1)

(alexandria:define-constant DisableAccess 0)

(alexandria:define-constant StaticGray 0)

(alexandria:define-constant GrayScale 1)

(alexandria:define-constant StaticColor 2)

(alexandria:define-constant PseudoColor 3)

(alexandria:define-constant TrueColor 4)

(alexandria:define-constant DirectColor 5)

(alexandria:define-constant LSBFirst 0)

(alexandria:define-constant MSBFirst 1)

;;================================
;; from Xutil.h
;; $ swig -cffi -module x11 -o x.util /usr/X11/include/X11/Xutil.h
;;================================

(alexandria:define-constant NoValue #x0000)

(alexandria:define-constant XValue #x0001)

(alexandria:define-constant YValue #x0002)

(alexandria:define-constant WidthValue #x0004)

(alexandria:define-constant HeightValue #x0008)

(alexandria:define-constant AllValues #x000F)

(alexandria:define-constant XNegative #x0010)

(alexandria:define-constant YNegative #x0020)

(cffi:defcstruct XSizeHints
	(flags :long)
	(x :int)
	(y :int)
	(width :int)
	(height :int)
	(min_width :int)
	(min_height :int)
	(max_width :int)
	(max_height :int)
	(width_inc :int)
	(height_inc :int)
	(base_width :int)
	(base_height :int)
	(win_gravity :int)
	(max_aspect :pointer)
	(min_aspect :pointer))

(cffi:defcstruct XSizeHints_max_aspect
	(x :int)
	(y :int))

(cffi:defcstruct XSizeHints_min_aspect
	(x :int)
	(y :int))

(alexandria:define-constant USPosition (ash 1 0))

(alexandria:define-constant USSize (ash 1 1))

(alexandria:define-constant PPosition (ash 1 2))

(alexandria:define-constant PSize (ash 1 3))

(alexandria:define-constant PMinSize (ash 1 4))

(alexandria:define-constant PMaxSize (ash 1 5))

(alexandria:define-constant PResizeInc (ash 1 6))

(alexandria:define-constant PAspect (ash 1 7))

(alexandria:define-constant PBaseSize (ash 1 8))

(alexandria:define-constant PWinGravity (ash 1 9))

(alexandria:define-constant PAllHints (cl:logior (ash 1 2)
                                     (ash 1 3)
                                     (ash 1 4)
                                     (ash 1 5)
                                     (ash 1 6)
                                     (ash 1 7)))

(cffi:defcstruct XWMHints
	(flags :long)
	(input :pointer)
	(initial_state :int)
	(icon_pixmap :pointer)
	(icon_window :pointer)
	(icon_x :int)
	(icon_y :int)
	(icon_mask :pointer)
	(window_group :pointer))

(alexandria:define-constant InputHint (ash 1 0))

(alexandria:define-constant StateHint (ash 1 1))

(alexandria:define-constant IconPixmapHint (ash 1 2))

(alexandria:define-constant IconWindowHint (ash 1 3))

(alexandria:define-constant IconPositionHint (ash 1 4))

(alexandria:define-constant IconMaskHint (ash 1 5))

(alexandria:define-constant WindowGroupHint (ash 1 6))

(alexandria:define-constant AllHints (cl:logior (ash 1 0)
                                    (ash 1 1)
                                    (ash 1 2)
                                    (ash 1 3)
                                    (ash 1 4)
                                    (ash 1 5)
                                    (ash 1 6)))

(alexandria:define-constant XUrgencyHint (ash 1 8))

(alexandria:define-constant WithdrawnState 0)

(alexandria:define-constant NormalState 1)

(alexandria:define-constant IconicState 3)

(alexandria:define-constant DontCareState 0)

(alexandria:define-constant ZoomState 2)

(alexandria:define-constant InactiveState 4)

(cffi:defcstruct XTextProperty
	(value :pointer)
	(encoding :pointer)
	(format :int)
	(nitems :unsigned-long))

(alexandria:define-constant XNoMemory -1)

(alexandria:define-constant XLocaleNotSupported -2)

(alexandria:define-constant XConverterNotFound -3)

(cffi:defcenum XICCEncodingStyle
	:XStringStyle
	:XCompoundTextStyle
	:XTextStyle
	:XStdICCTextStyle
	:XUTF8StringStyle)

(cffi:defcstruct XIconSize
	(min_width :int)
	(min_height :int)
	(max_width :int)
	(max_height :int)
	(width_inc :int)
	(height_inc :int))

(cffi:defcstruct XClassHint
	(res_name :string)
	(res_class :string))

(cffi:defcstruct XComposeStatus
	(compose_ptr :pointer)
	(chars_matched :int))

(alexandria:define-constant RectangleOut 0)

(alexandria:define-constant RectangleIn 1)

(alexandria:define-constant RectanglePart 2)

(cffi:defcstruct XVisualInfo
	(visual :pointer)
	(visualid :pointer)
	(screen :int)
	(depth :int)
	(class :int)
	(red_mask :unsigned-long)
	(green_mask :unsigned-long)
	(blue_mask :unsigned-long)
	(colormap_size :int)
	(bits_per_rgb :int))

(alexandria:define-constant VisualNoMask #x0)

(alexandria:define-constant VisualIDMask #x1)

(alexandria:define-constant VisualScreenMask #x2)

(alexandria:define-constant VisualDepthMask #x4)

(alexandria:define-constant VisualClassMask #x8)

(alexandria:define-constant VisualRedMaskMask #x10)

(alexandria:define-constant VisualGreenMaskMask #x20)

(alexandria:define-constant VisualBlueMaskMask #x40)

(alexandria:define-constant VisualColormapSizeMask #x80)

(alexandria:define-constant VisualBitsPerRGBMask #x100)

(alexandria:define-constant VisualAllMask #x1FF)

(cffi:defcstruct XStandardColormap
	(colormap :pointer)
	(red_max :unsigned-long)
	(red_mult :unsigned-long)
	(green_max :unsigned-long)
	(green_mult :unsigned-long)
	(blue_max :unsigned-long)
	(blue_mult :unsigned-long)
	(base_pixel :unsigned-long)
	(visualid :pointer)
	(killid :pointer))

(alexandria:define-constant BitmapSuccess 0)

(alexandria:define-constant BitmapOpenFailed 1)

(alexandria:define-constant BitmapFileInvalid 2)

(alexandria:define-constant BitmapNoMemory 3)

(alexandria:define-constant XCSUCCESS 0)

(alexandria:define-constant XCNOMEM 1)

(alexandria:define-constant XCNOENT 2)

(cffi:defcfun ("XAllocClassHint" XAllocClassHint) :pointer)

(cffi:defcfun ("XAllocIconSize" XAllocIconSize) :pointer)

(cffi:defcfun ("XAllocSizeHints" XAllocSizeHints) :pointer)

(cffi:defcfun ("XAllocStandardColormap" XAllocStandardColormap) :pointer)

(cffi:defcfun ("XAllocWMHints" XAllocWMHints) :pointer)

(cffi:defcfun ("XClipBox" XClipBox) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XCreateRegion" XCreateRegion) :pointer)

(cffi:defcfun ("XDefaultString" XDefaultString) :string)

(cffi:defcfun ("XDeleteContext" XDeleteContext) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int))

(cffi:defcfun ("XDestroyRegion" XDestroyRegion) :int
  (arg0 :pointer))

(cffi:defcfun ("XEmptyRegion" XEmptyRegion) :int
  (arg0 :pointer))

(cffi:defcfun ("XEqualRegion" XEqualRegion) :int
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XFindContext" XFindContext) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :pointer))

(cffi:defcfun ("XGetClassHint" XGetClassHint) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XGetIconSizes" XGetIconSizes) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XGetNormalHints" XGetNormalHints) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XGetRGBColormaps" XGetRGBColormaps) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(cffi:defcfun ("XGetSizeHints" XGetSizeHints) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XGetStandardColormap" XGetStandardColormap) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XGetTextProperty" XGetTextProperty) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XGetVisualInfo" XGetVisualInfo) :pointer
  (arg0 :pointer)
  (arg1 :long)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XGetWMClientMachine" XGetWMClientMachine) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XGetWMHints" XGetWMHints) :pointer
  (arg0 :pointer)
  (arg1 :pointer))

(cffi:defcfun ("XGetWMIconName" XGetWMIconName) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XGetWMName" XGetWMName) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XGetWMNormalHints" XGetWMNormalHints) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XGetWMSizeHints" XGetWMSizeHints) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer))

(cffi:defcfun ("XGetZoomHints" XGetZoomHints) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XIntersectRegion" XIntersectRegion) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XConvertCase" XConvertCase) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XLookupString" XLookupString) :int
  (arg0 :pointer)
  (arg1 :string)
  (arg2 :int)
  (arg3 :pointer)
  (arg4 :pointer))

(cffi:defcfun ("XMatchVisualInfo" XMatchVisualInfo) :pointer
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :int)
  (arg4 :pointer))

(cffi:defcfun ("XOffsetRegion" XOffsetRegion) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int))

(cffi:defcfun ("XPointInRegion" XPointInRegion) :pointer
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int))

(cffi:defcfun ("XPolygonRegion" XPolygonRegion) :pointer
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int))

(cffi:defcfun ("XRectInRegion" XRectInRegion) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int)
  (arg3 :unsigned-int)
  (arg4 :unsigned-int))

(cffi:defcfun ("XSaveContext" XSaveContext) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :int)
  (arg3 :string))

(cffi:defcfun ("XSetClassHint" XSetClassHint) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetIconSizes" XSetIconSizes) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int))

(cffi:defcfun ("XSetNormalHints" XSetNormalHints) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetRGBColormaps" XSetRGBColormaps) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :int)
  (arg4 :pointer))

(cffi:defcfun ("XSetSizeHints" XSetSizeHints) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XSetStandardProperties" XSetStandardProperties) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :string)
  ;;(arg4 :pointer)
  (arg4 :unsigned-int)
  (arg5 :pointer)
  (arg6 :int)
  (arg7 :pointer))

(cffi:defcfun ("XSetTextProperty" XSetTextProperty) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XSetWMClientMachine" XSetWMClientMachine) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetWMHints" XSetWMHints) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetWMIconName" XSetWMIconName) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetWMName" XSetWMName) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetWMNormalHints" XSetWMNormalHints) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetWMProperties" XSetWMProperties) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer)
  (arg4 :pointer)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cffi:defcfun ("XmbSetWMProperties" XmbSetWMProperties) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :string)
  (arg4 :pointer)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cffi:defcfun ("Xutf8SetWMProperties" Xutf8SetWMProperties) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :string)
  (arg3 :string)
  (arg4 :pointer)
  (arg5 :int)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer))

(cffi:defcfun ("XSetWMSizeHints" XSetWMSizeHints) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XSetRegion" XSetRegion) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XSetStandardColormap" XSetStandardColormap) :void
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer)
  (arg3 :pointer))

(cffi:defcfun ("XSetZoomHints" XSetZoomHints) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XShrinkRegion" XShrinkRegion) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :int))

(cffi:defcfun ("XStringListToTextProperty" XStringListToTextProperty) :pointer
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :pointer))

(cffi:defcfun ("XSubtractRegion" XSubtractRegion) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XmbTextListToTextProperty" XmbTextListToTextProperty) :int
  (display :pointer)
  (list :pointer)
  (count :int)
  (style XICCEncodingStyle)
  (text_prop_return :pointer))

(cffi:defcfun ("XwcTextListToTextProperty" XwcTextListToTextProperty) :int
  (display :pointer)
  (list :pointer)
  (count :int)
  (style XICCEncodingStyle)
  (text_prop_return :pointer))

(cffi:defcfun ("Xutf8TextListToTextProperty" Xutf8TextListToTextProperty) :int
  (display :pointer)
  (list :pointer)
  (count :int)
  (style XICCEncodingStyle)
  (text_prop_return :pointer))

(cffi:defcfun ("XwcFreeStringList" XwcFreeStringList) :void
  (list :pointer))

(cffi:defcfun ("XTextPropertyToStringList" XTextPropertyToStringList) :pointer
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XmbTextPropertyToTextList" XmbTextPropertyToTextList) :int
  (display :pointer)
  (text_prop :pointer)
  (list_return :pointer)
  (count_return :pointer))

(cffi:defcfun ("XwcTextPropertyToTextList" XwcTextPropertyToTextList) :int
  (display :pointer)
  (text_prop :pointer)
  (list_return :pointer)
  (count_return :pointer))

(cffi:defcfun ("Xutf8TextPropertyToTextList" Xutf8TextPropertyToTextList) :int
  (display :pointer)
  (text_prop :pointer)
  (list_return :pointer)
  (count_return :pointer))

(cffi:defcfun ("XUnionRectWithRegion" XUnionRectWithRegion) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XUnionRegion" XUnionRegion) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

(cffi:defcfun ("XWMGeometry" XWMGeometry) :int
  (arg0 :pointer)
  (arg1 :int)
  (arg2 :string)
  (arg3 :string)
  (arg4 :unsigned-int)
  (arg5 :pointer)
  (arg6 :pointer)
  (arg7 :pointer)
  (arg8 :pointer)
  (arg9 :pointer)
  (arg10 :pointer))

(cffi:defcfun ("XXorRegion" XXorRegion) :int
  (arg0 :pointer)
  (arg1 :pointer)
  (arg2 :pointer))

;;================================
;; from glx.h
;; $ swig -cffi -module x11 -o x11.lisp /usr/X11/include/GL/glx.h
;;================================
(alexandria:define-constant GLX_VERSION_1_1 1)

(alexandria:define-constant GLX_VERSION_1_2 1)

(alexandria:define-constant GLX_VERSION_1_3 1)

(alexandria:define-constant GLX_VERSION_1_4 1)

(alexandria:define-constant GLX_EXTENSION_NAME "GLX" :test #'string=)

(alexandria:define-constant GLX_USE_GL 1)

(alexandria:define-constant GLX_BUFFER_SIZE 2)

(alexandria:define-constant GLX_LEVEL 3)

(alexandria:define-constant GLX_RGBA 4)

(alexandria:define-constant GLX_DOUBLEBUFFER 5)

(alexandria:define-constant GLX_STEREO 6)

(alexandria:define-constant GLX_AUX_BUFFERS 7)

(alexandria:define-constant GLX_RED_SIZE 8)

(alexandria:define-constant GLX_GREEN_SIZE 9)

(alexandria:define-constant GLX_BLUE_SIZE 10)

(alexandria:define-constant GLX_ALPHA_SIZE 11)

(alexandria:define-constant GLX_DEPTH_SIZE 12)

(alexandria:define-constant GLX_STENCIL_SIZE 13)

(alexandria:define-constant GLX_ACCUM_RED_SIZE 14)

(alexandria:define-constant GLX_ACCUM_GREEN_SIZE 15)

(alexandria:define-constant GLX_ACCUM_BLUE_SIZE 16)

(alexandria:define-constant GLX_ACCUM_ALPHA_SIZE 17)

(alexandria:define-constant GLX_BAD_SCREEN 1)

(alexandria:define-constant GLX_BAD_ATTRIBUTE 2)

(alexandria:define-constant GLX_NO_EXTENSION 3)

(alexandria:define-constant GLX_BAD_VISUAL 4)

(alexandria:define-constant GLX_BAD_CONTEXT 5)

(alexandria:define-constant GLX_BAD_VALUE 6)

(alexandria:define-constant GLX_BAD_ENUM 7)

(alexandria:define-constant GLX_VENDOR 1)

(alexandria:define-constant GLX_VERSION 2)

(alexandria:define-constant GLX_EXTENSIONS 3)

(alexandria:define-constant GLX_CONFIG_CAVEAT #x20)

(alexandria:define-constant GLX_DONT_CARE #xFFFFFFFF)

(alexandria:define-constant GLX_X_VISUAL_TYPE #x22)

(alexandria:define-constant GLX_TRANSPARENT_TYPE #x23)

(alexandria:define-constant GLX_TRANSPARENT_INDEX_VALUE #x24)

(alexandria:define-constant GLX_TRANSPARENT_RED_VALUE #x25)

(alexandria:define-constant GLX_TRANSPARENT_GREEN_VALUE #x26)

(alexandria:define-constant GLX_TRANSPARENT_BLUE_VALUE #x27)

(alexandria:define-constant GLX_TRANSPARENT_ALPHA_VALUE #x28)

(alexandria:define-constant GLX_WINDOW_BIT #x1)

(alexandria:define-constant GLX_PIXMAP_BIT #x2)

(alexandria:define-constant GLX_PBUFFER_BIT #x4)

(alexandria:define-constant GLX_AUX_BUFFERS_BIT #x10)

(alexandria:define-constant GLX_FRONT_LEFT_BUFFER_BIT #x1)

(alexandria:define-constant GLX_FRONT_RIGHT_BUFFER_BIT #x2)

(alexandria:define-constant GLX_BACK_LEFT_BUFFER_BIT #x4)

(alexandria:define-constant GLX_BACK_RIGHT_BUFFER_BIT #x8)

(alexandria:define-constant GLX_DEPTH_BUFFER_BIT #x20)

(alexandria:define-constant GLX_STENCIL_BUFFER_BIT #x40)

(alexandria:define-constant GLX_ACCUM_BUFFER_BIT #x80)

(alexandria:define-constant GLX_NONE #x8000)

(alexandria:define-constant GLX_SLOW_CONFIG #x8001)

(alexandria:define-constant GLX_TRUE_COLOR #x8002)

(alexandria:define-constant GLX_DIRECT_COLOR #x8003)

(alexandria:define-constant GLX_PSEUDO_COLOR #x8004)

(alexandria:define-constant GLX_STATIC_COLOR #x8005)

(alexandria:define-constant GLX_GRAY_SCALE #x8006)

(alexandria:define-constant GLX_STATIC_GRAY #x8007)

(alexandria:define-constant GLX_TRANSPARENT_RGB #x8008)

(alexandria:define-constant GLX_TRANSPARENT_INDEX #x8009)

(alexandria:define-constant GLX_VISUAL_ID #x800B)

(alexandria:define-constant GLX_SCREEN #x800C)

(alexandria:define-constant GLX_NON_CONFORMANT_CONFIG #x800D)

(alexandria:define-constant GLX_DRAWABLE_TYPE #x8010)

(alexandria:define-constant GLX_RENDER_TYPE #x8011)

(alexandria:define-constant GLX_X_RENDERABLE #x8012)

(alexandria:define-constant GLX_FBCONFIG_ID #x8013)

(alexandria:define-constant GLX_RGBA_TYPE #x8014)

(alexandria:define-constant GLX_COLOR_INDEX_TYPE #x8015)

(alexandria:define-constant GLX_MAX_PBUFFER_WIDTH #x8016)

(alexandria:define-constant GLX_MAX_PBUFFER_HEIGHT #x8017)

(alexandria:define-constant GLX_MAX_PBUFFER_PIXELS #x8018)

(alexandria:define-constant GLX_PRESERVED_CONTENTS #x801B)

(alexandria:define-constant GLX_LARGEST_PBUFFER #x801C)

(alexandria:define-constant GLX_WIDTH #x801D)

(alexandria:define-constant GLX_HEIGHT #x801E)

(alexandria:define-constant GLX_EVENT_MASK #x801F)

(alexandria:define-constant GLX_DAMAGED #x8020)

(alexandria:define-constant GLX_SAVED #x8021)

(alexandria:define-constant GLX_WINDOW #x8022)

(alexandria:define-constant GLX_PBUFFER #x8023)

(alexandria:define-constant GLX_PBUFFER_HEIGHT #x8040)

(alexandria:define-constant GLX_PBUFFER_WIDTH #x8041)

(alexandria:define-constant GLX_RGBA_BIT #x1)

(alexandria:define-constant GLX_COLOR_INDEX_BIT #x2)

(alexandria:define-constant GLX_PBUFFER_CLOBBER_MASK #x8000000)

(alexandria:define-constant GLX_SAMPLE_BUFFERS #x186A0)

(alexandria:define-constant GLX_SAMPLES #x186A1)

(cffi:defcfun ("glXChooseVisual" glXChooseVisual) :pointer
  (dpy :pointer)
  (screen :int)
  (attribList :pointer))

(cffi:defcfun ("glXCreateContext" glXCreateContext) :pointer
  (dpy :pointer)
  (vis :pointer)
  (shareList :pointer)
  ;;(direct :pointer))
  (direct :unsigned-int))

(cffi:defcfun ("glXDestroyContext" glXDestroyContext) :void
  (dpy :pointer)
  (ctx :pointer))

(cffi:defcfun ("glXMakeCurrent" glXMakeCurrent) :pointer
  (dpy :pointer)
  (drawable :pointer)
  (ctx :pointer))

(cffi:defcfun ("glXCopyContext" glXCopyContext) :void
  (dpy :pointer)
  (src :pointer)
  (dst :pointer)
  (mask :unsigned-long))

(cffi:defcfun ("glXSwapBuffers" glXSwapBuffers) :void
  (dpy :pointer)
  (drawable :pointer))

(cffi:defcfun ("glXCreateGLXPixmap" glXCreateGLXPixmap) :pointer
  (dpy :pointer)
  (visual :pointer)
  (pixmap :pointer))

(cffi:defcfun ("glXDestroyGLXPixmap" glXDestroyGLXPixmap) :void
  (dpy :pointer)
  (pixmap :pointer))

(cffi:defcfun ("glXQueryExtension" glXQueryExtension) :pointer
  (dpy :pointer)
  (errorb :pointer)
  (event :pointer))

(cffi:defcfun ("glXQueryVersion" glXQueryVersion) :pointer
  (dpy :pointer)
  (maj :pointer)
  (min :pointer))

(cffi:defcfun ("glXIsDirect" glXIsDirect) :pointer
  (dpy :pointer)
  (ctx :pointer))

(cffi:defcfun ("glXGetConfig" glXGetConfig) :int
  (dpy :pointer)
  (visual :pointer)
  (attrib :int)
  (value :pointer))

(cffi:defcfun ("glXGetCurrentContext" glXGetCurrentContext) :pointer)

(cffi:defcfun ("glXGetCurrentDrawable" glXGetCurrentDrawable) :pointer)

(cffi:defcfun ("glXWaitGL" glXWaitGL) :void)

(cffi:defcfun ("glXWaitX" glXWaitX) :void)

(cffi:defcfun ("glXUseXFont" glXUseXFont) :void
  (font :pointer)
  (first :int)
  (count :int)
  (list :int))

(cffi:defcfun ("glXQueryExtensionsString" glXQueryExtensionsString) :string
  (dpy :pointer)
  (screen :int))

(cffi:defcfun ("glXQueryServerString" glXQueryServerString) :string
  (dpy :pointer)
  (screen :int)
  (name :int))

(cffi:defcfun ("glXGetClientString" glXGetClientString) :string
  (dpy :pointer)
  (name :int))

(cffi:defcfun ("glXGetCurrentDisplay" glXGetCurrentDisplay) :pointer)

(cffi:defcfun ("glXChooseFBConfig" glXChooseFBConfig) :pointer
  (dpy :pointer)
  (screen :int)
  (attribList :pointer)
  (nitems :pointer))

(cffi:defcfun ("glXGetFBConfigAttrib" glXGetFBConfigAttrib) :int
  (dpy :pointer)
  (config :pointer)
  (attribute :int)
  (value :pointer))

(cffi:defcfun ("glXGetFBConfigs" glXGetFBConfigs) :pointer
  (dpy :pointer)
  (screen :int)
  (nelements :pointer))

(cffi:defcfun ("glXGetVisualFromFBConfig" glXGetVisualFromFBConfig) :pointer
  (dpy :pointer)
  (config :pointer))

(cffi:defcfun ("glXCreateWindow" glXCreateWindow) :pointer
  (dpy :pointer)
  (config :pointer)
  (win :pointer)
  (attribList :pointer))

(cffi:defcfun ("glXDestroyWindow" glXDestroyWindow) :void
  (dpy :pointer)
  (window :pointer))

(cffi:defcfun ("glXCreatePixmap" glXCreatePixmap) :pointer
  (dpy :pointer)
  (config :pointer)
  (pixmap :pointer)
  (attribList :pointer))

(cffi:defcfun ("glXDestroyPixmap" glXDestroyPixmap) :void
  (dpy :pointer)
  (pixmap :pointer))

(cffi:defcfun ("glXCreatePbuffer" glXCreatePbuffer) :pointer
  (dpy :pointer)
  (config :pointer)
  (attribList :pointer))

(cffi:defcfun ("glXDestroyPbuffer" glXDestroyPbuffer) :void
  (dpy :pointer)
  (pbuf :pointer))

(cffi:defcfun ("glXQueryDrawable" glXQueryDrawable) :void
  (dpy :pointer)
  (draw :pointer)
  (attribute :int)
  (value :pointer))

(cffi:defcfun ("glXCreateNewContext" glXCreateNewContext) :pointer
  (dpy :pointer)
  (config :pointer)
  (renderType :int)
  (shareList :pointer)
  (direct :pointer))

(cffi:defcfun ("glXMakeContextCurrent" glXMakeContextCurrent) :pointer
  (dpy :pointer)
  (draw :pointer)
  (read :pointer)
  (ctx :pointer))

(cffi:defcfun ("glXGetCurrentReadDrawable" glXGetCurrentReadDrawable) :pointer)

(cffi:defcfun ("glXQueryContext" glXQueryContext) :int
  (dpy :pointer)
  (ctx :pointer)
  (attribute :int)
  (value :pointer))

(cffi:defcfun ("glXSelectEvent" glXSelectEvent) :void
  (dpy :pointer)
  (drawable :pointer)
  (mask :unsigned-long))

(cffi:defcfun ("glXGetSelectedEvent" glXGetSelectedEvent) :void
  (dpy :pointer)
  (drawable :pointer)
  (mask :pointer))

(cffi:defcfun ("glXGetProcAddress" glXGetProcAddress) :pointer
  (procname :pointer))

(cffi:defcfun ("glXAllocateMemoryNV" glXAllocateMemoryNV) :pointer
  (size :pointer)
  (readfreq :pointer)
  (writefreq :pointer)
  (priority :pointer))

(cffi:defcfun ("glXFreeMemoryNV" glXFreeMemoryNV) :void
  (pointer :pointer))

(alexandria:define-constant GLX_MESA_allocate_memory 1)

(cffi:defcfun ("glXAllocateMemoryMESA" glXAllocateMemoryMESA) :pointer
  (dpy :pointer)
  (scrn :int)
  (size :pointer)
  (readfreq :float)
  (writefreq :float)
  (priority :float))

(cffi:defcfun ("glXFreeMemoryMESA" glXFreeMemoryMESA) :void
  (dpy :pointer)
  (scrn :int)
  (pointer :pointer))

(cffi:defcfun ("glXGetMemoryOffsetMESA" glXGetMemoryOffsetMESA) :pointer
  (dpy :pointer)
  (scrn :int)
  (pointer :pointer))

(alexandria:define-constant GLX_ARB_render_texture 1)

(cffi:defcfun ("glXBindTexImageARB" glXBindTexImageARB) :pointer
  (dpy :pointer)
  (pbuffer :pointer)
  (buffer :int))

(cffi:defcfun ("glXReleaseTexImageARB" glXReleaseTexImageARB) :pointer
  (dpy :pointer)
  (pbuffer :pointer)
  (buffer :int))

(cffi:defcfun ("glXDrawableAttribARB" glXDrawableAttribARB) :pointer
  (dpy :pointer)
  (draw :pointer)
  (attribList :pointer))

(alexandria:define-constant GLX_NV_float_buffer 1)

(alexandria:define-constant GLX_FLOAT_COMPONENTS_NV #x20B0)

(alexandria:define-constant GLX_MESA_swap_frame_usage 1)

(cffi:defcfun ("glXGetFrameUsageMESA" glXGetFrameUsageMESA) :pointer
  (dpy :pointer)
  (drawable :pointer)
  (usage :pointer))

(cffi:defcfun ("glXBeginFrameTrackingMESA" glXBeginFrameTrackingMESA) :pointer
  (dpy :pointer)
  (drawable :pointer))

(cffi:defcfun ("glXEndFrameTrackingMESA" glXEndFrameTrackingMESA) :pointer
  (dpy :pointer)
  (drawable :pointer))

(cffi:defcfun ("glXQueryFrameTrackingMESA" glXQueryFrameTrackingMESA) :pointer
  (dpy :pointer)
  (drawable :pointer)
  (swapCount :pointer)
  (missedFrames :pointer)
  (lastMissedUsage :pointer))

(alexandria:define-constant GLX_MESA_swap_control 1)

(cffi:defcfun ("glXSwapIntervalMESA" glXSwapIntervalMESA) :int
  (interval :unsigned-int))

(cffi:defcfun ("glXGetSwapIntervalMESA" glXGetSwapIntervalMESA) :int)

(alexandria:define-constant GLX_EXT_texture_from_pixmap 1)

(alexandria:define-constant GLX_BIND_TO_TEXTURE_RGB_EXT #x20D0)

(alexandria:define-constant GLX_BIND_TO_TEXTURE_RGBA_EXT #x20D1)

(alexandria:define-constant GLX_BIND_TO_MIPMAP_TEXTURE_EXT #x20D2)

(alexandria:define-constant GLX_BIND_TO_TEXTURE_TARGETS_EXT #x20D3)

(alexandria:define-constant GLX_Y_INVERTED_EXT #x20D4)

(alexandria:define-constant GLX_TEXTURE_FORMAT_EXT #x20D5)

(alexandria:define-constant GLX_TEXTURE_TARGET_EXT #x20D6)

(alexandria:define-constant GLX_MIPMAP_TEXTURE_EXT #x20D7)

(alexandria:define-constant GLX_TEXTURE_FORMAT_NONE_EXT #x20D8)

(alexandria:define-constant GLX_TEXTURE_FORMAT_RGB_EXT #x20D9)

(alexandria:define-constant GLX_TEXTURE_FORMAT_RGBA_EXT #x20DA)

(alexandria:define-constant GLX_TEXTURE_1D_BIT_EXT #x1)

(alexandria:define-constant GLX_TEXTURE_2D_BIT_EXT #x2)

(alexandria:define-constant GLX_TEXTURE_RECTANGLE_BIT_EXT #x4)

(alexandria:define-constant GLX_TEXTURE_1D_EXT #x20DB)

(alexandria:define-constant GLX_TEXTURE_2D_EXT #x20DC)

(alexandria:define-constant GLX_TEXTURE_RECTANGLE_EXT #x20DD)

(alexandria:define-constant GLX_FRONT_LEFT_EXT #x20DE)

(alexandria:define-constant GLX_FRONT_RIGHT_EXT #x20DF)

(alexandria:define-constant GLX_BACK_LEFT_EXT #x20E0)

(alexandria:define-constant GLX_BACK_RIGHT_EXT #x20E1)

(alexandria:define-constant GLX_FRONT_EXT GLX_FRONT_LEFT_EXT)

(alexandria:define-constant GLX_BACK_EXT GLX_BACK_LEFT_EXT)

(alexandria:define-constant GLX_AUX0_EXT #x20E2)

(alexandria:define-constant GLX_AUX1_EXT #x20E3)

(alexandria:define-constant GLX_AUX2_EXT #x20E4)

(alexandria:define-constant GLX_AUX3_EXT #x20E5)

(alexandria:define-constant GLX_AUX4_EXT #x20E6)

(alexandria:define-constant GLX_AUX5_EXT #x20E7)

(alexandria:define-constant GLX_AUX6_EXT #x20E8)

(alexandria:define-constant GLX_AUX7_EXT #x20E9)

(alexandria:define-constant GLX_AUX8_EXT #x20EA)

(alexandria:define-constant GLX_AUX9_EXT #x20EB)

(cffi:defcfun ("glXBindTexImageEXT" glXBindTexImageEXT) :void
  (dpy :pointer)
  (drawable :pointer)
  (buffer :int)
  (attrib_list :pointer))

(cffi:defcfun ("glXReleaseTexImageEXT" glXReleaseTexImageEXT) :void
  (dpy :pointer)
  (drawable :pointer)
  (buffer :int))

(cffi:defcstruct GLXPbufferClobberEvent
	(event_type :int)
	(draw_type :int)
	(serial :unsigned-long)
	(send_event :pointer)
	(display :pointer)
	(drawable :pointer)
	(buffer_mask :unsigned-int)
	(aux_buffer :unsigned-int)
	(x :int)
	(y :int)
	(width :int)
	(height :int)
	(count :int))

(cffi:defcunion GLXEvent
	(glxpbufferclobber GLXPbufferClobberEvent)
	(pad :pointer))

;;================================
;; from glint.h
;; $ swig -cffi -module x11 -o x11.lisp /usr/X11/include/GL/glxint.h
;;================================
(cffi:defcstruct __GLXvisualConfigRec
	(vid :pointer)
	(class :int)
	(rgba :pointer)
	(redSize :int)
	(greenSize :int)
	(blueSize :int)
	(alphaSize :int)
	(redMask :unsigned-long)
	(greenMask :unsigned-long)
	(blueMask :unsigned-long)
	(alphaMask :unsigned-long)
	(accumRedSize :int)
	(accumGreenSize :int)
	(accumBlueSize :int)
	(accumAlphaSize :int)
	(doubleBuffer :pointer)
	(stereo :pointer)
	(bufferSize :int)
	(depthSize :int)
	(stencilSize :int)
	(auxBuffers :int)
	(level :int)
	(visualRating :int)
	(transparentPixel :int)
	(transparentRed :int)
	(transparentGreen :int)
	(transparentBlue :int)
	(transparentAlpha :int)
	(transparentIndex :int)
	(multiSampleSize :int)
	(nMultiSampleBuffers :int)
	(visualSelectGroup :int))

(alexandria:define-constant __GLX_MIN_CONFIG_PROPS 18)

(alexandria:define-constant __GLX_MAX_CONFIG_PROPS 500)

(alexandria:define-constant __GLX_EXT_CONFIG_PROPS 10)

(alexandria:define-constant __GLX_TOTAL_CONFIG (cl:* (cl:+ 18 2) 10))

(cffi:defcstruct __GLXFBConfigRec
	(visualType :int)
	(transparentType :int)
	(transparentRed :int)
	(transparentGreen :int)
	(transparentBlue :int)
	(transparentAlpha :int)
	(transparentIndex :int)
	(visualCaveat :int)
	(associatedVisualId :int)
	(screen :int)
	(drawableType :int)
	(renderType :int)
	(maxPbufferWidth :int)
	(maxPbufferHeight :int)
	(maxPbufferPixels :int)
	(optimalPbufferWidth :int)
	(optimalPbufferHeight :int)
	(visualSelectGroup :int)
	(id :unsigned-int)
	(rgbMode :pointer)
	(colorIndexMode :pointer)
	(doubleBufferMode :pointer)
	(stereoMode :pointer)
	(haveAccumBuffer :pointer)
	(haveDepthBuffer :pointer)
	(haveStencilBuffer :pointer)
	(accumRedBits :pointer)
	(accumGreenBits :pointer)
	(accumBlueBits :pointer)
	(accumAlphaBits :pointer)
	(depthBits :pointer)
	(stencilBits :pointer)
	(indexBits :pointer)
	(redBits :pointer)
	(greenBits :pointer)
	(blueBits :pointer)
	(alphaBits :pointer)
	(redMask :pointer)
	(greenMask :pointer)
	(blueMask :pointer)
	(alphaMask :pointer)
	(multiSampleSize :pointer)
	(nMultiSampleBuffers :pointer)
	(maxAuxBuffers :pointer)
	(level :pointer)
	(extendedRange :pointer)
	(minRed :pointer)
	(maxRed :pointer)
	(minGreen :pointer)
	(maxGreen :pointer)
	(minBlue :pointer)
	(maxBlue :pointer)
	(minAlpha :pointer)
	(maxAlpha :pointer))

(alexandria:define-constant __GLX_TOTAL_FBCONFIG_PROPS 35)


;;================================
;; from gl.h
;; $ swig -cffi -module x11 -o x11.lisp /System/Library/Frameworks/OpenGL.framework/Headers/gl.h
;;================================
(alexandria:define-constant GL_VERSION_1_1 1)

(alexandria:define-constant GL_VERSION_1_2 1)

(alexandria:define-constant GL_VERSION_1_3 1)

(alexandria:define-constant GL_VERSION_1_4 1)

(alexandria:define-constant GL_VERSION_1_5 1)

(alexandria:define-constant GL_VERSION_2_0 1)

(alexandria:define-constant GL_VERSION_2_1 1)

(alexandria:define-constant GL_ACCUM #x0100)

(alexandria:define-constant GL_LOAD #x0101)

(alexandria:define-constant GL_RETURN #x0102)

(alexandria:define-constant GL_MULT #x0103)

(alexandria:define-constant GL_ADD #x0104)

(alexandria:define-constant GL_NEVER #x0200)

(alexandria:define-constant GL_LESS #x0201)

(alexandria:define-constant GL_EQUAL #x0202)

(alexandria:define-constant GL_LEQUAL #x0203)

(alexandria:define-constant GL_GREATER #x0204)

(alexandria:define-constant GL_NOTEQUAL #x0205)

(alexandria:define-constant GL_GEQUAL #x0206)

(alexandria:define-constant GL_ALWAYS #x0207)

(alexandria:define-constant GL_CURRENT_BIT #x00000001)

(alexandria:define-constant GL_POINT_BIT #x00000002)

(alexandria:define-constant GL_LINE_BIT #x00000004)

(alexandria:define-constant GL_POLYGON_BIT #x00000008)

(alexandria:define-constant GL_POLYGON_STIPPLE_BIT #x00000010)

(alexandria:define-constant GL_PIXEL_MODE_BIT #x00000020)

(alexandria:define-constant GL_LIGHTING_BIT #x00000040)

(alexandria:define-constant GL_FOG_BIT #x00000080)

(alexandria:define-constant GL_DEPTH_BUFFER_BIT #x00000100)

(alexandria:define-constant GL_ACCUM_BUFFER_BIT #x00000200)

(alexandria:define-constant GL_STENCIL_BUFFER_BIT #x00000400)

(alexandria:define-constant GL_VIEWPORT_BIT #x00000800)

(alexandria:define-constant GL_TRANSFORM_BIT #x00001000)

(alexandria:define-constant GL_ENABLE_BIT #x00002000)

(alexandria:define-constant GL_COLOR_BUFFER_BIT #x00004000)

(alexandria:define-constant GL_HINT_BIT #x00008000)

(alexandria:define-constant GL_EVAL_BIT #x00010000)

(alexandria:define-constant GL_LIST_BIT #x00020000)

(alexandria:define-constant GL_TEXTURE_BIT #x00040000)

(alexandria:define-constant GL_SCISSOR_BIT #x00080000)

(alexandria:define-constant GL_ALL_ATTRIB_BITS #x000fffff)

(alexandria:define-constant GL_POINTS #x0000)

(alexandria:define-constant GL_LINES #x0001)

(alexandria:define-constant GL_LINE_LOOP #x0002)

(alexandria:define-constant GL_LINE_STRIP #x0003)

(alexandria:define-constant GL_TRIANGLES #x0004)

(alexandria:define-constant GL_TRIANGLE_STRIP #x0005)

(alexandria:define-constant GL_TRIANGLE_FAN #x0006)

(alexandria:define-constant GL_QUADS #x0007)

(alexandria:define-constant GL_QUAD_STRIP #x0008)

(alexandria:define-constant GL_POLYGON #x0009)

(alexandria:define-constant GL_ZERO 0)

(alexandria:define-constant GL_ONE 1)

(alexandria:define-constant GL_SRC_COLOR #x0300)

(alexandria:define-constant GL_ONE_MINUS_SRC_COLOR #x0301)

(alexandria:define-constant GL_SRC_ALPHA #x0302)

(alexandria:define-constant GL_ONE_MINUS_SRC_ALPHA #x0303)

(alexandria:define-constant GL_DST_ALPHA #x0304)

(alexandria:define-constant GL_ONE_MINUS_DST_ALPHA #x0305)

(alexandria:define-constant GL_DST_COLOR #x0306)

(alexandria:define-constant GL_ONE_MINUS_DST_COLOR #x0307)

(alexandria:define-constant GL_SRC_ALPHA_SATURATE #x0308)

(alexandria:define-constant GL_TRUE 1)

(alexandria:define-constant GL_FALSE 0)

(alexandria:define-constant GL_CLIP_PLANE0 #x3000)

(alexandria:define-constant GL_CLIP_PLANE1 #x3001)

(alexandria:define-constant GL_CLIP_PLANE2 #x3002)

(alexandria:define-constant GL_CLIP_PLANE3 #x3003)

(alexandria:define-constant GL_CLIP_PLANE4 #x3004)

(alexandria:define-constant GL_CLIP_PLANE5 #x3005)

(alexandria:define-constant GL_BYTE #x1400)

(alexandria:define-constant GL_UNSIGNED_BYTE #x1401)

(alexandria:define-constant GL_SHORT #x1402)

(alexandria:define-constant GL_UNSIGNED_SHORT #x1403)

(alexandria:define-constant GL_INT #x1404)

(alexandria:define-constant GL_UNSIGNED_INT #x1405)

(alexandria:define-constant GL_FLOAT #x1406)

(alexandria:define-constant GL_2_BYTES #x1407)

(alexandria:define-constant GL_3_BYTES #x1408)

(alexandria:define-constant GL_4_BYTES #x1409)

(alexandria:define-constant GL_DOUBLE #x140A)

(alexandria:define-constant GL_NONE 0)

(alexandria:define-constant GL_FRONT_LEFT #x0400)

(alexandria:define-constant GL_FRONT_RIGHT #x0401)

(alexandria:define-constant GL_BACK_LEFT #x0402)

(alexandria:define-constant GL_BACK_RIGHT #x0403)

(alexandria:define-constant GL_FRONT #x0404)

(alexandria:define-constant GL_BACK #x0405)

(alexandria:define-constant GL_LEFT #x0406)

(alexandria:define-constant GL_RIGHT #x0407)

(alexandria:define-constant GL_FRONT_AND_BACK #x0408)

(alexandria:define-constant GL_AUX0 #x0409)

(alexandria:define-constant GL_AUX1 #x040A)

(alexandria:define-constant GL_AUX2 #x040B)

(alexandria:define-constant GL_AUX3 #x040C)

(alexandria:define-constant GL_NO_ERROR 0)

(alexandria:define-constant GL_INVALID_ENUM #x0500)

(alexandria:define-constant GL_INVALID_VALUE #x0501)

(alexandria:define-constant GL_INVALID_OPERATION #x0502)

(alexandria:define-constant GL_STACK_OVERFLOW #x0503)

(alexandria:define-constant GL_STACK_UNDERFLOW #x0504)

(alexandria:define-constant GL_OUT_OF_MEMORY #x0505)

(alexandria:define-constant GL_2D #x0600)

(alexandria:define-constant GL_3D #x0601)

(alexandria:define-constant GL_3D_COLOR #x0602)

(alexandria:define-constant GL_3D_COLOR_TEXTURE #x0603)

(alexandria:define-constant GL_4D_COLOR_TEXTURE #x0604)

(alexandria:define-constant GL_PASS_THROUGH_TOKEN #x0700)

(alexandria:define-constant GL_POINT_TOKEN #x0701)

(alexandria:define-constant GL_LINE_TOKEN #x0702)

(alexandria:define-constant GL_POLYGON_TOKEN #x0703)

(alexandria:define-constant GL_BITMAP_TOKEN #x0704)

(alexandria:define-constant GL_DRAW_PIXEL_TOKEN #x0705)

(alexandria:define-constant GL_COPY_PIXEL_TOKEN #x0706)

(alexandria:define-constant GL_LINE_RESET_TOKEN #x0707)

(alexandria:define-constant GL_EXP #x0800)

(alexandria:define-constant GL_EXP2 #x0801)

(alexandria:define-constant GL_CW #x0900)

(alexandria:define-constant GL_CCW #x0901)

(alexandria:define-constant GL_COEFF #x0A00)

(alexandria:define-constant GL_ORDER #x0A01)

(alexandria:define-constant GL_DOMAIN #x0A02)

(alexandria:define-constant GL_CURRENT_COLOR #x0B00)

(alexandria:define-constant GL_CURRENT_INDEX #x0B01)

(alexandria:define-constant GL_CURRENT_NORMAL #x0B02)

(alexandria:define-constant GL_CURRENT_TEXTURE_COORDS #x0B03)

(alexandria:define-constant GL_CURRENT_RASTER_COLOR #x0B04)

(alexandria:define-constant GL_CURRENT_RASTER_INDEX #x0B05)

(alexandria:define-constant GL_CURRENT_RASTER_TEXTURE_COORDS #x0B06)

(alexandria:define-constant GL_CURRENT_RASTER_POSITION #x0B07)

(alexandria:define-constant GL_CURRENT_RASTER_POSITION_VALID #x0B08)

(alexandria:define-constant GL_CURRENT_RASTER_DISTANCE #x0B09)

(alexandria:define-constant GL_POINT_SMOOTH #x0B10)

(alexandria:define-constant GL_POINT_SIZE #x0B11)

(alexandria:define-constant GL_POINT_SIZE_RANGE #x0B12)

(alexandria:define-constant GL_POINT_SIZE_GRANULARITY #x0B13)

(alexandria:define-constant GL_LINE_SMOOTH #x0B20)

(alexandria:define-constant GL_LINE_WIDTH #x0B21)

(alexandria:define-constant GL_LINE_WIDTH_RANGE #x0B22)

(alexandria:define-constant GL_LINE_WIDTH_GRANULARITY #x0B23)

(alexandria:define-constant GL_LINE_STIPPLE #x0B24)

(alexandria:define-constant GL_LINE_STIPPLE_PATTERN #x0B25)

(alexandria:define-constant GL_LINE_STIPPLE_REPEAT #x0B26)

(alexandria:define-constant GL_LIST_MODE #x0B30)

(alexandria:define-constant GL_MAX_LIST_NESTING #x0B31)

(alexandria:define-constant GL_LIST_BASE #x0B32)

(alexandria:define-constant GL_LIST_INDEX #x0B33)

(alexandria:define-constant GL_POLYGON_MODE #x0B40)

(alexandria:define-constant GL_POLYGON_SMOOTH #x0B41)

(alexandria:define-constant GL_POLYGON_STIPPLE #x0B42)

(alexandria:define-constant GL_EDGE_FLAG #x0B43)

(alexandria:define-constant GL_CULL_FACE #x0B44)

(alexandria:define-constant GL_CULL_FACE_MODE #x0B45)

(alexandria:define-constant GL_FRONT_FACE #x0B46)

(alexandria:define-constant GL_LIGHTING #x0B50)

(alexandria:define-constant GL_LIGHT_MODEL_LOCAL_VIEWER #x0B51)

(alexandria:define-constant GL_LIGHT_MODEL_TWO_SIDE #x0B52)

(alexandria:define-constant GL_LIGHT_MODEL_AMBIENT #x0B53)

(alexandria:define-constant GL_SHADE_MODEL #x0B54)

(alexandria:define-constant GL_COLOR_MATERIAL_FACE #x0B55)

(alexandria:define-constant GL_COLOR_MATERIAL_PARAMETER #x0B56)

(alexandria:define-constant GL_COLOR_MATERIAL #x0B57)

(alexandria:define-constant GL_FOG #x0B60)

(alexandria:define-constant GL_FOG_INDEX #x0B61)

(alexandria:define-constant GL_FOG_DENSITY #x0B62)

(alexandria:define-constant GL_FOG_START #x0B63)

(alexandria:define-constant GL_FOG_END #x0B64)

(alexandria:define-constant GL_FOG_MODE #x0B65)

(alexandria:define-constant GL_FOG_COLOR #x0B66)

(alexandria:define-constant GL_DEPTH_RANGE #x0B70)

(alexandria:define-constant GL_DEPTH_TEST #x0B71)

(alexandria:define-constant GL_DEPTH_WRITEMASK #x0B72)

(alexandria:define-constant GL_DEPTH_CLEAR_VALUE #x0B73)

(alexandria:define-constant GL_DEPTH_FUNC #x0B74)

(alexandria:define-constant GL_ACCUM_CLEAR_VALUE #x0B80)

(alexandria:define-constant GL_STENCIL_TEST #x0B90)

(alexandria:define-constant GL_STENCIL_CLEAR_VALUE #x0B91)

(alexandria:define-constant GL_STENCIL_FUNC #x0B92)

(alexandria:define-constant GL_STENCIL_VALUE_MASK #x0B93)

(alexandria:define-constant GL_STENCIL_FAIL #x0B94)

(alexandria:define-constant GL_STENCIL_PASS_DEPTH_FAIL #x0B95)

(alexandria:define-constant GL_STENCIL_PASS_DEPTH_PASS #x0B96)

(alexandria:define-constant GL_STENCIL_REF #x0B97)

(alexandria:define-constant GL_STENCIL_WRITEMASK #x0B98)

(alexandria:define-constant GL_MATRIX_MODE #x0BA0)

(alexandria:define-constant GL_NORMALIZE #x0BA1)

(alexandria:define-constant GL_VIEWPORT #x0BA2)

(alexandria:define-constant GL_MODELVIEW_STACK_DEPTH #x0BA3)

(alexandria:define-constant GL_PROJECTION_STACK_DEPTH #x0BA4)

(alexandria:define-constant GL_TEXTURE_STACK_DEPTH #x0BA5)

(alexandria:define-constant GL_MODELVIEW_MATRIX #x0BA6)

(alexandria:define-constant GL_PROJECTION_MATRIX #x0BA7)

(alexandria:define-constant GL_TEXTURE_MATRIX #x0BA8)

(alexandria:define-constant GL_ATTRIB_STACK_DEPTH #x0BB0)

(alexandria:define-constant GL_CLIENT_ATTRIB_STACK_DEPTH #x0BB1)

(alexandria:define-constant GL_ALPHA_TEST #x0BC0)

(alexandria:define-constant GL_ALPHA_TEST_FUNC #x0BC1)

(alexandria:define-constant GL_ALPHA_TEST_REF #x0BC2)

(alexandria:define-constant GL_DITHER #x0BD0)

(alexandria:define-constant GL_BLEND_DST #x0BE0)

(alexandria:define-constant GL_BLEND_SRC #x0BE1)

(alexandria:define-constant GL_BLEND #x0BE2)

(alexandria:define-constant GL_LOGIC_OP_MODE #x0BF0)

(alexandria:define-constant GL_INDEX_LOGIC_OP #x0BF1)

(alexandria:define-constant GL_COLOR_LOGIC_OP #x0BF2)

(alexandria:define-constant GL_AUX_BUFFERS #x0C00)

(alexandria:define-constant GL_DRAW_BUFFER #x0C01)

(alexandria:define-constant GL_READ_BUFFER #x0C02)

(alexandria:define-constant GL_SCISSOR_BOX #x0C10)

(alexandria:define-constant GL_SCISSOR_TEST #x0C11)

(alexandria:define-constant GL_INDEX_CLEAR_VALUE #x0C20)

(alexandria:define-constant GL_INDEX_WRITEMASK #x0C21)

(alexandria:define-constant GL_COLOR_CLEAR_VALUE #x0C22)

(alexandria:define-constant GL_COLOR_WRITEMASK #x0C23)

(alexandria:define-constant GL_INDEX_MODE #x0C30)

(alexandria:define-constant GL_RGBA_MODE #x0C31)

(alexandria:define-constant GL_DOUBLEBUFFER #x0C32)

(alexandria:define-constant GL_STEREO #x0C33)

(alexandria:define-constant GL_RENDER_MODE #x0C40)

(alexandria:define-constant GL_PERSPECTIVE_CORRECTION_HINT #x0C50)

(alexandria:define-constant GL_POINT_SMOOTH_HINT #x0C51)

(alexandria:define-constant GL_LINE_SMOOTH_HINT #x0C52)

(alexandria:define-constant GL_POLYGON_SMOOTH_HINT #x0C53)

(alexandria:define-constant GL_FOG_HINT #x0C54)

(alexandria:define-constant GL_TEXTURE_GEN_S #x0C60)

(alexandria:define-constant GL_TEXTURE_GEN_T #x0C61)

(alexandria:define-constant GL_TEXTURE_GEN_R #x0C62)

(alexandria:define-constant GL_TEXTURE_GEN_Q #x0C63)

(alexandria:define-constant GL_PIXEL_MAP_I_TO_I #x0C70)

(alexandria:define-constant GL_PIXEL_MAP_S_TO_S #x0C71)

(alexandria:define-constant GL_PIXEL_MAP_I_TO_R #x0C72)

(alexandria:define-constant GL_PIXEL_MAP_I_TO_G #x0C73)

(alexandria:define-constant GL_PIXEL_MAP_I_TO_B #x0C74)

(alexandria:define-constant GL_PIXEL_MAP_I_TO_A #x0C75)

(alexandria:define-constant GL_PIXEL_MAP_R_TO_R #x0C76)

(alexandria:define-constant GL_PIXEL_MAP_G_TO_G #x0C77)

(alexandria:define-constant GL_PIXEL_MAP_B_TO_B #x0C78)

(alexandria:define-constant GL_PIXEL_MAP_A_TO_A #x0C79)

(alexandria:define-constant GL_PIXEL_MAP_I_TO_I_SIZE #x0CB0)

(alexandria:define-constant GL_PIXEL_MAP_S_TO_S_SIZE #x0CB1)

(alexandria:define-constant GL_PIXEL_MAP_I_TO_R_SIZE #x0CB2)

(alexandria:define-constant GL_PIXEL_MAP_I_TO_G_SIZE #x0CB3)

(alexandria:define-constant GL_PIXEL_MAP_I_TO_B_SIZE #x0CB4)

(alexandria:define-constant GL_PIXEL_MAP_I_TO_A_SIZE #x0CB5)

(alexandria:define-constant GL_PIXEL_MAP_R_TO_R_SIZE #x0CB6)

(alexandria:define-constant GL_PIXEL_MAP_G_TO_G_SIZE #x0CB7)

(alexandria:define-constant GL_PIXEL_MAP_B_TO_B_SIZE #x0CB8)

(alexandria:define-constant GL_PIXEL_MAP_A_TO_A_SIZE #x0CB9)

(alexandria:define-constant GL_UNPACK_SWAP_BYTES #x0CF0)

(alexandria:define-constant GL_UNPACK_LSB_FIRST #x0CF1)

(alexandria:define-constant GL_UNPACK_ROW_LENGTH #x0CF2)

(alexandria:define-constant GL_UNPACK_SKIP_ROWS #x0CF3)

(alexandria:define-constant GL_UNPACK_SKIP_PIXELS #x0CF4)

(alexandria:define-constant GL_UNPACK_ALIGNMENT #x0CF5)

(alexandria:define-constant GL_PACK_SWAP_BYTES #x0D00)

(alexandria:define-constant GL_PACK_LSB_FIRST #x0D01)

(alexandria:define-constant GL_PACK_ROW_LENGTH #x0D02)

(alexandria:define-constant GL_PACK_SKIP_ROWS #x0D03)

(alexandria:define-constant GL_PACK_SKIP_PIXELS #x0D04)

(alexandria:define-constant GL_PACK_ALIGNMENT #x0D05)

(alexandria:define-constant GL_MAP_COLOR #x0D10)

(alexandria:define-constant GL_MAP_STENCIL #x0D11)

(alexandria:define-constant GL_INDEX_SHIFT #x0D12)

(alexandria:define-constant GL_INDEX_OFFSET #x0D13)

(alexandria:define-constant GL_RED_SCALE #x0D14)

(alexandria:define-constant GL_RED_BIAS #x0D15)

(alexandria:define-constant GL_ZOOM_X #x0D16)

(alexandria:define-constant GL_ZOOM_Y #x0D17)

(alexandria:define-constant GL_GREEN_SCALE #x0D18)

(alexandria:define-constant GL_GREEN_BIAS #x0D19)

(alexandria:define-constant GL_BLUE_SCALE #x0D1A)

(alexandria:define-constant GL_BLUE_BIAS #x0D1B)

(alexandria:define-constant GL_ALPHA_SCALE #x0D1C)

(alexandria:define-constant GL_ALPHA_BIAS #x0D1D)

(alexandria:define-constant GL_DEPTH_SCALE #x0D1E)

(alexandria:define-constant GL_DEPTH_BIAS #x0D1F)

(alexandria:define-constant GL_MAX_EVAL_ORDER #x0D30)

(alexandria:define-constant GL_MAX_LIGHTS #x0D31)

(alexandria:define-constant GL_MAX_CLIP_PLANES #x0D32)

(alexandria:define-constant GL_MAX_TEXTURE_SIZE #x0D33)

(alexandria:define-constant GL_MAX_PIXEL_MAP_TABLE #x0D34)

(alexandria:define-constant GL_MAX_ATTRIB_STACK_DEPTH #x0D35)

(alexandria:define-constant GL_MAX_MODELVIEW_STACK_DEPTH #x0D36)

(alexandria:define-constant GL_MAX_NAME_STACK_DEPTH #x0D37)

(alexandria:define-constant GL_MAX_PROJECTION_STACK_DEPTH #x0D38)

(alexandria:define-constant GL_MAX_TEXTURE_STACK_DEPTH #x0D39)

(alexandria:define-constant GL_MAX_VIEWPORT_DIMS #x0D3A)

(alexandria:define-constant GL_MAX_CLIENT_ATTRIB_STACK_DEPTH #x0D3B)

(alexandria:define-constant GL_SUBPIXEL_BITS #x0D50)

(alexandria:define-constant GL_INDEX_BITS #x0D51)

(alexandria:define-constant GL_RED_BITS #x0D52)

(alexandria:define-constant GL_GREEN_BITS #x0D53)

(alexandria:define-constant GL_BLUE_BITS #x0D54)

(alexandria:define-constant GL_ALPHA_BITS #x0D55)

(alexandria:define-constant GL_DEPTH_BITS #x0D56)

(alexandria:define-constant GL_STENCIL_BITS #x0D57)

(alexandria:define-constant GL_ACCUM_RED_BITS #x0D58)

(alexandria:define-constant GL_ACCUM_GREEN_BITS #x0D59)

(alexandria:define-constant GL_ACCUM_BLUE_BITS #x0D5A)

(alexandria:define-constant GL_ACCUM_ALPHA_BITS #x0D5B)

(alexandria:define-constant GL_NAME_STACK_DEPTH #x0D70)

(alexandria:define-constant GL_AUTO_NORMAL #x0D80)

(alexandria:define-constant GL_MAP1_COLOR_4 #x0D90)

(alexandria:define-constant GL_MAP1_INDEX #x0D91)

(alexandria:define-constant GL_MAP1_NORMAL #x0D92)

(alexandria:define-constant GL_MAP1_TEXTURE_COORD_1 #x0D93)

(alexandria:define-constant GL_MAP1_TEXTURE_COORD_2 #x0D94)

(alexandria:define-constant GL_MAP1_TEXTURE_COORD_3 #x0D95)

(alexandria:define-constant GL_MAP1_TEXTURE_COORD_4 #x0D96)

(alexandria:define-constant GL_MAP1_VERTEX_3 #x0D97)

(alexandria:define-constant GL_MAP1_VERTEX_4 #x0D98)

(alexandria:define-constant GL_MAP2_COLOR_4 #x0DB0)

(alexandria:define-constant GL_MAP2_INDEX #x0DB1)

(alexandria:define-constant GL_MAP2_NORMAL #x0DB2)

(alexandria:define-constant GL_MAP2_TEXTURE_COORD_1 #x0DB3)

(alexandria:define-constant GL_MAP2_TEXTURE_COORD_2 #x0DB4)

(alexandria:define-constant GL_MAP2_TEXTURE_COORD_3 #x0DB5)

(alexandria:define-constant GL_MAP2_TEXTURE_COORD_4 #x0DB6)

(alexandria:define-constant GL_MAP2_VERTEX_3 #x0DB7)

(alexandria:define-constant GL_MAP2_VERTEX_4 #x0DB8)

(alexandria:define-constant GL_MAP1_GRID_DOMAIN #x0DD0)

(alexandria:define-constant GL_MAP1_GRID_SEGMENTS #x0DD1)

(alexandria:define-constant GL_MAP2_GRID_DOMAIN #x0DD2)

(alexandria:define-constant GL_MAP2_GRID_SEGMENTS #x0DD3)

(alexandria:define-constant GL_TEXTURE_1D #x0DE0)

(alexandria:define-constant GL_TEXTURE_2D #x0DE1)

(alexandria:define-constant GL_FEEDBACK_BUFFER_POINTER #x0DF0)

(alexandria:define-constant GL_FEEDBACK_BUFFER_SIZE #x0DF1)

(alexandria:define-constant GL_FEEDBACK_BUFFER_TYPE #x0DF2)

(alexandria:define-constant GL_SELECTION_BUFFER_POINTER #x0DF3)

(alexandria:define-constant GL_SELECTION_BUFFER_SIZE #x0DF4)

(alexandria:define-constant GL_TEXTURE_WIDTH #x1000)

(alexandria:define-constant GL_TEXTURE_HEIGHT #x1001)

(alexandria:define-constant GL_TEXTURE_INTERNAL_FORMAT #x1003)

(alexandria:define-constant GL_TEXTURE_BORDER_COLOR #x1004)

(alexandria:define-constant GL_TEXTURE_BORDER #x1005)

(alexandria:define-constant GL_DONT_CARE #x1100)

(alexandria:define-constant GL_FASTEST #x1101)

(alexandria:define-constant GL_NICEST #x1102)

(alexandria:define-constant GL_LIGHT0 #x4000)

(alexandria:define-constant GL_LIGHT1 #x4001)

(alexandria:define-constant GL_LIGHT2 #x4002)

(alexandria:define-constant GL_LIGHT3 #x4003)

(alexandria:define-constant GL_LIGHT4 #x4004)

(alexandria:define-constant GL_LIGHT5 #x4005)

(alexandria:define-constant GL_LIGHT6 #x4006)

(alexandria:define-constant GL_LIGHT7 #x4007)

(alexandria:define-constant GL_AMBIENT #x1200)

(alexandria:define-constant GL_DIFFUSE #x1201)

(alexandria:define-constant GL_SPECULAR #x1202)

(alexandria:define-constant GL_POSITION #x1203)

(alexandria:define-constant GL_SPOT_DIRECTION #x1204)

(alexandria:define-constant GL_SPOT_EXPONENT #x1205)

(alexandria:define-constant GL_SPOT_CUTOFF #x1206)

(alexandria:define-constant GL_CONSTANT_ATTENUATION #x1207)

(alexandria:define-constant GL_LINEAR_ATTENUATION #x1208)

(alexandria:define-constant GL_QUADRATIC_ATTENUATION #x1209)

(alexandria:define-constant GL_COMPILE #x1300)

(alexandria:define-constant GL_COMPILE_AND_EXECUTE #x1301)

(alexandria:define-constant GL_CLEAR #x1500)

(alexandria:define-constant GL_AND #x1501)

(alexandria:define-constant GL_AND_REVERSE #x1502)

(alexandria:define-constant GL_COPY #x1503)

(alexandria:define-constant GL_AND_INVERTED #x1504)

(alexandria:define-constant GL_NOOP #x1505)

(alexandria:define-constant GL_XOR #x1506)

(alexandria:define-constant GL_OR #x1507)

(alexandria:define-constant GL_NOR #x1508)

(alexandria:define-constant GL_EQUIV #x1509)

(alexandria:define-constant GL_INVERT #x150A)

(alexandria:define-constant GL_OR_REVERSE #x150B)

(alexandria:define-constant GL_COPY_INVERTED #x150C)

(alexandria:define-constant GL_OR_INVERTED #x150D)

(alexandria:define-constant GL_NAND #x150E)

(alexandria:define-constant GL_SET #x150F)

(alexandria:define-constant GL_EMISSION #x1600)

(alexandria:define-constant GL_SHININESS #x1601)

(alexandria:define-constant GL_AMBIENT_AND_DIFFUSE #x1602)

(alexandria:define-constant GL_COLOR_INDEXES #x1603)

(alexandria:define-constant GL_MODELVIEW #x1700)

(alexandria:define-constant GL_PROJECTION #x1701)

(alexandria:define-constant GL_TEXTURE #x1702)

(alexandria:define-constant GL_COLOR #x1800)

(alexandria:define-constant GL_DEPTH #x1801)

(alexandria:define-constant GL_STENCIL #x1802)

(alexandria:define-constant GL_COLOR_INDEX #x1900)

(alexandria:define-constant GL_STENCIL_INDEX #x1901)

(alexandria:define-constant GL_DEPTH_COMPONENT #x1902)

(alexandria:define-constant GL_RED #x1903)

(alexandria:define-constant GL_GREEN #x1904)

(alexandria:define-constant GL_BLUE #x1905)

(alexandria:define-constant GL_ALPHA #x1906)

(alexandria:define-constant GL_RGB #x1907)

(alexandria:define-constant GL_RGBA #x1908)

(alexandria:define-constant GL_LUMINANCE #x1909)

(alexandria:define-constant GL_LUMINANCE_ALPHA #x190A)

(alexandria:define-constant GL_BITMAP #x1A00)

(alexandria:define-constant GL_POINT #x1B00)

(alexandria:define-constant GL_LINE #x1B01)

(alexandria:define-constant GL_FILL #x1B02)

(alexandria:define-constant GL_RENDER #x1C00)

(alexandria:define-constant GL_FEEDBACK #x1C01)

(alexandria:define-constant GL_SELECT #x1C02)

(alexandria:define-constant GL_FLAT #x1D00)

(alexandria:define-constant GL_SMOOTH #x1D01)

(alexandria:define-constant GL_KEEP #x1E00)

(alexandria:define-constant GL_REPLACE #x1E01)

(alexandria:define-constant GL_INCR #x1E02)

(alexandria:define-constant GL_DECR #x1E03)

(alexandria:define-constant GL_VENDOR #x1F00)

(alexandria:define-constant GL_RENDERER #x1F01)

(alexandria:define-constant GL_VERSION #x1F02)

(alexandria:define-constant GL_EXTENSIONS #x1F03)

(alexandria:define-constant GL_S #x2000)

(alexandria:define-constant GL_T #x2001)

(alexandria:define-constant GL_R #x2002)

(alexandria:define-constant GL_Q #x2003)

(alexandria:define-constant GL_MODULATE #x2100)

(alexandria:define-constant GL_DECAL #x2101)

(alexandria:define-constant GL_TEXTURE_ENV_MODE #x2200)

(alexandria:define-constant GL_TEXTURE_ENV_COLOR #x2201)

(alexandria:define-constant GL_TEXTURE_ENV #x2300)

(alexandria:define-constant GL_EYE_LINEAR #x2400)

(alexandria:define-constant GL_OBJECT_LINEAR #x2401)

(alexandria:define-constant GL_SPHERE_MAP #x2402)

(alexandria:define-constant GL_TEXTURE_GEN_MODE #x2500)

(alexandria:define-constant GL_OBJECT_PLANE #x2501)

(alexandria:define-constant GL_EYE_PLANE #x2502)

(alexandria:define-constant GL_NEAREST #x2600)

(alexandria:define-constant GL_LINEAR #x2601)

(alexandria:define-constant GL_NEAREST_MIPMAP_NEAREST #x2700)

(alexandria:define-constant GL_LINEAR_MIPMAP_NEAREST #x2701)

(alexandria:define-constant GL_NEAREST_MIPMAP_LINEAR #x2702)

(alexandria:define-constant GL_LINEAR_MIPMAP_LINEAR #x2703)

(alexandria:define-constant GL_TEXTURE_MAG_FILTER #x2800)

(alexandria:define-constant GL_TEXTURE_MIN_FILTER #x2801)

(alexandria:define-constant GL_TEXTURE_WRAP_S #x2802)

(alexandria:define-constant GL_TEXTURE_WRAP_T #x2803)

(alexandria:define-constant GL_CLAMP #x2900)

(alexandria:define-constant GL_REPEAT #x2901)

(alexandria:define-constant GL_CLIENT_PIXEL_STORE_BIT #x00000001)

(alexandria:define-constant GL_CLIENT_VERTEX_ARRAY_BIT #x00000002)

(alexandria:define-constant GL_CLIENT_ALL_ATTRIB_BITS #xffffffff)

(alexandria:define-constant GL_POLYGON_OFFSET_FACTOR #x8038)

(alexandria:define-constant GL_POLYGON_OFFSET_UNITS #x2A00)

(alexandria:define-constant GL_POLYGON_OFFSET_POINT #x2A01)

(alexandria:define-constant GL_POLYGON_OFFSET_LINE #x2A02)

(alexandria:define-constant GL_POLYGON_OFFSET_FILL #x8037)

(alexandria:define-constant GL_ALPHA4 #x803B)

(alexandria:define-constant GL_ALPHA8 #x803C)

(alexandria:define-constant GL_ALPHA12 #x803D)

(alexandria:define-constant GL_ALPHA16 #x803E)

(alexandria:define-constant GL_LUMINANCE4 #x803F)

(alexandria:define-constant GL_LUMINANCE8 #x8040)

(alexandria:define-constant GL_LUMINANCE12 #x8041)

(alexandria:define-constant GL_LUMINANCE16 #x8042)

(alexandria:define-constant GL_LUMINANCE4_ALPHA4 #x8043)

(alexandria:define-constant GL_LUMINANCE6_ALPHA2 #x8044)

(alexandria:define-constant GL_LUMINANCE8_ALPHA8 #x8045)

(alexandria:define-constant GL_LUMINANCE12_ALPHA4 #x8046)

(alexandria:define-constant GL_LUMINANCE12_ALPHA12 #x8047)

(alexandria:define-constant GL_LUMINANCE16_ALPHA16 #x8048)

(alexandria:define-constant GL_INTENSITY #x8049)

(alexandria:define-constant GL_INTENSITY4 #x804A)

(alexandria:define-constant GL_INTENSITY8 #x804B)

(alexandria:define-constant GL_INTENSITY12 #x804C)

(alexandria:define-constant GL_INTENSITY16 #x804D)

(alexandria:define-constant GL_R3_G3_B2 #x2A10)

(alexandria:define-constant GL_RGB4 #x804F)

(alexandria:define-constant GL_RGB5 #x8050)

(alexandria:define-constant GL_RGB8 #x8051)

(alexandria:define-constant GL_RGB10 #x8052)

(alexandria:define-constant GL_RGB12 #x8053)

(alexandria:define-constant GL_RGB16 #x8054)

(alexandria:define-constant GL_RGBA2 #x8055)

(alexandria:define-constant GL_RGBA4 #x8056)

(alexandria:define-constant GL_RGB5_A1 #x8057)

(alexandria:define-constant GL_RGBA8 #x8058)

(alexandria:define-constant GL_RGB10_A2 #x8059)

(alexandria:define-constant GL_RGBA12 #x805A)

(alexandria:define-constant GL_RGBA16 #x805B)

(alexandria:define-constant GL_TEXTURE_RED_SIZE #x805C)

(alexandria:define-constant GL_TEXTURE_GREEN_SIZE #x805D)

(alexandria:define-constant GL_TEXTURE_BLUE_SIZE #x805E)

(alexandria:define-constant GL_TEXTURE_ALPHA_SIZE #x805F)

(alexandria:define-constant GL_TEXTURE_LUMINANCE_SIZE #x8060)

(alexandria:define-constant GL_TEXTURE_INTENSITY_SIZE #x8061)

(alexandria:define-constant GL_PROXY_TEXTURE_1D #x8063)

(alexandria:define-constant GL_PROXY_TEXTURE_2D #x8064)

(alexandria:define-constant GL_TEXTURE_PRIORITY #x8066)

(alexandria:define-constant GL_TEXTURE_RESIDENT #x8067)

(alexandria:define-constant GL_TEXTURE_BINDING_1D #x8068)

(alexandria:define-constant GL_TEXTURE_BINDING_2D #x8069)

(alexandria:define-constant GL_TEXTURE_BINDING_3D #x806A)

(alexandria:define-constant GL_VERTEX_ARRAY #x8074)

(alexandria:define-constant GL_NORMAL_ARRAY #x8075)

(alexandria:define-constant GL_COLOR_ARRAY #x8076)

(alexandria:define-constant GL_INDEX_ARRAY #x8077)

(alexandria:define-constant GL_TEXTURE_COORD_ARRAY #x8078)

(alexandria:define-constant GL_EDGE_FLAG_ARRAY #x8079)

(alexandria:define-constant GL_VERTEX_ARRAY_SIZE #x807A)

(alexandria:define-constant GL_VERTEX_ARRAY_TYPE #x807B)

(alexandria:define-constant GL_VERTEX_ARRAY_STRIDE #x807C)

(alexandria:define-constant GL_NORMAL_ARRAY_TYPE #x807E)

(alexandria:define-constant GL_NORMAL_ARRAY_STRIDE #x807F)

(alexandria:define-constant GL_COLOR_ARRAY_SIZE #x8081)

(alexandria:define-constant GL_COLOR_ARRAY_TYPE #x8082)

(alexandria:define-constant GL_COLOR_ARRAY_STRIDE #x8083)

(alexandria:define-constant GL_INDEX_ARRAY_TYPE #x8085)

(alexandria:define-constant GL_INDEX_ARRAY_STRIDE #x8086)

(alexandria:define-constant GL_TEXTURE_COORD_ARRAY_SIZE #x8088)

(alexandria:define-constant GL_TEXTURE_COORD_ARRAY_TYPE #x8089)

(alexandria:define-constant GL_TEXTURE_COORD_ARRAY_STRIDE #x808A)

(alexandria:define-constant GL_EDGE_FLAG_ARRAY_STRIDE #x808C)

(alexandria:define-constant GL_VERTEX_ARRAY_POINTER #x808E)

(alexandria:define-constant GL_NORMAL_ARRAY_POINTER #x808F)

(alexandria:define-constant GL_COLOR_ARRAY_POINTER #x8090)

(alexandria:define-constant GL_INDEX_ARRAY_POINTER #x8091)

(alexandria:define-constant GL_TEXTURE_COORD_ARRAY_POINTER #x8092)

(alexandria:define-constant GL_EDGE_FLAG_ARRAY_POINTER #x8093)

(alexandria:define-constant GL_V2F #x2A20)

(alexandria:define-constant GL_V3F #x2A21)

(alexandria:define-constant GL_C4UB_V2F #x2A22)

(alexandria:define-constant GL_C4UB_V3F #x2A23)

(alexandria:define-constant GL_C3F_V3F #x2A24)

(alexandria:define-constant GL_N3F_V3F #x2A25)

(alexandria:define-constant GL_C4F_N3F_V3F #x2A26)

(alexandria:define-constant GL_T2F_V3F #x2A27)

(alexandria:define-constant GL_T4F_V4F #x2A28)

(alexandria:define-constant GL_T2F_C4UB_V3F #x2A29)

(alexandria:define-constant GL_T2F_C3F_V3F #x2A2A)

(alexandria:define-constant GL_T2F_N3F_V3F #x2A2B)

(alexandria:define-constant GL_T2F_C4F_N3F_V3F #x2A2C)

(alexandria:define-constant GL_T4F_C4F_N3F_V4F #x2A2D)

(alexandria:define-constant GL_BGR #x80E0)

(alexandria:define-constant GL_BGRA #x80E1)

(alexandria:define-constant GL_CONSTANT_COLOR #x8001)

(alexandria:define-constant GL_ONE_MINUS_CONSTANT_COLOR #x8002)

(alexandria:define-constant GL_CONSTANT_ALPHA #x8003)

(alexandria:define-constant GL_ONE_MINUS_CONSTANT_ALPHA #x8004)

(alexandria:define-constant GL_BLEND_COLOR #x8005)

(alexandria:define-constant GL_FUNC_ADD #x8006)

(alexandria:define-constant GL_MIN #x8007)

(alexandria:define-constant GL_MAX #x8008)

(alexandria:define-constant GL_BLEND_EQUATION #x8009)

(alexandria:define-constant GL_BLEND_EQUATION_RGB #x8009)

(alexandria:define-constant GL_BLEND_EQUATION_ALPHA #x883D)

(alexandria:define-constant GL_FUNC_SUBTRACT #x800A)

(alexandria:define-constant GL_FUNC_REVERSE_SUBTRACT #x800B)

(alexandria:define-constant GL_COLOR_MATRIX #x80B1)

(alexandria:define-constant GL_COLOR_MATRIX_STACK_DEPTH #x80B2)

(alexandria:define-constant GL_MAX_COLOR_MATRIX_STACK_DEPTH #x80B3)

(alexandria:define-constant GL_POST_COLOR_MATRIX_RED_SCALE #x80B4)

(alexandria:define-constant GL_POST_COLOR_MATRIX_GREEN_SCALE #x80B5)

(alexandria:define-constant GL_POST_COLOR_MATRIX_BLUE_SCALE #x80B6)

(alexandria:define-constant GL_POST_COLOR_MATRIX_ALPHA_SCALE #x80B7)

(alexandria:define-constant GL_POST_COLOR_MATRIX_RED_BIAS #x80B8)

(alexandria:define-constant GL_POST_COLOR_MATRIX_GREEN_BIAS #x80B9)

(alexandria:define-constant GL_POST_COLOR_MATRIX_BLUE_BIAS #x80BA)

(alexandria:define-constant GL_POST_COLOR_MATRIX_ALPHA_BIAS #x80BB)

(alexandria:define-constant GL_COLOR_TABLE #x80D0)

(alexandria:define-constant GL_POST_CONVOLUTION_COLOR_TABLE #x80D1)

(alexandria:define-constant GL_POST_COLOR_MATRIX_COLOR_TABLE #x80D2)

(alexandria:define-constant GL_PROXY_COLOR_TABLE #x80D3)

(alexandria:define-constant GL_PROXY_POST_CONVOLUTION_COLOR_TABLE #x80D4)

(alexandria:define-constant GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE #x80D5)

(alexandria:define-constant GL_COLOR_TABLE_SCALE #x80D6)

(alexandria:define-constant GL_COLOR_TABLE_BIAS #x80D7)

(alexandria:define-constant GL_COLOR_TABLE_FORMAT #x80D8)

(alexandria:define-constant GL_COLOR_TABLE_WIDTH #x80D9)

(alexandria:define-constant GL_COLOR_TABLE_RED_SIZE #x80DA)

(alexandria:define-constant GL_COLOR_TABLE_GREEN_SIZE #x80DB)

(alexandria:define-constant GL_COLOR_TABLE_BLUE_SIZE #x80DC)

(alexandria:define-constant GL_COLOR_TABLE_ALPHA_SIZE #x80DD)

(alexandria:define-constant GL_COLOR_TABLE_LUMINANCE_SIZE #x80DE)

(alexandria:define-constant GL_COLOR_TABLE_INTENSITY_SIZE #x80DF)

(alexandria:define-constant GL_CONVOLUTION_1D #x8010)

(alexandria:define-constant GL_CONVOLUTION_2D #x8011)

(alexandria:define-constant GL_SEPARABLE_2D #x8012)

(alexandria:define-constant GL_CONVOLUTION_BORDER_MODE #x8013)

(alexandria:define-constant GL_CONVOLUTION_FILTER_SCALE #x8014)

(alexandria:define-constant GL_CONVOLUTION_FILTER_BIAS #x8015)

(alexandria:define-constant GL_REDUCE #x8016)

(alexandria:define-constant GL_CONVOLUTION_FORMAT #x8017)

(alexandria:define-constant GL_CONVOLUTION_WIDTH #x8018)

(alexandria:define-constant GL_CONVOLUTION_HEIGHT #x8019)

(alexandria:define-constant GL_MAX_CONVOLUTION_WIDTH #x801A)

(alexandria:define-constant GL_MAX_CONVOLUTION_HEIGHT #x801B)

(alexandria:define-constant GL_POST_CONVOLUTION_RED_SCALE #x801C)

(alexandria:define-constant GL_POST_CONVOLUTION_GREEN_SCALE #x801D)

(alexandria:define-constant GL_POST_CONVOLUTION_BLUE_SCALE #x801E)

(alexandria:define-constant GL_POST_CONVOLUTION_ALPHA_SCALE #x801F)

(alexandria:define-constant GL_POST_CONVOLUTION_RED_BIAS #x8020)

(alexandria:define-constant GL_POST_CONVOLUTION_GREEN_BIAS #x8021)

(alexandria:define-constant GL_POST_CONVOLUTION_BLUE_BIAS #x8022)

(alexandria:define-constant GL_POST_CONVOLUTION_ALPHA_BIAS #x8023)

(alexandria:define-constant GL_CONSTANT_BORDER #x8151)

(alexandria:define-constant GL_REPLICATE_BORDER #x8153)

(alexandria:define-constant GL_CONVOLUTION_BORDER_COLOR #x8154)

(alexandria:define-constant GL_MAX_ELEMENTS_VERTICES #x80E8)

(alexandria:define-constant GL_MAX_ELEMENTS_INDICES #x80E9)

(alexandria:define-constant GL_HISTOGRAM #x8024)

(alexandria:define-constant GL_PROXY_HISTOGRAM #x8025)

(alexandria:define-constant GL_HISTOGRAM_WIDTH #x8026)

(alexandria:define-constant GL_HISTOGRAM_FORMAT #x8027)

(alexandria:define-constant GL_HISTOGRAM_RED_SIZE #x8028)

(alexandria:define-constant GL_HISTOGRAM_GREEN_SIZE #x8029)

(alexandria:define-constant GL_HISTOGRAM_BLUE_SIZE #x802A)

(alexandria:define-constant GL_HISTOGRAM_ALPHA_SIZE #x802B)

(alexandria:define-constant GL_HISTOGRAM_LUMINANCE_SIZE #x802C)

(alexandria:define-constant GL_HISTOGRAM_SINK #x802D)

(alexandria:define-constant GL_MINMAX #x802E)

(alexandria:define-constant GL_MINMAX_FORMAT #x802F)

(alexandria:define-constant GL_MINMAX_SINK #x8030)

(alexandria:define-constant GL_TABLE_TOO_LARGE #x8031)

(alexandria:define-constant GL_UNSIGNED_BYTE_3_3_2 #x8032)

(alexandria:define-constant GL_UNSIGNED_SHORT_4_4_4_4 #x8033)

(alexandria:define-constant GL_UNSIGNED_SHORT_5_5_5_1 #x8034)

(alexandria:define-constant GL_UNSIGNED_INT_8_8_8_8 #x8035)

(alexandria:define-constant GL_UNSIGNED_INT_10_10_10_2 #x8036)

(alexandria:define-constant GL_UNSIGNED_BYTE_2_3_3_REV #x8362)

(alexandria:define-constant GL_UNSIGNED_SHORT_5_6_5 #x8363)

(alexandria:define-constant GL_UNSIGNED_SHORT_5_6_5_REV #x8364)

(alexandria:define-constant GL_UNSIGNED_SHORT_4_4_4_4_REV #x8365)

(alexandria:define-constant GL_UNSIGNED_SHORT_1_5_5_5_REV #x8366)

(alexandria:define-constant GL_UNSIGNED_INT_8_8_8_8_REV #x8367)

(alexandria:define-constant GL_UNSIGNED_INT_2_10_10_10_REV #x8368)

(alexandria:define-constant GL_RESCALE_NORMAL #x803A)

(alexandria:define-constant GL_LIGHT_MODEL_COLOR_CONTROL #x81F8)

(alexandria:define-constant GL_SINGLE_COLOR #x81F9)

(alexandria:define-constant GL_SEPARATE_SPECULAR_COLOR #x81FA)

(alexandria:define-constant GL_PACK_SKIP_IMAGES #x806B)

(alexandria:define-constant GL_PACK_IMAGE_HEIGHT #x806C)

(alexandria:define-constant GL_UNPACK_SKIP_IMAGES #x806D)

(alexandria:define-constant GL_UNPACK_IMAGE_HEIGHT #x806E)

(alexandria:define-constant GL_TEXTURE_3D #x806F)

(alexandria:define-constant GL_PROXY_TEXTURE_3D #x8070)

(alexandria:define-constant GL_TEXTURE_DEPTH #x8071)

(alexandria:define-constant GL_TEXTURE_WRAP_R #x8072)

(alexandria:define-constant GL_MAX_3D_TEXTURE_SIZE #x8073)

(alexandria:define-constant GL_CLAMP_TO_EDGE #x812F)

(alexandria:define-constant GL_CLAMP_TO_BORDER #x812D)

(alexandria:define-constant GL_TEXTURE_MIN_LOD #x813A)

(alexandria:define-constant GL_TEXTURE_MAX_LOD #x813B)

(alexandria:define-constant GL_TEXTURE_BASE_LEVEL #x813C)

(alexandria:define-constant GL_TEXTURE_MAX_LEVEL #x813D)

(alexandria:define-constant GL_SMOOTH_POINT_SIZE_RANGE #x0B12)

(alexandria:define-constant GL_SMOOTH_POINT_SIZE_GRANULARITY #x0B13)

(alexandria:define-constant GL_SMOOTH_LINE_WIDTH_RANGE #x0B22)

(alexandria:define-constant GL_SMOOTH_LINE_WIDTH_GRANULARITY #x0B23)

(alexandria:define-constant GL_ALIASED_POINT_SIZE_RANGE #x846D)

(alexandria:define-constant GL_ALIASED_LINE_WIDTH_RANGE #x846E)

(alexandria:define-constant GL_TEXTURE0 #x84C0)

(alexandria:define-constant GL_TEXTURE1 #x84C1)

(alexandria:define-constant GL_TEXTURE2 #x84C2)

(alexandria:define-constant GL_TEXTURE3 #x84C3)

(alexandria:define-constant GL_TEXTURE4 #x84C4)

(alexandria:define-constant GL_TEXTURE5 #x84C5)

(alexandria:define-constant GL_TEXTURE6 #x84C6)

(alexandria:define-constant GL_TEXTURE7 #x84C7)

(alexandria:define-constant GL_TEXTURE8 #x84C8)

(alexandria:define-constant GL_TEXTURE9 #x84C9)

(alexandria:define-constant GL_TEXTURE10 #x84CA)

(alexandria:define-constant GL_TEXTURE11 #x84CB)

(alexandria:define-constant GL_TEXTURE12 #x84CC)

(alexandria:define-constant GL_TEXTURE13 #x84CD)

(alexandria:define-constant GL_TEXTURE14 #x84CE)

(alexandria:define-constant GL_TEXTURE15 #x84CF)

(alexandria:define-constant GL_TEXTURE16 #x84D0)

(alexandria:define-constant GL_TEXTURE17 #x84D1)

(alexandria:define-constant GL_TEXTURE18 #x84D2)

(alexandria:define-constant GL_TEXTURE19 #x84D3)

(alexandria:define-constant GL_TEXTURE20 #x84D4)

(alexandria:define-constant GL_TEXTURE21 #x84D5)

(alexandria:define-constant GL_TEXTURE22 #x84D6)

(alexandria:define-constant GL_TEXTURE23 #x84D7)

(alexandria:define-constant GL_TEXTURE24 #x84D8)

(alexandria:define-constant GL_TEXTURE25 #x84D9)

(alexandria:define-constant GL_TEXTURE26 #x84DA)

(alexandria:define-constant GL_TEXTURE27 #x84DB)

(alexandria:define-constant GL_TEXTURE28 #x84DC)

(alexandria:define-constant GL_TEXTURE29 #x84DD)

(alexandria:define-constant GL_TEXTURE30 #x84DE)

(alexandria:define-constant GL_TEXTURE31 #x84DF)

(alexandria:define-constant GL_ACTIVE_TEXTURE #x84E0)

(alexandria:define-constant GL_CLIENT_ACTIVE_TEXTURE #x84E1)

(alexandria:define-constant GL_MAX_TEXTURE_UNITS #x84E2)

(alexandria:define-constant GL_COMBINE #x8570)

(alexandria:define-constant GL_COMBINE_RGB #x8571)

(alexandria:define-constant GL_COMBINE_ALPHA #x8572)

(alexandria:define-constant GL_RGB_SCALE #x8573)

(alexandria:define-constant GL_ADD_SIGNED #x8574)

(alexandria:define-constant GL_INTERPOLATE #x8575)

(alexandria:define-constant GL_CONSTANT #x8576)

(alexandria:define-constant GL_PRIMARY_COLOR #x8577)

(alexandria:define-constant GL_PREVIOUS #x8578)

(alexandria:define-constant GL_SUBTRACT #x84E7)

(alexandria:define-constant GL_SRC0_RGB #x8580)

(alexandria:define-constant GL_SRC1_RGB #x8581)

(alexandria:define-constant GL_SRC2_RGB #x8582)

(alexandria:define-constant GL_SRC3_RGB #x8583)

(alexandria:define-constant GL_SRC4_RGB #x8584)

(alexandria:define-constant GL_SRC5_RGB #x8585)

(alexandria:define-constant GL_SRC6_RGB #x8586)

(alexandria:define-constant GL_SRC7_RGB #x8587)

(alexandria:define-constant GL_SRC0_ALPHA #x8588)

(alexandria:define-constant GL_SRC1_ALPHA #x8589)

(alexandria:define-constant GL_SRC2_ALPHA #x858A)

(alexandria:define-constant GL_SRC3_ALPHA #x858B)

(alexandria:define-constant GL_SRC4_ALPHA #x858C)

(alexandria:define-constant GL_SRC5_ALPHA #x858D)

(alexandria:define-constant GL_SRC6_ALPHA #x858E)

(alexandria:define-constant GL_SRC7_ALPHA #x858F)

(alexandria:define-constant GL_SOURCE0_RGB #x8580)

(alexandria:define-constant GL_SOURCE1_RGB #x8581)

(alexandria:define-constant GL_SOURCE2_RGB #x8582)

(alexandria:define-constant GL_SOURCE3_RGB #x8583)

(alexandria:define-constant GL_SOURCE4_RGB #x8584)

(alexandria:define-constant GL_SOURCE5_RGB #x8585)

(alexandria:define-constant GL_SOURCE6_RGB #x8586)

(alexandria:define-constant GL_SOURCE7_RGB #x8587)

(alexandria:define-constant GL_SOURCE0_ALPHA #x8588)

(alexandria:define-constant GL_SOURCE1_ALPHA #x8589)

(alexandria:define-constant GL_SOURCE2_ALPHA #x858A)

(alexandria:define-constant GL_SOURCE3_ALPHA #x858B)

(alexandria:define-constant GL_SOURCE4_ALPHA #x858C)

(alexandria:define-constant GL_SOURCE5_ALPHA #x858D)

(alexandria:define-constant GL_SOURCE6_ALPHA #x858E)

(alexandria:define-constant GL_SOURCE7_ALPHA #x858F)

(alexandria:define-constant GL_OPERAND0_RGB #x8590)

(alexandria:define-constant GL_OPERAND1_RGB #x8591)

(alexandria:define-constant GL_OPERAND2_RGB #x8592)

(alexandria:define-constant GL_OPERAND3_RGB #x8593)

(alexandria:define-constant GL_OPERAND4_RGB #x8594)

(alexandria:define-constant GL_OPERAND5_RGB #x8595)

(alexandria:define-constant GL_OPERAND6_RGB #x8596)

(alexandria:define-constant GL_OPERAND7_RGB #x8597)

(alexandria:define-constant GL_OPERAND0_ALPHA #x8598)

(alexandria:define-constant GL_OPERAND1_ALPHA #x8599)

(alexandria:define-constant GL_OPERAND2_ALPHA #x859A)

(alexandria:define-constant GL_OPERAND3_ALPHA #x859B)

(alexandria:define-constant GL_OPERAND4_ALPHA #x859C)

(alexandria:define-constant GL_OPERAND5_ALPHA #x859D)

(alexandria:define-constant GL_OPERAND6_ALPHA #x859E)

(alexandria:define-constant GL_OPERAND7_ALPHA #x859F)

(alexandria:define-constant GL_DOT3_RGB #x86AE)

(alexandria:define-constant GL_DOT3_RGBA #x86AF)

(alexandria:define-constant GL_TRANSPOSE_MODELVIEW_MATRIX #x84E3)

(alexandria:define-constant GL_TRANSPOSE_PROJECTION_MATRIX #x84E4)

(alexandria:define-constant GL_TRANSPOSE_TEXTURE_MATRIX #x84E5)

(alexandria:define-constant GL_TRANSPOSE_COLOR_MATRIX #x84E6)

(alexandria:define-constant GL_NORMAL_MAP #x8511)

(alexandria:define-constant GL_REFLECTION_MAP #x8512)

(alexandria:define-constant GL_TEXTURE_CUBE_MAP #x8513)

(alexandria:define-constant GL_TEXTURE_BINDING_CUBE_MAP #x8514)

(alexandria:define-constant GL_TEXTURE_CUBE_MAP_POSITIVE_X #x8515)

(alexandria:define-constant GL_TEXTURE_CUBE_MAP_NEGATIVE_X #x8516)

(alexandria:define-constant GL_TEXTURE_CUBE_MAP_POSITIVE_Y #x8517)

(alexandria:define-constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Y #x8518)

(alexandria:define-constant GL_TEXTURE_CUBE_MAP_POSITIVE_Z #x8519)

(alexandria:define-constant GL_TEXTURE_CUBE_MAP_NEGATIVE_Z #x851A)

(alexandria:define-constant GL_PROXY_TEXTURE_CUBE_MAP #x851B)

(alexandria:define-constant GL_MAX_CUBE_MAP_TEXTURE_SIZE #x851C)

(alexandria:define-constant GL_COMPRESSED_ALPHA #x84E9)

(alexandria:define-constant GL_COMPRESSED_LUMINANCE #x84EA)

(alexandria:define-constant GL_COMPRESSED_LUMINANCE_ALPHA #x84EB)

(alexandria:define-constant GL_COMPRESSED_INTENSITY #x84EC)

(alexandria:define-constant GL_COMPRESSED_RGB #x84ED)

(alexandria:define-constant GL_COMPRESSED_RGBA #x84EE)

(alexandria:define-constant GL_TEXTURE_COMPRESSION_HINT #x84EF)

(alexandria:define-constant GL_TEXTURE_COMPRESSED_IMAGE_SIZE #x86A0)

(alexandria:define-constant GL_TEXTURE_COMPRESSED #x86A1)

(alexandria:define-constant GL_NUM_COMPRESSED_TEXTURE_FORMATS #x86A2)

(alexandria:define-constant GL_COMPRESSED_TEXTURE_FORMATS #x86A3)

(alexandria:define-constant GL_MULTISAMPLE #x809D)

(alexandria:define-constant GL_SAMPLE_ALPHA_TO_COVERAGE #x809E)

(alexandria:define-constant GL_SAMPLE_ALPHA_TO_ONE #x809F)

(alexandria:define-constant GL_SAMPLE_COVERAGE #x80A0)

(alexandria:define-constant GL_SAMPLE_BUFFERS #x80A8)

(alexandria:define-constant GL_SAMPLES #x80A9)

(alexandria:define-constant GL_SAMPLE_COVERAGE_VALUE #x80AA)

(alexandria:define-constant GL_SAMPLE_COVERAGE_INVERT #x80AB)

(alexandria:define-constant GL_MULTISAMPLE_BIT #x20000000)

(alexandria:define-constant GL_DEPTH_COMPONENT16 #x81A5)

(alexandria:define-constant GL_DEPTH_COMPONENT24 #x81A6)

(alexandria:define-constant GL_DEPTH_COMPONENT32 #x81A7)

(alexandria:define-constant GL_TEXTURE_DEPTH_SIZE #x884A)

(alexandria:define-constant GL_DEPTH_TEXTURE_MODE #x884B)

(alexandria:define-constant GL_TEXTURE_COMPARE_MODE #x884C)

(alexandria:define-constant GL_TEXTURE_COMPARE_FUNC #x884D)

(alexandria:define-constant GL_COMPARE_R_TO_TEXTURE #x884E)

(alexandria:define-constant GL_QUERY_COUNTER_BITS #x8864)

(alexandria:define-constant GL_CURRENT_QUERY #x8865)

(alexandria:define-constant GL_QUERY_RESULT #x8866)

(alexandria:define-constant GL_QUERY_RESULT_AVAILABLE #x8867)

(alexandria:define-constant GL_SAMPLES_PASSED #x8914)

(alexandria:define-constant GL_FOG_COORD_SRC #x8450)

(alexandria:define-constant GL_FOG_COORD #x8451)

(alexandria:define-constant GL_FRAGMENT_DEPTH #x8452)

(alexandria:define-constant GL_CURRENT_FOG_COORD #x8453)

(alexandria:define-constant GL_FOG_COORD_ARRAY_TYPE #x8454)

(alexandria:define-constant GL_FOG_COORD_ARRAY_STRIDE #x8455)

(alexandria:define-constant GL_FOG_COORD_ARRAY_POINTER #x8456)

(alexandria:define-constant GL_FOG_COORD_ARRAY #x8457)

(alexandria:define-constant GL_FOG_COORDINATE_SOURCE #x8450)

(alexandria:define-constant GL_FOG_COORDINATE #x8451)

(alexandria:define-constant GL_CURRENT_FOG_COORDINATE #x8453)

(alexandria:define-constant GL_FOG_COORDINATE_ARRAY_TYPE #x8454)

(alexandria:define-constant GL_FOG_COORDINATE_ARRAY_STRIDE #x8455)

(alexandria:define-constant GL_FOG_COORDINATE_ARRAY_POINTER #x8456)

(alexandria:define-constant GL_FOG_COORDINATE_ARRAY #x8457)

(alexandria:define-constant GL_COLOR_SUM #x8458)

(alexandria:define-constant GL_CURRENT_SECONDARY_COLOR #x8459)

(alexandria:define-constant GL_SECONDARY_COLOR_ARRAY_SIZE #x845A)

(alexandria:define-constant GL_SECONDARY_COLOR_ARRAY_TYPE #x845B)

(alexandria:define-constant GL_SECONDARY_COLOR_ARRAY_STRIDE #x845C)

(alexandria:define-constant GL_SECONDARY_COLOR_ARRAY_POINTER #x845D)

(alexandria:define-constant GL_SECONDARY_COLOR_ARRAY #x845E)

(alexandria:define-constant GL_POINT_SIZE_MIN #x8126)

(alexandria:define-constant GL_POINT_SIZE_MAX #x8127)

(alexandria:define-constant GL_POINT_FADE_THRESHOLD_SIZE #x8128)

(alexandria:define-constant GL_POINT_DISTANCE_ATTENUATION #x8129)

(alexandria:define-constant GL_BLEND_DST_RGB #x80C8)

(alexandria:define-constant GL_BLEND_SRC_RGB #x80C9)

(alexandria:define-constant GL_BLEND_DST_ALPHA #x80CA)

(alexandria:define-constant GL_BLEND_SRC_ALPHA #x80CB)

(alexandria:define-constant GL_GENERATE_MIPMAP #x8191)

(alexandria:define-constant GL_GENERATE_MIPMAP_HINT #x8192)

(alexandria:define-constant GL_INCR_WRAP #x8507)

(alexandria:define-constant GL_DECR_WRAP #x8508)

(alexandria:define-constant GL_MIRRORED_REPEAT #x8370)

(alexandria:define-constant GL_MAX_TEXTURE_LOD_BIAS #x84FD)

(alexandria:define-constant GL_TEXTURE_FILTER_CONTROL #x8500)

(alexandria:define-constant GL_TEXTURE_LOD_BIAS #x8501)

(alexandria:define-constant GL_ARRAY_BUFFER #x8892)

(alexandria:define-constant GL_ELEMENT_ARRAY_BUFFER #x8893)

(alexandria:define-constant GL_ARRAY_BUFFER_BINDING #x8894)

(alexandria:define-constant GL_ELEMENT_ARRAY_BUFFER_BINDING #x8895)

(alexandria:define-constant GL_VERTEX_ARRAY_BUFFER_BINDING #x8896)

(alexandria:define-constant GL_NORMAL_ARRAY_BUFFER_BINDING #x8897)

(alexandria:define-constant GL_COLOR_ARRAY_BUFFER_BINDING #x8898)

(alexandria:define-constant GL_INDEX_ARRAY_BUFFER_BINDING #x8899)

(alexandria:define-constant GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING #x889A)

(alexandria:define-constant GL_EDGE_FLAG_ARRAY_BUFFER_BINDING #x889B)

(alexandria:define-constant GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING #x889C)

(alexandria:define-constant GL_FOG_COORD_ARRAY_BUFFER_BINDING #x889D)

(alexandria:define-constant GL_WEIGHT_ARRAY_BUFFER_BINDING #x889E)

(alexandria:define-constant GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING #x889F)

(alexandria:define-constant GL_STREAM_DRAW #x88E0)

(alexandria:define-constant GL_STREAM_READ #x88E1)

(alexandria:define-constant GL_STREAM_COPY #x88E2)

(alexandria:define-constant GL_STATIC_DRAW #x88E4)

(alexandria:define-constant GL_STATIC_READ #x88E5)

(alexandria:define-constant GL_STATIC_COPY #x88E6)

(alexandria:define-constant GL_DYNAMIC_DRAW #x88E8)

(alexandria:define-constant GL_DYNAMIC_READ #x88E9)

(alexandria:define-constant GL_DYNAMIC_COPY #x88EA)

(alexandria:define-constant GL_READ_ONLY #x88B8)

(alexandria:define-constant GL_WRITE_ONLY #x88B9)

(alexandria:define-constant GL_READ_WRITE #x88BA)

(alexandria:define-constant GL_BUFFER_SIZE #x8764)

(alexandria:define-constant GL_BUFFER_USAGE #x8765)

(alexandria:define-constant GL_BUFFER_ACCESS #x88BB)

(alexandria:define-constant GL_BUFFER_MAPPED #x88BC)

(alexandria:define-constant GL_BUFFER_MAP_POINTER #x88BD)

(alexandria:define-constant GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING #x889D)

(alexandria:define-constant GL_CURRENT_PROGRAM #x8B8D)

(alexandria:define-constant GL_SHADER_TYPE #x8B4F)

(alexandria:define-constant GL_DELETE_STATUS #x8B80)

(alexandria:define-constant GL_COMPILE_STATUS #x8B81)

(alexandria:define-constant GL_LINK_STATUS #x8B82)

(alexandria:define-constant GL_VALIDATE_STATUS #x8B83)

(alexandria:define-constant GL_INFO_LOG_LENGTH #x8B84)

(alexandria:define-constant GL_ATTACHED_SHADERS #x8B85)

(alexandria:define-constant GL_ACTIVE_UNIFORMS #x8B86)

(alexandria:define-constant GL_ACTIVE_UNIFORM_MAX_LENGTH #x8B87)

(alexandria:define-constant GL_SHADER_SOURCE_LENGTH #x8B88)

(alexandria:define-constant GL_FLOAT_VEC2 #x8B50)

(alexandria:define-constant GL_FLOAT_VEC3 #x8B51)

(alexandria:define-constant GL_FLOAT_VEC4 #x8B52)

(alexandria:define-constant GL_INT_VEC2 #x8B53)

(alexandria:define-constant GL_INT_VEC3 #x8B54)

(alexandria:define-constant GL_INT_VEC4 #x8B55)

(alexandria:define-constant GL_BOOL #x8B56)

(alexandria:define-constant GL_BOOL_VEC2 #x8B57)

(alexandria:define-constant GL_BOOL_VEC3 #x8B58)

(alexandria:define-constant GL_BOOL_VEC4 #x8B59)

(alexandria:define-constant GL_FLOAT_MAT2 #x8B5A)

(alexandria:define-constant GL_FLOAT_MAT3 #x8B5B)

(alexandria:define-constant GL_FLOAT_MAT4 #x8B5C)

(alexandria:define-constant GL_SAMPLER_1D #x8B5D)

(alexandria:define-constant GL_SAMPLER_2D #x8B5E)

(alexandria:define-constant GL_SAMPLER_3D #x8B5F)

(alexandria:define-constant GL_SAMPLER_CUBE #x8B60)

(alexandria:define-constant GL_SAMPLER_1D_SHADOW #x8B61)

(alexandria:define-constant GL_SAMPLER_2D_SHADOW #x8B62)

(alexandria:define-constant GL_SHADING_LANGUAGE_VERSION #x8B8C)

(alexandria:define-constant GL_VERTEX_SHADER #x8B31)

(alexandria:define-constant GL_MAX_VERTEX_UNIFORM_COMPONENTS #x8B4A)

(alexandria:define-constant GL_MAX_VARYING_FLOATS #x8B4B)

(alexandria:define-constant GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS #x8B4C)

(alexandria:define-constant GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS #x8B4D)

(alexandria:define-constant GL_ACTIVE_ATTRIBUTES #x8B89)

(alexandria:define-constant GL_ACTIVE_ATTRIBUTE_MAX_LENGTH #x8B8A)

(alexandria:define-constant GL_FRAGMENT_SHADER #x8B30)

(alexandria:define-constant GL_MAX_FRAGMENT_UNIFORM_COMPONENTS #x8B49)

(alexandria:define-constant GL_FRAGMENT_SHADER_DERIVATIVE_HINT #x8B8B)

(alexandria:define-constant GL_MAX_VERTEX_ATTRIBS #x8869)

(alexandria:define-constant GL_VERTEX_ATTRIB_ARRAY_ENABLED #x8622)

(alexandria:define-constant GL_VERTEX_ATTRIB_ARRAY_SIZE #x8623)

(alexandria:define-constant GL_VERTEX_ATTRIB_ARRAY_STRIDE #x8624)

(alexandria:define-constant GL_VERTEX_ATTRIB_ARRAY_TYPE #x8625)

(alexandria:define-constant GL_VERTEX_ATTRIB_ARRAY_NORMALIZED #x886A)

(alexandria:define-constant GL_CURRENT_VERTEX_ATTRIB #x8626)

(alexandria:define-constant GL_VERTEX_ATTRIB_ARRAY_POINTER #x8645)

(alexandria:define-constant GL_VERTEX_PROGRAM_POINT_SIZE #x8642)

(alexandria:define-constant GL_VERTEX_PROGRAM_TWO_SIDE #x8643)

(alexandria:define-constant GL_MAX_TEXTURE_COORDS #x8871)

(alexandria:define-constant GL_MAX_TEXTURE_IMAGE_UNITS #x8872)

(alexandria:define-constant GL_MAX_DRAW_BUFFERS #x8824)

(alexandria:define-constant GL_DRAW_BUFFER0 #x8825)

(alexandria:define-constant GL_DRAW_BUFFER1 #x8826)

(alexandria:define-constant GL_DRAW_BUFFER2 #x8827)

(alexandria:define-constant GL_DRAW_BUFFER3 #x8828)

(alexandria:define-constant GL_DRAW_BUFFER4 #x8829)

(alexandria:define-constant GL_DRAW_BUFFER5 #x882A)

(alexandria:define-constant GL_DRAW_BUFFER6 #x882B)

(alexandria:define-constant GL_DRAW_BUFFER7 #x882C)

(alexandria:define-constant GL_DRAW_BUFFER8 #x882D)

(alexandria:define-constant GL_DRAW_BUFFER9 #x882E)

(alexandria:define-constant GL_DRAW_BUFFER10 #x882F)

(alexandria:define-constant GL_DRAW_BUFFER11 #x8830)

(alexandria:define-constant GL_DRAW_BUFFER12 #x8831)

(alexandria:define-constant GL_DRAW_BUFFER13 #x8832)

(alexandria:define-constant GL_DRAW_BUFFER14 #x8833)

(alexandria:define-constant GL_DRAW_BUFFER15 #x8834)

(alexandria:define-constant GL_POINT_SPRITE #x8861)

(alexandria:define-constant GL_COORD_REPLACE #x8862)

(alexandria:define-constant GL_POINT_SPRITE_COORD_ORIGIN #x8CA0)

(alexandria:define-constant GL_LOWER_LEFT #x8CA1)

(alexandria:define-constant GL_UPPER_LEFT #x8CA2)

(alexandria:define-constant GL_STENCIL_BACK_FUNC #x8800)

(alexandria:define-constant GL_STENCIL_BACK_VALUE_MASK #x8CA4)

(alexandria:define-constant GL_STENCIL_BACK_REF #x8CA3)

(alexandria:define-constant GL_STENCIL_BACK_FAIL #x8801)

(alexandria:define-constant GL_STENCIL_BACK_PASS_DEPTH_FAIL #x8802)

(alexandria:define-constant GL_STENCIL_BACK_PASS_DEPTH_PASS #x8803)

(alexandria:define-constant GL_STENCIL_BACK_WRITEMASK #x8CA5)

(alexandria:define-constant GL_CURRENT_RASTER_SECONDARY_COLOR #x845F)

(alexandria:define-constant GL_PIXEL_PACK_BUFFER #x88EB)

(alexandria:define-constant GL_PIXEL_UNPACK_BUFFER #x88EC)

(alexandria:define-constant GL_PIXEL_PACK_BUFFER_BINDING #x88ED)

(alexandria:define-constant GL_PIXEL_UNPACK_BUFFER_BINDING #x88EF)

(alexandria:define-constant GL_FLOAT_MAT2x3 #x8B65)

(alexandria:define-constant GL_FLOAT_MAT2x4 #x8B66)

(alexandria:define-constant GL_FLOAT_MAT3x2 #x8B67)

(alexandria:define-constant GL_FLOAT_MAT3x4 #x8B68)

(alexandria:define-constant GL_FLOAT_MAT4x2 #x8B69)

(alexandria:define-constant GL_FLOAT_MAT4x3 #x8B6A)

(alexandria:define-constant GL_SRGB #x8C40)

(alexandria:define-constant GL_SRGB8 #x8C41)

(alexandria:define-constant GL_SRGB_ALPHA #x8C42)

(alexandria:define-constant GL_SRGB8_ALPHA8 #x8C43)

(alexandria:define-constant GL_SLUMINANCE_ALPHA #x8C44)

(alexandria:define-constant GL_SLUMINANCE8_ALPHA8 #x8C45)

(alexandria:define-constant GL_SLUMINANCE #x8C46)

(alexandria:define-constant GL_SLUMINANCE8 #x8C47)

(alexandria:define-constant GL_COMPRESSED_SRGB #x8C48)

(alexandria:define-constant GL_COMPRESSED_SRGB_ALPHA #x8C49)

(alexandria:define-constant GL_COMPRESSED_SLUMINANCE #x8C4A)

(alexandria:define-constant GL_COMPRESSED_SLUMINANCE_ALPHA #x8C4B)

(cffi:defcfun ("glAccum" glAccum) :void
  (op :unsigned-int)
  (value :float))

(cffi:defcfun ("glAlphaFunc" glAlphaFunc) :void
  (func :unsigned-int)
  (ref :float))

(cffi:defcfun ("glAreTexturesResident" glAreTexturesResident) :unsigned-char
  (n :int)
  (textures :pointer)
  (residences :pointer))

(cffi:defcfun ("glArrayElement" glArrayElement) :void
  (i :int))

(cffi:defcfun ("glBegin" glBegin) :void
  (mode :unsigned-int))

(cffi:defcfun ("glBindTexture" glBindTexture) :void
  (target :unsigned-int)
  (texture :unsigned-int))

(cffi:defcfun ("glBitmap" glBitmap) :void
  (width :int)
  (height :int)
  (xorig :float)
  (yorig :float)
  (xmove :float)
  (ymove :float)
  (bitmap :pointer))

(cffi:defcfun ("glBlendColor" glBlendColor) :void
  (red :float)
  (green :float)
  (blue :float)
  (alpha :float))

(cffi:defcfun ("glBlendEquation" glBlendEquation) :void
  (mode :unsigned-int))

(cffi:defcfun ("glBlendEquationSeparate" glBlendEquationSeparate) :void
  (modeRGB :unsigned-int)
  (modeAlpha :unsigned-int))

(cffi:defcfun ("glBlendFunc" glBlendFunc) :void
  (sfactor :unsigned-int)
  (dfactor :unsigned-int))

(cffi:defcfun ("glCallList" glCallList) :void
  (list :unsigned-int))

(cffi:defcfun ("glCallLists" glCallLists) :void
  (n :int)
  (type :unsigned-int)
  (lists :pointer))

(cffi:defcfun ("glClear" glClear) :void
  (mask :unsigned-int))

(cffi:defcfun ("glClearAccum" glClearAccum) :void
  (red :float)
  (green :float)
  (blue :float)
  (alpha :float))

(cffi:defcfun ("glClearColor" glClearColor) :void
  (red :float)
  (green :float)
  (blue :float)
  (alpha :float))

(cffi:defcfun ("glClearDepth" glClearDepth) :void
  (depth :double))

(cffi:defcfun ("glClearIndex" glClearIndex) :void
  (c :float))

(cffi:defcfun ("glClearStencil" glClearStencil) :void
  (s :int))

(cffi:defcfun ("glClipPlane" glClipPlane) :void
  (plane :unsigned-int)
  (equation :pointer))

(cffi:defcfun ("glColor3b" glColor3b) :void
  (red :char)
  (green :char)
  (blue :char))

(cffi:defcfun ("glColor3bv" glColor3bv) :void
  (v :pointer))

(cffi:defcfun ("glColor3d" glColor3d) :void
  (red :double)
  (green :double)
  (blue :double))

(cffi:defcfun ("glColor3dv" glColor3dv) :void
  (v :pointer))

(cffi:defcfun ("glColor3f" glColor3f) :void
  (red :float)
  (green :float)
  (blue :float))

(cffi:defcfun ("glColor3fv" glColor3fv) :void
  (v :pointer))

(cffi:defcfun ("glColor3i" glColor3i) :void
  (red :int)
  (green :int)
  (blue :int))

(cffi:defcfun ("glColor3iv" glColor3iv) :void
  (v :pointer))

(cffi:defcfun ("glColor3s" glColor3s) :void
  (red :short)
  (green :short)
  (blue :short))

(cffi:defcfun ("glColor3sv" glColor3sv) :void
  (v :pointer))

(cffi:defcfun ("glColor3ub" glColor3ub) :void
  (red :unsigned-char)
  (green :unsigned-char)
  (blue :unsigned-char))

(cffi:defcfun ("glColor3ubv" glColor3ubv) :void
  (v :pointer))

(cffi:defcfun ("glColor3ui" glColor3ui) :void
  (red :unsigned-int)
  (green :unsigned-int)
  (blue :unsigned-int))

(cffi:defcfun ("glColor3uiv" glColor3uiv) :void
  (v :pointer))

(cffi:defcfun ("glColor3us" glColor3us) :void
  (red :unsigned-short)
  (green :unsigned-short)
  (blue :unsigned-short))

(cffi:defcfun ("glColor3usv" glColor3usv) :void
  (v :pointer))

(cffi:defcfun ("glColor4b" glColor4b) :void
  (red :char)
  (green :char)
  (blue :char)
  (alpha :char))

(cffi:defcfun ("glColor4bv" glColor4bv) :void
  (v :pointer))

(cffi:defcfun ("glColor4d" glColor4d) :void
  (red :double)
  (green :double)
  (blue :double)
  (alpha :double))

(cffi:defcfun ("glColor4dv" glColor4dv) :void
  (v :pointer))

(cffi:defcfun ("glColor4f" glColor4f) :void
  (red :float)
  (green :float)
  (blue :float)
  (alpha :float))

(cffi:defcfun ("glColor4fv" glColor4fv) :void
  (v :pointer))

(cffi:defcfun ("glColor4i" glColor4i) :void
  (red :int)
  (green :int)
  (blue :int)
  (alpha :int))

(cffi:defcfun ("glColor4iv" glColor4iv) :void
  (v :pointer))

(cffi:defcfun ("glColor4s" glColor4s) :void
  (red :short)
  (green :short)
  (blue :short)
  (alpha :short))

(cffi:defcfun ("glColor4sv" glColor4sv) :void
  (v :pointer))

(cffi:defcfun ("glColor4ub" glColor4ub) :void
  (red :unsigned-char)
  (green :unsigned-char)
  (blue :unsigned-char)
  (alpha :unsigned-char))

(cffi:defcfun ("glColor4ubv" glColor4ubv) :void
  (v :pointer))

(cffi:defcfun ("glColor4ui" glColor4ui) :void
  (red :unsigned-int)
  (green :unsigned-int)
  (blue :unsigned-int)
  (alpha :unsigned-int))

(cffi:defcfun ("glColor4uiv" glColor4uiv) :void
  (v :pointer))

(cffi:defcfun ("glColor4us" glColor4us) :void
  (red :unsigned-short)
  (green :unsigned-short)
  (blue :unsigned-short)
  (alpha :unsigned-short))

(cffi:defcfun ("glColor4usv" glColor4usv) :void
  (v :pointer))

(cffi:defcfun ("glColorMask" glColorMask) :void
  (red :unsigned-char)
  (green :unsigned-char)
  (blue :unsigned-char)
  (alpha :unsigned-char))

(cffi:defcfun ("glColorMaterial" glColorMaterial) :void
  (face :unsigned-int)
  (mode :unsigned-int))

(cffi:defcfun ("glColorPointer" glColorPointer) :void
  (size :int)
  (type :unsigned-int)
  (stride :int)
  (pointer :pointer))

(cffi:defcfun ("glColorSubTable" glColorSubTable) :void
  (target :unsigned-int)
  (start :int)
  (count :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (data :pointer))

(cffi:defcfun ("glColorTable" glColorTable) :void
  (target :unsigned-int)
  (internalformat :unsigned-int)
  (width :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (table :pointer))

(cffi:defcfun ("glColorTableParameterfv" glColorTableParameterfv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glColorTableParameteriv" glColorTableParameteriv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glConvolutionFilter1D" glConvolutionFilter1D) :void
  (target :unsigned-int)
  (internalformat :unsigned-int)
  (width :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (image :pointer))

(cffi:defcfun ("glConvolutionFilter2D" glConvolutionFilter2D) :void
  (target :unsigned-int)
  (internalformat :unsigned-int)
  (width :int)
  (height :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (image :pointer))

(cffi:defcfun ("glConvolutionParameterf" glConvolutionParameterf) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :float))

(cffi:defcfun ("glConvolutionParameterfv" glConvolutionParameterfv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glConvolutionParameteri" glConvolutionParameteri) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :int))

(cffi:defcfun ("glConvolutionParameteriv" glConvolutionParameteriv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glCopyColorSubTable" glCopyColorSubTable) :void
  (target :unsigned-int)
  (start :int)
  (x :int)
  (y :int)
  (width :int))

(cffi:defcfun ("glCopyColorTable" glCopyColorTable) :void
  (target :unsigned-int)
  (internalformat :unsigned-int)
  (x :int)
  (y :int)
  (width :int))

(cffi:defcfun ("glCopyConvolutionFilter1D" glCopyConvolutionFilter1D) :void
  (target :unsigned-int)
  (internalformat :unsigned-int)
  (x :int)
  (y :int)
  (width :int))

(cffi:defcfun ("glCopyConvolutionFilter2D" glCopyConvolutionFilter2D) :void
  (target :unsigned-int)
  (internalformat :unsigned-int)
  (x :int)
  (y :int)
  (width :int)
  (height :int))

(cffi:defcfun ("glCopyPixels" glCopyPixels) :void
  (x :int)
  (y :int)
  (width :int)
  (height :int)
  (type :unsigned-int))

(cffi:defcfun ("glCopyTexImage1D" glCopyTexImage1D) :void
  (target :unsigned-int)
  (level :int)
  (internalformat :unsigned-int)
  (x :int)
  (y :int)
  (width :int)
  (border :int))

(cffi:defcfun ("glCopyTexImage2D" glCopyTexImage2D) :void
  (target :unsigned-int)
  (level :int)
  (internalformat :unsigned-int)
  (x :int)
  (y :int)
  (width :int)
  (height :int)
  (border :int))

(cffi:defcfun ("glCopyTexSubImage1D" glCopyTexSubImage1D) :void
  (target :unsigned-int)
  (level :int)
  (xoffset :int)
  (x :int)
  (y :int)
  (width :int))

(cffi:defcfun ("glCopyTexSubImage2D" glCopyTexSubImage2D) :void
  (target :unsigned-int)
  (level :int)
  (xoffset :int)
  (yoffset :int)
  (x :int)
  (y :int)
  (width :int)
  (height :int))

(cffi:defcfun ("glCopyTexSubImage3D" glCopyTexSubImage3D) :void
  (target :unsigned-int)
  (level :int)
  (xoffset :int)
  (yoffset :int)
  (zoffset :int)
  (x :int)
  (y :int)
  (width :int)
  (height :int))

(cffi:defcfun ("glCullFace" glCullFace) :void
  (mode :unsigned-int))

(cffi:defcfun ("glDeleteLists" glDeleteLists) :void
  (list :unsigned-int)
  (range :int))

(cffi:defcfun ("glDeleteTextures" glDeleteTextures) :void
  (n :int)
  (textures :pointer))

(cffi:defcfun ("glDepthFunc" glDepthFunc) :void
  (func :unsigned-int))

(cffi:defcfun ("glDepthMask" glDepthMask) :void
  (flag :unsigned-char))

(cffi:defcfun ("glDepthRange" glDepthRange) :void
  (zNear :double)
  (zFar :double))

(cffi:defcfun ("glDisable" glDisable) :void
  (cap :unsigned-int))

(cffi:defcfun ("glDisableClientState" glDisableClientState) :void
  (array :unsigned-int))

(cffi:defcfun ("glDrawArrays" glDrawArrays) :void
  (mode :unsigned-int)
  (first :int)
  (count :int))

(cffi:defcfun ("glDrawBuffer" glDrawBuffer) :void
  (mode :unsigned-int))

(cffi:defcfun ("glDrawElements" glDrawElements) :void
  (mode :unsigned-int)
  (count :int)
  (type :unsigned-int)
  (indices :pointer))

(cffi:defcfun ("glDrawPixels" glDrawPixels) :void
  (width :int)
  (height :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (pixels :pointer))

(cffi:defcfun ("glDrawRangeElements" glDrawRangeElements) :void
  (mode :unsigned-int)
  (start :unsigned-int)
  (end :unsigned-int)
  (count :int)
  (type :unsigned-int)
  (indices :pointer))

(cffi:defcfun ("glEdgeFlag" glEdgeFlag) :void
  (flag :unsigned-char))

(cffi:defcfun ("glEdgeFlagPointer" glEdgeFlagPointer) :void
  (stride :int)
  (pointer :pointer))

(cffi:defcfun ("glEdgeFlagv" glEdgeFlagv) :void
  (flag :pointer))

(cffi:defcfun ("glEnable" glEnable) :void
  (cap :unsigned-int))

(cffi:defcfun ("glEnableClientState" glEnableClientState) :void
  (array :unsigned-int))

(cffi:defcfun ("glEnd" glEnd) :void)

(cffi:defcfun ("glEndList" glEndList) :void)

(cffi:defcfun ("glEvalCoord1d" glEvalCoord1d) :void
  (u :double))

(cffi:defcfun ("glEvalCoord1dv" glEvalCoord1dv) :void
  (u :pointer))

(cffi:defcfun ("glEvalCoord1f" glEvalCoord1f) :void
  (u :float))

(cffi:defcfun ("glEvalCoord1fv" glEvalCoord1fv) :void
  (u :pointer))

(cffi:defcfun ("glEvalCoord2d" glEvalCoord2d) :void
  (u :double)
  (v :double))

(cffi:defcfun ("glEvalCoord2dv" glEvalCoord2dv) :void
  (u :pointer))

(cffi:defcfun ("glEvalCoord2f" glEvalCoord2f) :void
  (u :float)
  (v :float))

(cffi:defcfun ("glEvalCoord2fv" glEvalCoord2fv) :void
  (u :pointer))

(cffi:defcfun ("glEvalMesh1" glEvalMesh1) :void
  (mode :unsigned-int)
  (i1 :int)
  (i2 :int))

(cffi:defcfun ("glEvalMesh2" glEvalMesh2) :void
  (mode :unsigned-int)
  (i1 :int)
  (i2 :int)
  (j1 :int)
  (j2 :int))

(cffi:defcfun ("glEvalPoint1" glEvalPoint1) :void
  (i :int))

(cffi:defcfun ("glEvalPoint2" glEvalPoint2) :void
  (i :int)
  (j :int))

(cffi:defcfun ("glFeedbackBuffer" glFeedbackBuffer) :void
  (size :int)
  (type :unsigned-int)
  (buffer :pointer))

(cffi:defcfun ("glFinish" glFinish) :void)

(cffi:defcfun ("glFlush" glFlush) :void)

(cffi:defcfun ("glFogf" glFogf) :void
  (pname :unsigned-int)
  (param :float))

(cffi:defcfun ("glFogfv" glFogfv) :void
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glFogi" glFogi) :void
  (pname :unsigned-int)
  (param :int))

(cffi:defcfun ("glFogiv" glFogiv) :void
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glFrontFace" glFrontFace) :void
  (mode :unsigned-int))

(cffi:defcfun ("glFrustum" glFrustum) :void
  (left :double)
  (right :double)
  (bottom :double)
  (top :double)
  (zNear :double)
  (zFar :double))

(cffi:defcfun ("glGenLists" glGenLists) :unsigned-int
  (range :int))

(cffi:defcfun ("glGenTextures" glGenTextures) :void
  (n :int)
  (textures :pointer))

(cffi:defcfun ("glGetBooleanv" glGetBooleanv) :void
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetClipPlane" glGetClipPlane) :void
  (plane :unsigned-int)
  (equation :pointer))

(cffi:defcfun ("glGetColorTable" glGetColorTable) :void
  (target :unsigned-int)
  (format :unsigned-int)
  (type :unsigned-int)
  (table :pointer))

(cffi:defcfun ("glGetColorTableParameterfv" glGetColorTableParameterfv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetColorTableParameteriv" glGetColorTableParameteriv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetConvolutionFilter" glGetConvolutionFilter) :void
  (target :unsigned-int)
  (format :unsigned-int)
  (type :unsigned-int)
  (image :pointer))

(cffi:defcfun ("glGetConvolutionParameterfv" glGetConvolutionParameterfv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetConvolutionParameteriv" glGetConvolutionParameteriv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetDoublev" glGetDoublev) :void
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetError" glGetError) :unsigned-int)

(cffi:defcfun ("glGetFloatv" glGetFloatv) :void
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetHistogram" glGetHistogram) :void
  (target :unsigned-int)
  (reset :unsigned-char)
  (format :unsigned-int)
  (type :unsigned-int)
  (values :pointer))

(cffi:defcfun ("glGetHistogramParameterfv" glGetHistogramParameterfv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetHistogramParameteriv" glGetHistogramParameteriv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetIntegerv" glGetIntegerv) :void
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetLightfv" glGetLightfv) :void
  (light :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetLightiv" glGetLightiv) :void
  (light :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetMapdv" glGetMapdv) :void
  (target :unsigned-int)
  (query :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glGetMapfv" glGetMapfv) :void
  (target :unsigned-int)
  (query :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glGetMapiv" glGetMapiv) :void
  (target :unsigned-int)
  (query :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glGetMaterialfv" glGetMaterialfv) :void
  (face :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetMaterialiv" glGetMaterialiv) :void
  (face :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetMinmax" glGetMinmax) :void
  (target :unsigned-int)
  (reset :unsigned-char)
  (format :unsigned-int)
  (type :unsigned-int)
  (values :pointer))

(cffi:defcfun ("glGetMinmaxParameterfv" glGetMinmaxParameterfv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetMinmaxParameteriv" glGetMinmaxParameteriv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetPixelMapfv" glGetPixelMapfv) :void
  (map :unsigned-int)
  (values :pointer))

(cffi:defcfun ("glGetPixelMapuiv" glGetPixelMapuiv) :void
  (map :unsigned-int)
  (values :pointer))

(cffi:defcfun ("glGetPixelMapusv" glGetPixelMapusv) :void
  (map :unsigned-int)
  (values :pointer))

(cffi:defcfun ("glGetPointerv" glGetPointerv) :void
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetPolygonStipple" glGetPolygonStipple) :void
  (mask :pointer))

(cffi:defcfun ("glGetSeparableFilter" glGetSeparableFilter) :void
  (target :unsigned-int)
  (format :unsigned-int)
  (type :unsigned-int)
  (row :pointer)
  (column :pointer)
  (span :pointer))

(cffi:defcfun ("glGetString" glGetString) :pointer
  (name :unsigned-int))

(cffi:defcfun ("glGetTexEnvfv" glGetTexEnvfv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetTexEnviv" glGetTexEnviv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetTexGendv" glGetTexGendv) :void
  (coord :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetTexGenfv" glGetTexGenfv) :void
  (coord :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetTexGeniv" glGetTexGeniv) :void
  (coord :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetTexImage" glGetTexImage) :void
  (target :unsigned-int)
  (level :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (pixels :pointer))

(cffi:defcfun ("glGetTexLevelParameterfv" glGetTexLevelParameterfv) :void
  (target :unsigned-int)
  (level :int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetTexLevelParameteriv" glGetTexLevelParameteriv) :void
  (target :unsigned-int)
  (level :int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetTexParameterfv" glGetTexParameterfv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetTexParameteriv" glGetTexParameteriv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glHint" glHint) :void
  (target :unsigned-int)
  (mode :unsigned-int))

(cffi:defcfun ("glHistogram" glHistogram) :void
  (target :unsigned-int)
  (width :int)
  (internalformat :unsigned-int)
  (sink :unsigned-char))

(cffi:defcfun ("glIndexMask" glIndexMask) :void
  (mask :unsigned-int))

(cffi:defcfun ("glIndexPointer" glIndexPointer) :void
  (type :unsigned-int)
  (stride :int)
  (pointer :pointer))

(cffi:defcfun ("glIndexd" glIndexd) :void
  (c :double))

(cffi:defcfun ("glIndexdv" glIndexdv) :void
  (c :pointer))

(cffi:defcfun ("glIndexf" glIndexf) :void
  (c :float))

(cffi:defcfun ("glIndexfv" glIndexfv) :void
  (c :pointer))

(cffi:defcfun ("glIndexi" glIndexi) :void
  (c :int))

(cffi:defcfun ("glIndexiv" glIndexiv) :void
  (c :pointer))

(cffi:defcfun ("glIndexs" glIndexs) :void
  (c :short))

(cffi:defcfun ("glIndexsv" glIndexsv) :void
  (c :pointer))

(cffi:defcfun ("glIndexub" glIndexub) :void
  (c :unsigned-char))

(cffi:defcfun ("glIndexubv" glIndexubv) :void
  (c :pointer))

(cffi:defcfun ("glInitNames" glInitNames) :void)

(cffi:defcfun ("glInterleavedArrays" glInterleavedArrays) :void
  (format :unsigned-int)
  (stride :int)
  (pointer :pointer))

(cffi:defcfun ("glIsEnabled" glIsEnabled) :unsigned-char
  (cap :unsigned-int))

(cffi:defcfun ("glIsList" glIsList) :unsigned-char
  (list :unsigned-int))

(cffi:defcfun ("glIsTexture" glIsTexture) :unsigned-char
  (texture :unsigned-int))

(cffi:defcfun ("glLightModelf" glLightModelf) :void
  (pname :unsigned-int)
  (param :float))

(cffi:defcfun ("glLightModelfv" glLightModelfv) :void
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glLightModeli" glLightModeli) :void
  (pname :unsigned-int)
  (param :int))

(cffi:defcfun ("glLightModeliv" glLightModeliv) :void
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glLightf" glLightf) :void
  (light :unsigned-int)
  (pname :unsigned-int)
  (param :float))

(cffi:defcfun ("glLightfv" glLightfv) :void
  (light :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glLighti" glLighti) :void
  (light :unsigned-int)
  (pname :unsigned-int)
  (param :int))

(cffi:defcfun ("glLightiv" glLightiv) :void
  (light :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glLineStipple" glLineStipple) :void
  (factor :int)
  (pattern :unsigned-short))

(cffi:defcfun ("glLineWidth" glLineWidth) :void
  (width :float))

(cffi:defcfun ("glListBase" glListBase) :void
  (base :unsigned-int))

(cffi:defcfun ("glLoadIdentity" glLoadIdentity) :void)

(cffi:defcfun ("glLoadMatrixd" glLoadMatrixd) :void
  (m :pointer))

(cffi:defcfun ("glLoadMatrixf" glLoadMatrixf) :void
  (m :pointer))

(cffi:defcfun ("glLoadName" glLoadName) :void
  (name :unsigned-int))

(cffi:defcfun ("glLogicOp" glLogicOp) :void
  (opcode :unsigned-int))

(cffi:defcfun ("glMap1d" glMap1d) :void
  (target :unsigned-int)
  (u1 :double)
  (u2 :double)
  (stride :int)
  (order :int)
  (points :pointer))

(cffi:defcfun ("glMap1f" glMap1f) :void
  (target :unsigned-int)
  (u1 :float)
  (u2 :float)
  (stride :int)
  (order :int)
  (points :pointer))

(cffi:defcfun ("glMap2d" glMap2d) :void
  (target :unsigned-int)
  (u1 :double)
  (u2 :double)
  (ustride :int)
  (uorder :int)
  (v1 :double)
  (v2 :double)
  (vstride :int)
  (vorder :int)
  (points :pointer))

(cffi:defcfun ("glMap2f" glMap2f) :void
  (target :unsigned-int)
  (u1 :float)
  (u2 :float)
  (ustride :int)
  (uorder :int)
  (v1 :float)
  (v2 :float)
  (vstride :int)
  (vorder :int)
  (points :pointer))

(cffi:defcfun ("glMapGrid1d" glMapGrid1d) :void
  (un :int)
  (u1 :double)
  (u2 :double))

(cffi:defcfun ("glMapGrid1f" glMapGrid1f) :void
  (un :int)
  (u1 :float)
  (u2 :float))

(cffi:defcfun ("glMapGrid2d" glMapGrid2d) :void
  (un :int)
  (u1 :double)
  (u2 :double)
  (vn :int)
  (v1 :double)
  (v2 :double))

(cffi:defcfun ("glMapGrid2f" glMapGrid2f) :void
  (un :int)
  (u1 :float)
  (u2 :float)
  (vn :int)
  (v1 :float)
  (v2 :float))

(cffi:defcfun ("glMaterialf" glMaterialf) :void
  (face :unsigned-int)
  (pname :unsigned-int)
  (param :float))

(cffi:defcfun ("glMaterialfv" glMaterialfv) :void
  (face :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glMateriali" glMateriali) :void
  (face :unsigned-int)
  (pname :unsigned-int)
  (param :int))

(cffi:defcfun ("glMaterialiv" glMaterialiv) :void
  (face :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glMatrixMode" glMatrixMode) :void
  (mode :unsigned-int))

(cffi:defcfun ("glMinmax" glMinmax) :void
  (target :unsigned-int)
  (internalformat :unsigned-int)
  (sink :unsigned-char))

(cffi:defcfun ("glMultMatrixd" glMultMatrixd) :void
  (m :pointer))

(cffi:defcfun ("glMultMatrixf" glMultMatrixf) :void
  (m :pointer))

(cffi:defcfun ("glNewList" glNewList) :void
  (list :unsigned-int)
  (mode :unsigned-int))

(cffi:defcfun ("glNormal3b" glNormal3b) :void
  (nx :char)
  (ny :char)
  (nz :char))

(cffi:defcfun ("glNormal3bv" glNormal3bv) :void
  (v :pointer))

(cffi:defcfun ("glNormal3d" glNormal3d) :void
  (nx :double)
  (ny :double)
  (nz :double))

(cffi:defcfun ("glNormal3dv" glNormal3dv) :void
  (v :pointer))

(cffi:defcfun ("glNormal3f" glNormal3f) :void
  (nx :float)
  (ny :float)
  (nz :float))

(cffi:defcfun ("glNormal3fv" glNormal3fv) :void
  (v :pointer))

(cffi:defcfun ("glNormal3i" glNormal3i) :void
  (nx :int)
  (ny :int)
  (nz :int))

(cffi:defcfun ("glNormal3iv" glNormal3iv) :void
  (v :pointer))

(cffi:defcfun ("glNormal3s" glNormal3s) :void
  (nx :short)
  (ny :short)
  (nz :short))

(cffi:defcfun ("glNormal3sv" glNormal3sv) :void
  (v :pointer))

(cffi:defcfun ("glNormalPointer" glNormalPointer) :void
  (type :unsigned-int)
  (stride :int)
  (pointer :pointer))

(cffi:defcfun ("glOrtho" glOrtho) :void
  (left :double)
  (right :double)
  (bottom :double)
  (top :double)
  (zNear :double)
  (zFar :double))

(cffi:defcfun ("glPassThrough" glPassThrough) :void
  (token :float))

(cffi:defcfun ("glPixelMapfv" glPixelMapfv) :void
  (map :unsigned-int)
  (mapsize :int)
  (values :pointer))

(cffi:defcfun ("glPixelMapuiv" glPixelMapuiv) :void
  (map :unsigned-int)
  (mapsize :int)
  (values :pointer))

(cffi:defcfun ("glPixelMapusv" glPixelMapusv) :void
  (map :unsigned-int)
  (mapsize :int)
  (values :pointer))

(cffi:defcfun ("glPixelStoref" glPixelStoref) :void
  (pname :unsigned-int)
  (param :float))

(cffi:defcfun ("glPixelStorei" glPixelStorei) :void
  (pname :unsigned-int)
  (param :int))

(cffi:defcfun ("glPixelTransferf" glPixelTransferf) :void
  (pname :unsigned-int)
  (param :float))

(cffi:defcfun ("glPixelTransferi" glPixelTransferi) :void
  (pname :unsigned-int)
  (param :int))

(cffi:defcfun ("glPixelZoom" glPixelZoom) :void
  (xfactor :float)
  (yfactor :float))

(cffi:defcfun ("glPointSize" glPointSize) :void
  (size :float))

(cffi:defcfun ("glPolygonMode" glPolygonMode) :void
  (face :unsigned-int)
  (mode :unsigned-int))

(cffi:defcfun ("glPolygonOffset" glPolygonOffset) :void
  (factor :float)
  (units :float))

(cffi:defcfun ("glPolygonStipple" glPolygonStipple) :void
  (mask :pointer))

(cffi:defcfun ("glPopAttrib" glPopAttrib) :void)

(cffi:defcfun ("glPopClientAttrib" glPopClientAttrib) :void)

(cffi:defcfun ("glPopMatrix" glPopMatrix) :void)

(cffi:defcfun ("glPopName" glPopName) :void)

(cffi:defcfun ("glPrioritizeTextures" glPrioritizeTextures) :void
  (n :int)
  (textures :pointer)
  (priorities :pointer))

(cffi:defcfun ("glPushAttrib" glPushAttrib) :void
  (mask :unsigned-int))

(cffi:defcfun ("glPushClientAttrib" glPushClientAttrib) :void
  (mask :unsigned-int))

(cffi:defcfun ("glPushMatrix" glPushMatrix) :void)

(cffi:defcfun ("glPushName" glPushName) :void
  (name :unsigned-int))

(cffi:defcfun ("glRasterPos2d" glRasterPos2d) :void
  (x :double)
  (y :double))

(cffi:defcfun ("glRasterPos2dv" glRasterPos2dv) :void
  (v :pointer))

(cffi:defcfun ("glRasterPos2f" glRasterPos2f) :void
  (x :float)
  (y :float))

(cffi:defcfun ("glRasterPos2fv" glRasterPos2fv) :void
  (v :pointer))

(cffi:defcfun ("glRasterPos2i" glRasterPos2i) :void
  (x :int)
  (y :int))

(cffi:defcfun ("glRasterPos2iv" glRasterPos2iv) :void
  (v :pointer))

(cffi:defcfun ("glRasterPos2s" glRasterPos2s) :void
  (x :short)
  (y :short))

(cffi:defcfun ("glRasterPos2sv" glRasterPos2sv) :void
  (v :pointer))

(cffi:defcfun ("glRasterPos3d" glRasterPos3d) :void
  (x :double)
  (y :double)
  (z :double))

(cffi:defcfun ("glRasterPos3dv" glRasterPos3dv) :void
  (v :pointer))

(cffi:defcfun ("glRasterPos3f" glRasterPos3f) :void
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("glRasterPos3fv" glRasterPos3fv) :void
  (v :pointer))

(cffi:defcfun ("glRasterPos3i" glRasterPos3i) :void
  (x :int)
  (y :int)
  (z :int))

(cffi:defcfun ("glRasterPos3iv" glRasterPos3iv) :void
  (v :pointer))

(cffi:defcfun ("glRasterPos3s" glRasterPos3s) :void
  (x :short)
  (y :short)
  (z :short))

(cffi:defcfun ("glRasterPos3sv" glRasterPos3sv) :void
  (v :pointer))

(cffi:defcfun ("glRasterPos4d" glRasterPos4d) :void
  (x :double)
  (y :double)
  (z :double)
  (w :double))

(cffi:defcfun ("glRasterPos4dv" glRasterPos4dv) :void
  (v :pointer))

(cffi:defcfun ("glRasterPos4f" glRasterPos4f) :void
  (x :float)
  (y :float)
  (z :float)
  (w :float))

(cffi:defcfun ("glRasterPos4fv" glRasterPos4fv) :void
  (v :pointer))

(cffi:defcfun ("glRasterPos4i" glRasterPos4i) :void
  (x :int)
  (y :int)
  (z :int)
  (w :int))

(cffi:defcfun ("glRasterPos4iv" glRasterPos4iv) :void
  (v :pointer))

(cffi:defcfun ("glRasterPos4s" glRasterPos4s) :void
  (x :short)
  (y :short)
  (z :short)
  (w :short))

(cffi:defcfun ("glRasterPos4sv" glRasterPos4sv) :void
  (v :pointer))

(cffi:defcfun ("glReadBuffer" glReadBuffer) :void
  (mode :unsigned-int))

(cffi:defcfun ("glReadPixels" glReadPixels) :void
  (x :int)
  (y :int)
  (width :int)
  (height :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (pixels :pointer))

(cffi:defcfun ("glRectd" glRectd) :void
  (x1 :double)
  (y1 :double)
  (x2 :double)
  (y2 :double))

(cffi:defcfun ("glRectdv" glRectdv) :void
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("glRectf" glRectf) :void
  (x1 :float)
  (y1 :float)
  (x2 :float)
  (y2 :float))

(cffi:defcfun ("glRectfv" glRectfv) :void
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("glRecti" glRecti) :void
  (x1 :int)
  (y1 :int)
  (x2 :int)
  (y2 :int))

(cffi:defcfun ("glRectiv" glRectiv) :void
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("glRects" glRects) :void
  (x1 :short)
  (y1 :short)
  (x2 :short)
  (y2 :short))

(cffi:defcfun ("glRectsv" glRectsv) :void
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("glRenderMode" glRenderMode) :int
  (mode :unsigned-int))

(cffi:defcfun ("glResetHistogram" glResetHistogram) :void
  (target :unsigned-int))

(cffi:defcfun ("glResetMinmax" glResetMinmax) :void
  (target :unsigned-int))

(cffi:defcfun ("glRotated" glRotated) :void
  (angle :double)
  (x :double)
  (y :double)
  (z :double))

(cffi:defcfun ("glRotatef" glRotatef) :void
  (angle :float)
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("glScaled" glScaled) :void
  (x :double)
  (y :double)
  (z :double))

(cffi:defcfun ("glScalef" glScalef) :void
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("glScissor" glScissor) :void
  (x :int)
  (y :int)
  (width :int)
  (height :int))

(cffi:defcfun ("glSelectBuffer" glSelectBuffer) :void
  (size :int)
  (buffer :pointer))

(cffi:defcfun ("glSeparableFilter2D" glSeparableFilter2D) :void
  (target :unsigned-int)
  (internalformat :unsigned-int)
  (width :int)
  (height :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (row :pointer)
  (column :pointer))

(cffi:defcfun ("glShadeModel" glShadeModel) :void
  (mode :unsigned-int))

(cffi:defcfun ("glStencilFunc" glStencilFunc) :void
  (func :unsigned-int)
  (ref :int)
  (mask :unsigned-int))

(cffi:defcfun ("glStencilMask" glStencilMask) :void
  (mask :unsigned-int))

(cffi:defcfun ("glStencilOp" glStencilOp) :void
  (fail :unsigned-int)
  (zfail :unsigned-int)
  (zpass :unsigned-int))

(cffi:defcfun ("glTexCoord1d" glTexCoord1d) :void
  (s :double))

(cffi:defcfun ("glTexCoord1dv" glTexCoord1dv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord1f" glTexCoord1f) :void
  (s :float))

(cffi:defcfun ("glTexCoord1fv" glTexCoord1fv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord1i" glTexCoord1i) :void
  (s :int))

(cffi:defcfun ("glTexCoord1iv" glTexCoord1iv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord1s" glTexCoord1s) :void
  (s :short))

(cffi:defcfun ("glTexCoord1sv" glTexCoord1sv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord2d" glTexCoord2d) :void
  (s :double)
  (t_arg1 :double))

(cffi:defcfun ("glTexCoord2dv" glTexCoord2dv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord2f" glTexCoord2f) :void
  (s :float)
  (t_arg1 :float))

(cffi:defcfun ("glTexCoord2fv" glTexCoord2fv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord2i" glTexCoord2i) :void
  (s :int)
  (t_arg1 :int))

(cffi:defcfun ("glTexCoord2iv" glTexCoord2iv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord2s" glTexCoord2s) :void
  (s :short)
  (t_arg1 :short))

(cffi:defcfun ("glTexCoord2sv" glTexCoord2sv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord3d" glTexCoord3d) :void
  (s :double)
  (t_arg1 :double)
  (r :double))

(cffi:defcfun ("glTexCoord3dv" glTexCoord3dv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord3f" glTexCoord3f) :void
  (s :float)
  (t_arg1 :float)
  (r :float))

(cffi:defcfun ("glTexCoord3fv" glTexCoord3fv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord3i" glTexCoord3i) :void
  (s :int)
  (t_arg1 :int)
  (r :int))

(cffi:defcfun ("glTexCoord3iv" glTexCoord3iv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord3s" glTexCoord3s) :void
  (s :short)
  (t_arg1 :short)
  (r :short))

(cffi:defcfun ("glTexCoord3sv" glTexCoord3sv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord4d" glTexCoord4d) :void
  (s :double)
  (t_arg1 :double)
  (r :double)
  (q :double))

(cffi:defcfun ("glTexCoord4dv" glTexCoord4dv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord4f" glTexCoord4f) :void
  (s :float)
  (t_arg1 :float)
  (r :float)
  (q :float))

(cffi:defcfun ("glTexCoord4fv" glTexCoord4fv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord4i" glTexCoord4i) :void
  (s :int)
  (t_arg1 :int)
  (r :int)
  (q :int))

(cffi:defcfun ("glTexCoord4iv" glTexCoord4iv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoord4s" glTexCoord4s) :void
  (s :short)
  (t_arg1 :short)
  (r :short)
  (q :short))

(cffi:defcfun ("glTexCoord4sv" glTexCoord4sv) :void
  (v :pointer))

(cffi:defcfun ("glTexCoordPointer" glTexCoordPointer) :void
  (size :int)
  (type :unsigned-int)
  (stride :int)
  (pointer :pointer))

(cffi:defcfun ("glTexEnvf" glTexEnvf) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (param :float))

(cffi:defcfun ("glTexEnvfv" glTexEnvfv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glTexEnvi" glTexEnvi) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (param :int))

(cffi:defcfun ("glTexEnviv" glTexEnviv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glTexGend" glTexGend) :void
  (coord :unsigned-int)
  (pname :unsigned-int)
  (param :double))

(cffi:defcfun ("glTexGendv" glTexGendv) :void
  (coord :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glTexGenf" glTexGenf) :void
  (coord :unsigned-int)
  (pname :unsigned-int)
  (param :float))

(cffi:defcfun ("glTexGenfv" glTexGenfv) :void
  (coord :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glTexGeni" glTexGeni) :void
  (coord :unsigned-int)
  (pname :unsigned-int)
  (param :int))

(cffi:defcfun ("glTexGeniv" glTexGeniv) :void
  (coord :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glTexImage1D" glTexImage1D) :void
  (target :unsigned-int)
  (level :int)
  (internalformat :unsigned-int)
  (width :int)
  (border :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (pixels :pointer))

(cffi:defcfun ("glTexImage2D" glTexImage2D) :void
  (target :unsigned-int)
  (level :int)
  (internalformat :unsigned-int)
  (width :int)
  (height :int)
  (border :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (pixels :pointer))

(cffi:defcfun ("glTexImage3D" glTexImage3D) :void
  (target :unsigned-int)
  (level :int)
  (internalformat :unsigned-int)
  (width :int)
  (height :int)
  (depth :int)
  (border :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (pixels :pointer))

(cffi:defcfun ("glTexParameterf" glTexParameterf) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (param :float))

(cffi:defcfun ("glTexParameterfv" glTexParameterfv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glTexParameteri" glTexParameteri) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (param :int))

(cffi:defcfun ("glTexParameteriv" glTexParameteriv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glTexSubImage1D" glTexSubImage1D) :void
  (target :unsigned-int)
  (level :int)
  (xoffset :int)
  (width :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (pixels :pointer))

(cffi:defcfun ("glTexSubImage2D" glTexSubImage2D) :void
  (target :unsigned-int)
  (level :int)
  (xoffset :int)
  (yoffset :int)
  (width :int)
  (height :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (pixels :pointer))

(cffi:defcfun ("glTexSubImage3D" glTexSubImage3D) :void
  (target :unsigned-int)
  (level :int)
  (xoffset :int)
  (yoffset :int)
  (zoffset :int)
  (width :int)
  (height :int)
  (depth :int)
  (format :unsigned-int)
  (type :unsigned-int)
  (pixels :pointer))

(cffi:defcfun ("glTranslated" glTranslated) :void
  (x :double)
  (y :double)
  (z :double))

(cffi:defcfun ("glTranslatef" glTranslatef) :void
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("glVertex2d" glVertex2d) :void
  (x :double)
  (y :double))

(cffi:defcfun ("glVertex2dv" glVertex2dv) :void
  (v :pointer))

(cffi:defcfun ("glVertex2f" glVertex2f) :void
  (x :float)
  (y :float))

(cffi:defcfun ("glVertex2fv" glVertex2fv) :void
  (v :pointer))

(cffi:defcfun ("glVertex2i" glVertex2i) :void
  (x :int)
  (y :int))

(cffi:defcfun ("glVertex2iv" glVertex2iv) :void
  (v :pointer))

(cffi:defcfun ("glVertex2s" glVertex2s) :void
  (x :short)
  (y :short))

(cffi:defcfun ("glVertex2sv" glVertex2sv) :void
  (v :pointer))

(cffi:defcfun ("glVertex3d" glVertex3d) :void
  (x :double)
  (y :double)
  (z :double))

(cffi:defcfun ("glVertex3dv" glVertex3dv) :void
  (v :pointer))

(cffi:defcfun ("glVertex3f" glVertex3f) :void
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("glVertex3fv" glVertex3fv) :void
  (v :pointer))

(cffi:defcfun ("glVertex3i" glVertex3i) :void
  (x :int)
  (y :int)
  (z :int))

(cffi:defcfun ("glVertex3iv" glVertex3iv) :void
  (v :pointer))

(cffi:defcfun ("glVertex3s" glVertex3s) :void
  (x :short)
  (y :short)
  (z :short))

(cffi:defcfun ("glVertex3sv" glVertex3sv) :void
  (v :pointer))

(cffi:defcfun ("glVertex4d" glVertex4d) :void
  (x :double)
  (y :double)
  (z :double)
  (w :double))

(cffi:defcfun ("glVertex4dv" glVertex4dv) :void
  (v :pointer))

(cffi:defcfun ("glVertex4f" glVertex4f) :void
  (x :float)
  (y :float)
  (z :float)
  (w :float))

(cffi:defcfun ("glVertex4fv" glVertex4fv) :void
  (v :pointer))

(cffi:defcfun ("glVertex4i" glVertex4i) :void
  (x :int)
  (y :int)
  (z :int)
  (w :int))

(cffi:defcfun ("glVertex4iv" glVertex4iv) :void
  (v :pointer))

(cffi:defcfun ("glVertex4s" glVertex4s) :void
  (x :short)
  (y :short)
  (z :short)
  (w :short))

(cffi:defcfun ("glVertex4sv" glVertex4sv) :void
  (v :pointer))

(cffi:defcfun ("glVertexPointer" glVertexPointer) :void
  (size :int)
  (type :unsigned-int)
  (stride :int)
  (pointer :pointer))

(cffi:defcfun ("glViewport" glViewport) :void
  (x :int)
  (y :int)
  (width :int)
  (height :int))

(cffi:defcfun ("glSampleCoverage" glSampleCoverage) :void
  (value :float)
  (invert :unsigned-char))

(cffi:defcfun ("glSamplePass" glSamplePass) :void
  (pass :unsigned-int))

(cffi:defcfun ("glLoadTransposeMatrixf" glLoadTransposeMatrixf) :void
  (m :pointer))

(cffi:defcfun ("glLoadTransposeMatrixd" glLoadTransposeMatrixd) :void
  (m :pointer))

(cffi:defcfun ("glMultTransposeMatrixf" glMultTransposeMatrixf) :void
  (m :pointer))

(cffi:defcfun ("glMultTransposeMatrixd" glMultTransposeMatrixd) :void
  (m :pointer))

(cffi:defcfun ("glCompressedTexImage3D" glCompressedTexImage3D) :void
  (target :unsigned-int)
  (level :int)
  (internalformat :unsigned-int)
  (width :int)
  (height :int)
  (depth :int)
  (border :int)
  (imageSize :int)
  (data :pointer))

(cffi:defcfun ("glCompressedTexImage2D" glCompressedTexImage2D) :void
  (target :unsigned-int)
  (level :int)
  (internalformat :unsigned-int)
  (width :int)
  (height :int)
  (border :int)
  (imageSize :int)
  (data :pointer))

(cffi:defcfun ("glCompressedTexImage1D" glCompressedTexImage1D) :void
  (target :unsigned-int)
  (level :int)
  (internalformat :unsigned-int)
  (width :int)
  (border :int)
  (imageSize :int)
  (data :pointer))

(cffi:defcfun ("glCompressedTexSubImage3D" glCompressedTexSubImage3D) :void
  (target :unsigned-int)
  (level :int)
  (xoffset :int)
  (yoffset :int)
  (zoffset :int)
  (width :int)
  (height :int)
  (depth :int)
  (format :unsigned-int)
  (imageSize :int)
  (data :pointer))

(cffi:defcfun ("glCompressedTexSubImage2D" glCompressedTexSubImage2D) :void
  (target :unsigned-int)
  (level :int)
  (xoffset :int)
  (yoffset :int)
  (width :int)
  (height :int)
  (format :unsigned-int)
  (imageSize :int)
  (data :pointer))

(cffi:defcfun ("glCompressedTexSubImage1D" glCompressedTexSubImage1D) :void
  (target :unsigned-int)
  (level :int)
  (xoffset :int)
  (width :int)
  (format :unsigned-int)
  (imageSize :int)
  (data :pointer))

(cffi:defcfun ("glGetCompressedTexImage" glGetCompressedTexImage) :void
  (target :unsigned-int)
  (lod :int)
  (img :pointer))

(cffi:defcfun ("glActiveTexture" glActiveTexture) :void
  (texture :unsigned-int))

(cffi:defcfun ("glClientActiveTexture" glClientActiveTexture) :void
  (texture :unsigned-int))

(cffi:defcfun ("glMultiTexCoord1d" glMultiTexCoord1d) :void
  (target :unsigned-int)
  (s :double))

(cffi:defcfun ("glMultiTexCoord1dv" glMultiTexCoord1dv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord1f" glMultiTexCoord1f) :void
  (target :unsigned-int)
  (s :float))

(cffi:defcfun ("glMultiTexCoord1fv" glMultiTexCoord1fv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord1i" glMultiTexCoord1i) :void
  (target :unsigned-int)
  (s :int))

(cffi:defcfun ("glMultiTexCoord1iv" glMultiTexCoord1iv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord1s" glMultiTexCoord1s) :void
  (target :unsigned-int)
  (s :short))

(cffi:defcfun ("glMultiTexCoord1sv" glMultiTexCoord1sv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord2d" glMultiTexCoord2d) :void
  (target :unsigned-int)
  (s :double)
  (t_arg2 :double))

(cffi:defcfun ("glMultiTexCoord2dv" glMultiTexCoord2dv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord2f" glMultiTexCoord2f) :void
  (target :unsigned-int)
  (s :float)
  (t_arg2 :float))

(cffi:defcfun ("glMultiTexCoord2fv" glMultiTexCoord2fv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord2i" glMultiTexCoord2i) :void
  (target :unsigned-int)
  (s :int)
  (t_arg2 :int))

(cffi:defcfun ("glMultiTexCoord2iv" glMultiTexCoord2iv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord2s" glMultiTexCoord2s) :void
  (target :unsigned-int)
  (s :short)
  (t_arg2 :short))

(cffi:defcfun ("glMultiTexCoord2sv" glMultiTexCoord2sv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord3d" glMultiTexCoord3d) :void
  (target :unsigned-int)
  (s :double)
  (t_arg2 :double)
  (r :double))

(cffi:defcfun ("glMultiTexCoord3dv" glMultiTexCoord3dv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord3f" glMultiTexCoord3f) :void
  (target :unsigned-int)
  (s :float)
  (t_arg2 :float)
  (r :float))

(cffi:defcfun ("glMultiTexCoord3fv" glMultiTexCoord3fv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord3i" glMultiTexCoord3i) :void
  (target :unsigned-int)
  (s :int)
  (t_arg2 :int)
  (r :int))

(cffi:defcfun ("glMultiTexCoord3iv" glMultiTexCoord3iv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord3s" glMultiTexCoord3s) :void
  (target :unsigned-int)
  (s :short)
  (t_arg2 :short)
  (r :short))

(cffi:defcfun ("glMultiTexCoord3sv" glMultiTexCoord3sv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord4d" glMultiTexCoord4d) :void
  (target :unsigned-int)
  (s :double)
  (t_arg2 :double)
  (r :double)
  (q :double))

(cffi:defcfun ("glMultiTexCoord4dv" glMultiTexCoord4dv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord4f" glMultiTexCoord4f) :void
  (target :unsigned-int)
  (s :float)
  (t_arg2 :float)
  (r :float)
  (q :float))

(cffi:defcfun ("glMultiTexCoord4fv" glMultiTexCoord4fv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord4i" glMultiTexCoord4i) :void
  (target :unsigned-int)
  (arg1 :int)
  (s :int)
  (t_arg3 :int)
  (r :int))

(cffi:defcfun ("glMultiTexCoord4iv" glMultiTexCoord4iv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glMultiTexCoord4s" glMultiTexCoord4s) :void
  (target :unsigned-int)
  (s :short)
  (t_arg2 :short)
  (r :short)
  (q :short))

(cffi:defcfun ("glMultiTexCoord4sv" glMultiTexCoord4sv) :void
  (target :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glFogCoordf" glFogCoordf) :void
  (coord :float))

(cffi:defcfun ("glFogCoordfv" glFogCoordfv) :void
  (coord :pointer))

(cffi:defcfun ("glFogCoordd" glFogCoordd) :void
  (coord :double))

(cffi:defcfun ("glFogCoorddv" glFogCoorddv) :void
  (coord :pointer))

(cffi:defcfun ("glFogCoordPointer" glFogCoordPointer) :void
  (type :unsigned-int)
  (stride :int)
  (pointer :pointer))

(cffi:defcfun ("glSecondaryColor3b" glSecondaryColor3b) :void
  (red :char)
  (green :char)
  (blue :char))

(cffi:defcfun ("glSecondaryColor3bv" glSecondaryColor3bv) :void
  (v :pointer))

(cffi:defcfun ("glSecondaryColor3d" glSecondaryColor3d) :void
  (red :double)
  (green :double)
  (blue :double))

(cffi:defcfun ("glSecondaryColor3dv" glSecondaryColor3dv) :void
  (v :pointer))

(cffi:defcfun ("glSecondaryColor3f" glSecondaryColor3f) :void
  (red :float)
  (green :float)
  (blue :float))

(cffi:defcfun ("glSecondaryColor3fv" glSecondaryColor3fv) :void
  (v :pointer))

(cffi:defcfun ("glSecondaryColor3i" glSecondaryColor3i) :void
  (red :int)
  (green :int)
  (blue :int))

(cffi:defcfun ("glSecondaryColor3iv" glSecondaryColor3iv) :void
  (v :pointer))

(cffi:defcfun ("glSecondaryColor3s" glSecondaryColor3s) :void
  (red :short)
  (green :short)
  (blue :short))

(cffi:defcfun ("glSecondaryColor3sv" glSecondaryColor3sv) :void
  (v :pointer))

(cffi:defcfun ("glSecondaryColor3ub" glSecondaryColor3ub) :void
  (red :unsigned-char)
  (green :unsigned-char)
  (blue :unsigned-char))

(cffi:defcfun ("glSecondaryColor3ubv" glSecondaryColor3ubv) :void
  (v :pointer))

(cffi:defcfun ("glSecondaryColor3ui" glSecondaryColor3ui) :void
  (red :unsigned-int)
  (green :unsigned-int)
  (blue :unsigned-int))

(cffi:defcfun ("glSecondaryColor3uiv" glSecondaryColor3uiv) :void
  (v :pointer))

(cffi:defcfun ("glSecondaryColor3us" glSecondaryColor3us) :void
  (red :unsigned-short)
  (green :unsigned-short)
  (blue :unsigned-short))

(cffi:defcfun ("glSecondaryColor3usv" glSecondaryColor3usv) :void
  (v :pointer))

(cffi:defcfun ("glSecondaryColorPointer" glSecondaryColorPointer) :void
  (size :int)
  (type :unsigned-int)
  (stride :int)
  (pointer :pointer))

(cffi:defcfun ("glPointParameterf" glPointParameterf) :void
  (pname :unsigned-int)
  (param :float))

(cffi:defcfun ("glPointParameterfv" glPointParameterfv) :void
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glPointParameteri" glPointParameteri) :void
  (pname :unsigned-int)
  (param :int))

(cffi:defcfun ("glPointParameteriv" glPointParameteriv) :void
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glBlendFuncSeparate" glBlendFuncSeparate) :void
  (srcRGB :unsigned-int)
  (dstRGB :unsigned-int)
  (srcAlpha :unsigned-int)
  (dstAlpha :unsigned-int))

(cffi:defcfun ("glMultiDrawArrays" glMultiDrawArrays) :void
  (mode :unsigned-int)
  (first :pointer)
  (count :pointer)
  (primcount :int))

(cffi:defcfun ("glMultiDrawElements" glMultiDrawElements) :void
  (mode :unsigned-int)
  (count :pointer)
  (type :unsigned-int)
  (indices :pointer)
  (primcount :int))

(cffi:defcfun ("glWindowPos2d" glWindowPos2d) :void
  (x :double)
  (y :double))

(cffi:defcfun ("glWindowPos2dv" glWindowPos2dv) :void
  (v :pointer))

(cffi:defcfun ("glWindowPos2f" glWindowPos2f) :void
  (x :float)
  (y :float))

(cffi:defcfun ("glWindowPos2fv" glWindowPos2fv) :void
  (v :pointer))

(cffi:defcfun ("glWindowPos2i" glWindowPos2i) :void
  (x :int)
  (y :int))

(cffi:defcfun ("glWindowPos2iv" glWindowPos2iv) :void
  (v :pointer))

(cffi:defcfun ("glWindowPos2s" glWindowPos2s) :void
  (x :short)
  (y :short))

(cffi:defcfun ("glWindowPos2sv" glWindowPos2sv) :void
  (v :pointer))

(cffi:defcfun ("glWindowPos3d" glWindowPos3d) :void
  (x :double)
  (y :double)
  (z :double))

(cffi:defcfun ("glWindowPos3dv" glWindowPos3dv) :void
  (v :pointer))

(cffi:defcfun ("glWindowPos3f" glWindowPos3f) :void
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("glWindowPos3fv" glWindowPos3fv) :void
  (v :pointer))

(cffi:defcfun ("glWindowPos3i" glWindowPos3i) :void
  (x :int)
  (y :int)
  (z :int))

(cffi:defcfun ("glWindowPos3iv" glWindowPos3iv) :void
  (v :pointer))

(cffi:defcfun ("glWindowPos3s" glWindowPos3s) :void
  (x :short)
  (y :short)
  (z :short))

(cffi:defcfun ("glWindowPos3sv" glWindowPos3sv) :void
  (v :pointer))

(cffi:defcfun ("glGenQueries" glGenQueries) :void
  (n :int)
  (ids :pointer))

(cffi:defcfun ("glDeleteQueries" glDeleteQueries) :void
  (n :int)
  (ids :pointer))

(cffi:defcfun ("glIsQuery" glIsQuery) :unsigned-char
  (id :unsigned-int))

(cffi:defcfun ("glBeginQuery" glBeginQuery) :void
  (target :unsigned-int)
  (id :unsigned-int))

(cffi:defcfun ("glEndQuery" glEndQuery) :void
  (target :unsigned-int))

(cffi:defcfun ("glGetQueryiv" glGetQueryiv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetQueryObjectiv" glGetQueryObjectiv) :void
  (id :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetQueryObjectuiv" glGetQueryObjectuiv) :void
  (id :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glBindBuffer" glBindBuffer) :void
  (target :unsigned-int)
  (buffer :unsigned-int))

(cffi:defcfun ("glDeleteBuffers" glDeleteBuffers) :void
  (n :int)
  (buffers :pointer))

(cffi:defcfun ("glGenBuffers" glGenBuffers) :void
  (n :int)
  (buffers :pointer))

(cffi:defcfun ("glIsBuffer" glIsBuffer) :unsigned-char
  (buffer :unsigned-int))

(cffi:defcfun ("glBufferData" glBufferData) :void
  (target :unsigned-int)
  (size :long)
  (data :pointer)
  (usage :unsigned-int))

(cffi:defcfun ("glBufferSubData" glBufferSubData) :void
  (target :unsigned-int)
  (offset :long)
  (size :long)
  (data :pointer))

(cffi:defcfun ("glGetBufferSubData" glGetBufferSubData) :void
  (target :unsigned-int)
  (offset :long)
  (size :long)
  (data :pointer))

(cffi:defcfun ("glMapBuffer" glMapBuffer) :pointer
  (target :unsigned-int)
  (access :unsigned-int))

(cffi:defcfun ("glUnmapBuffer" glUnmapBuffer) :unsigned-char
  (target :unsigned-int))

(cffi:defcfun ("glGetBufferParameteriv" glGetBufferParameteriv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetBufferPointerv" glGetBufferPointerv) :void
  (target :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glDrawBuffers" glDrawBuffers) :void
  (n :int)
  (bufs :pointer))

(cffi:defcfun ("glVertexAttrib1d" glVertexAttrib1d) :void
  (index :unsigned-int)
  (x :double))

(cffi:defcfun ("glVertexAttrib1dv" glVertexAttrib1dv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib1f" glVertexAttrib1f) :void
  (index :unsigned-int)
  (x :float))

(cffi:defcfun ("glVertexAttrib1fv" glVertexAttrib1fv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib1s" glVertexAttrib1s) :void
  (index :unsigned-int)
  (x :short))

(cffi:defcfun ("glVertexAttrib1sv" glVertexAttrib1sv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib2d" glVertexAttrib2d) :void
  (index :unsigned-int)
  (x :double)
  (y :double))

(cffi:defcfun ("glVertexAttrib2dv" glVertexAttrib2dv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib2f" glVertexAttrib2f) :void
  (index :unsigned-int)
  (x :float)
  (y :float))

(cffi:defcfun ("glVertexAttrib2fv" glVertexAttrib2fv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib2s" glVertexAttrib2s) :void
  (index :unsigned-int)
  (x :short)
  (y :short))

(cffi:defcfun ("glVertexAttrib2sv" glVertexAttrib2sv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib3d" glVertexAttrib3d) :void
  (index :unsigned-int)
  (x :double)
  (y :double)
  (z :double))

(cffi:defcfun ("glVertexAttrib3dv" glVertexAttrib3dv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib3f" glVertexAttrib3f) :void
  (index :unsigned-int)
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("glVertexAttrib3fv" glVertexAttrib3fv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib3s" glVertexAttrib3s) :void
  (index :unsigned-int)
  (x :short)
  (y :short)
  (z :short))

(cffi:defcfun ("glVertexAttrib3sv" glVertexAttrib3sv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4Nbv" glVertexAttrib4Nbv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4Niv" glVertexAttrib4Niv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4Nsv" glVertexAttrib4Nsv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4Nub" glVertexAttrib4Nub) :void
  (index :unsigned-int)
  (x :unsigned-char)
  (y :unsigned-char)
  (z :unsigned-char)
  (w :unsigned-char))

(cffi:defcfun ("glVertexAttrib4Nubv" glVertexAttrib4Nubv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4Nuiv" glVertexAttrib4Nuiv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4Nusv" glVertexAttrib4Nusv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4bv" glVertexAttrib4bv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4d" glVertexAttrib4d) :void
  (index :unsigned-int)
  (x :double)
  (y :double)
  (z :double)
  (w :double))

(cffi:defcfun ("glVertexAttrib4dv" glVertexAttrib4dv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4f" glVertexAttrib4f) :void
  (index :unsigned-int)
  (x :float)
  (y :float)
  (z :float)
  (w :float))

(cffi:defcfun ("glVertexAttrib4fv" glVertexAttrib4fv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4iv" glVertexAttrib4iv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4s" glVertexAttrib4s) :void
  (index :unsigned-int)
  (x :short)
  (y :short)
  (z :short)
  (w :short))

(cffi:defcfun ("glVertexAttrib4sv" glVertexAttrib4sv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4ubv" glVertexAttrib4ubv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4uiv" glVertexAttrib4uiv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttrib4usv" glVertexAttrib4usv) :void
  (index :unsigned-int)
  (v :pointer))

(cffi:defcfun ("glVertexAttribPointer" glVertexAttribPointer) :void
  (index :unsigned-int)
  (size :int)
  (type :unsigned-int)
  (normalized :unsigned-char)
  (stride :int)
  (pointer :pointer))

(cffi:defcfun ("glEnableVertexAttribArray" glEnableVertexAttribArray) :void
  (index :unsigned-int))

(cffi:defcfun ("glDisableVertexAttribArray" glDisableVertexAttribArray) :void
  (index :unsigned-int))

(cffi:defcfun ("glGetVertexAttribdv" glGetVertexAttribdv) :void
  (index :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetVertexAttribfv" glGetVertexAttribfv) :void
  (index :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetVertexAttribiv" glGetVertexAttribiv) :void
  (index :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetVertexAttribPointerv" glGetVertexAttribPointerv) :void
  (index :unsigned-int)
  (pname :unsigned-int)
  (pointer :pointer))

(cffi:defcfun ("glDeleteShader" glDeleteShader) :void
  (shader :unsigned-int))

(cffi:defcfun ("glDetachShader" glDetachShader) :void
  (program :unsigned-int)
  (shader :unsigned-int))

(cffi:defcfun ("glCreateShader" glCreateShader) :unsigned-int
  (type :unsigned-int))

(cffi:defcfun ("glShaderSource" glShaderSource) :void
  (shader :unsigned-int)
  (count :int)
  (string :pointer)
  (length :pointer))

(cffi:defcfun ("glCompileShader" glCompileShader) :void
  (shader :unsigned-int))

(cffi:defcfun ("glCreateProgram" glCreateProgram) :unsigned-int)

(cffi:defcfun ("glAttachShader" glAttachShader) :void
  (program :unsigned-int)
  (shader :unsigned-int))

(cffi:defcfun ("glLinkProgram" glLinkProgram) :void
  (program :unsigned-int))

(cffi:defcfun ("glUseProgram" glUseProgram) :void
  (program :unsigned-int))

(cffi:defcfun ("glDeleteProgram" glDeleteProgram) :void
  (program :unsigned-int))

(cffi:defcfun ("glValidateProgram" glValidateProgram) :void
  (program :unsigned-int))

(cffi:defcfun ("glUniform1f" glUniform1f) :void
  (location :int)
  (v0 :float))

(cffi:defcfun ("glUniform2f" glUniform2f) :void
  (location :int)
  (v0 :float)
  (v1 :float))

(cffi:defcfun ("glUniform3f" glUniform3f) :void
  (location :int)
  (v0 :float)
  (v1 :float)
  (v2 :float))

(cffi:defcfun ("glUniform4f" glUniform4f) :void
  (location :int)
  (v0 :float)
  (v1 :float)
  (v2 :float)
  (v3 :float))

(cffi:defcfun ("glUniform1i" glUniform1i) :void
  (location :int)
  (v0 :int))

(cffi:defcfun ("glUniform2i" glUniform2i) :void
  (location :int)
  (v0 :int)
  (v1 :int))

(cffi:defcfun ("glUniform3i" glUniform3i) :void
  (location :int)
  (v0 :int)
  (v1 :int)
  (v2 :int))

(cffi:defcfun ("glUniform4i" glUniform4i) :void
  (location :int)
  (v0 :int)
  (v1 :int)
  (v2 :int)
  (v3 :int))

(cffi:defcfun ("glUniform1fv" glUniform1fv) :void
  (location :int)
  (count :int)
  (value :pointer))

(cffi:defcfun ("glUniform2fv" glUniform2fv) :void
  (location :int)
  (count :int)
  (value :pointer))

(cffi:defcfun ("glUniform3fv" glUniform3fv) :void
  (location :int)
  (count :int)
  (value :pointer))

(cffi:defcfun ("glUniform4fv" glUniform4fv) :void
  (location :int)
  (count :int)
  (value :pointer))

(cffi:defcfun ("glUniform1iv" glUniform1iv) :void
  (location :int)
  (count :int)
  (value :pointer))

(cffi:defcfun ("glUniform2iv" glUniform2iv) :void
  (location :int)
  (count :int)
  (value :pointer))

(cffi:defcfun ("glUniform3iv" glUniform3iv) :void
  (location :int)
  (count :int)
  (value :pointer))

(cffi:defcfun ("glUniform4iv" glUniform4iv) :void
  (location :int)
  (count :int)
  (value :pointer))

(cffi:defcfun ("glUniformMatrix2fv" glUniformMatrix2fv) :void
  (location :int)
  (count :int)
  (transpose :unsigned-char)
  (value :pointer))

(cffi:defcfun ("glUniformMatrix3fv" glUniformMatrix3fv) :void
  (location :int)
  (count :int)
  (transpose :unsigned-char)
  (value :pointer))

(cffi:defcfun ("glUniformMatrix4fv" glUniformMatrix4fv) :void
  (location :int)
  (count :int)
  (transpose :unsigned-char)
  (value :pointer))

(cffi:defcfun ("glIsShader" glIsShader) :unsigned-char
  (shader :unsigned-int))

(cffi:defcfun ("glIsProgram" glIsProgram) :unsigned-char
  (program :unsigned-int))

(cffi:defcfun ("glGetShaderiv" glGetShaderiv) :void
  (shader :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetProgramiv" glGetProgramiv) :void
  (program :unsigned-int)
  (pname :unsigned-int)
  (params :pointer))

(cffi:defcfun ("glGetAttachedShaders" glGetAttachedShaders) :void
  (program :unsigned-int)
  (maxCount :int)
  (count :pointer)
  (shaders :pointer))

(cffi:defcfun ("glGetShaderInfoLog" glGetShaderInfoLog) :void
  (shader :unsigned-int)
  (bufSize :int)
  (length :pointer)
  (infoLog :string))

(cffi:defcfun ("glGetProgramInfoLog" glGetProgramInfoLog) :void
  (program :unsigned-int)
  (bufSize :int)
  (length :pointer)
  (infoLog :string))

(cffi:defcfun ("glGetUniformLocation" glGetUniformLocation) :int
  (program :unsigned-int)
  (name :string))

(cffi:defcfun ("glGetActiveUniform" glGetActiveUniform) :void
  (program :unsigned-int)
  (index :unsigned-int)
  (bufSize :int)
  (length :pointer)
  (size :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("glGetUniformfv" glGetUniformfv) :void
  (program :unsigned-int)
  (location :int)
  (params :pointer))

(cffi:defcfun ("glGetUniformiv" glGetUniformiv) :void
  (program :unsigned-int)
  (location :int)
  (params :pointer))

(cffi:defcfun ("glGetShaderSource" glGetShaderSource) :void
  (shader :unsigned-int)
  (bufSize :int)
  (length :pointer)
  (source :string))

(cffi:defcfun ("glBindAttribLocation" glBindAttribLocation) :void
  (program :unsigned-int)
  (index :unsigned-int)
  (name :string))

(cffi:defcfun ("glGetActiveAttrib" glGetActiveAttrib) :void
  (program :unsigned-int)
  (index :unsigned-int)
  (bufSize :int)
  (length :pointer)
  (size :pointer)
  (type :pointer)
  (name :string))

(cffi:defcfun ("glGetAttribLocation" glGetAttribLocation) :int
  (program :unsigned-int)
  (name :string))

(cffi:defcfun ("glStencilFuncSeparate" glStencilFuncSeparate) :void
  (face :unsigned-int)
  (func :unsigned-int)
  (ref :int)
  (mask :unsigned-int))

(cffi:defcfun ("glStencilOpSeparate" glStencilOpSeparate) :void
  (face :unsigned-int)
  (fail :unsigned-int)
  (zfail :unsigned-int)
  (zpass :unsigned-int))

(cffi:defcfun ("glStencilMaskSeparate" glStencilMaskSeparate) :void
  (face :unsigned-int)
  (mask :unsigned-int))

(cffi:defcfun ("glUniformMatrix2x3fv" glUniformMatrix2x3fv) :void
  (location :int)
  (count :int)
  (transpose :unsigned-char)
  (value :pointer))

(cffi:defcfun ("glUniformMatrix3x2fv" glUniformMatrix3x2fv) :void
  (location :int)
  (count :int)
  (transpose :unsigned-char)
  (value :pointer))

(cffi:defcfun ("glUniformMatrix2x4fv" glUniformMatrix2x4fv) :void
  (location :int)
  (count :int)
  (transpose :unsigned-char)
  (value :pointer))

(cffi:defcfun ("glUniformMatrix4x2fv" glUniformMatrix4x2fv) :void
  (location :int)
  (count :int)
  (transpose :unsigned-char)
  (value :pointer))

(cffi:defcfun ("glUniformMatrix3x4fv" glUniformMatrix3x4fv) :void
  (location :int)
  (count :int)
  (transpose :unsigned-char)
  (value :pointer))

(cffi:defcfun ("glUniformMatrix4x3fv" glUniformMatrix4x3fv) :void
  (location :int)
  (count :int)
  (transpose :unsigned-char)
  (value :pointer))

;;================================
;; from gl.h
;; $ swig -cffi -module x11 -o x11.lisp /usr/include/GL/glu.h
;;================================
(alexandria:define-constant GLU_EXT_object_space_tess 1)

(alexandria:define-constant GLU_EXT_nurbs_tessellator 1)

(alexandria:define-constant GLU_FALSE 0)

(alexandria:define-constant GLU_TRUE 1)

(alexandria:define-constant GLU_VERSION_1_1 1)

(alexandria:define-constant GLU_VERSION_1_2 1)

(alexandria:define-constant GLU_VERSION_1_3 1)

(alexandria:define-constant GLU_VERSION 100800)

(alexandria:define-constant GLU_EXTENSIONS 100801)

(alexandria:define-constant GLU_INVALID_ENUM 100900)

(alexandria:define-constant GLU_INVALID_VALUE 100901)

(alexandria:define-constant GLU_OUT_OF_MEMORY 100902)

(alexandria:define-constant GLU_INCOMPATIBLE_GL_VERSION 100903)

(alexandria:define-constant GLU_INVALID_OPERATION 100904)

(alexandria:define-constant GLU_OUTLINE_POLYGON 100240)

(alexandria:define-constant GLU_OUTLINE_PATCH 100241)

(alexandria:define-constant GLU_NURBS_ERROR 100103)

(alexandria:define-constant GLU_ERROR 100103)

(alexandria:define-constant GLU_NURBS_BEGIN 100164)

(alexandria:define-constant GLU_NURBS_BEGIN_EXT 100164)

(alexandria:define-constant GLU_NURBS_VERTEX 100165)

(alexandria:define-constant GLU_NURBS_VERTEX_EXT 100165)

(alexandria:define-constant GLU_NURBS_NORMAL 100166)

(alexandria:define-constant GLU_NURBS_NORMAL_EXT 100166)

(alexandria:define-constant GLU_NURBS_COLOR 100167)

(alexandria:define-constant GLU_NURBS_COLOR_EXT 100167)

(alexandria:define-constant GLU_NURBS_TEXTURE_COORD 100168)

(alexandria:define-constant GLU_NURBS_TEX_COORD_EXT 100168)

(alexandria:define-constant GLU_NURBS_END 100169)

(alexandria:define-constant GLU_NURBS_END_EXT 100169)

(alexandria:define-constant GLU_NURBS_BEGIN_DATA 100170)

(alexandria:define-constant GLU_NURBS_BEGIN_DATA_EXT 100170)

(alexandria:define-constant GLU_NURBS_VERTEX_DATA 100171)

(alexandria:define-constant GLU_NURBS_VERTEX_DATA_EXT 100171)

(alexandria:define-constant GLU_NURBS_NORMAL_DATA 100172)

(alexandria:define-constant GLU_NURBS_NORMAL_DATA_EXT 100172)

(alexandria:define-constant GLU_NURBS_COLOR_DATA 100173)

(alexandria:define-constant GLU_NURBS_COLOR_DATA_EXT 100173)

(alexandria:define-constant GLU_NURBS_TEXTURE_COORD_DATA 100174)

(alexandria:define-constant GLU_NURBS_TEX_COORD_DATA_EXT 100174)

(alexandria:define-constant GLU_NURBS_END_DATA 100175)

(alexandria:define-constant GLU_NURBS_END_DATA_EXT 100175)

(alexandria:define-constant GLU_NURBS_ERROR1 100251)

(alexandria:define-constant GLU_NURBS_ERROR2 100252)

(alexandria:define-constant GLU_NURBS_ERROR3 100253)

(alexandria:define-constant GLU_NURBS_ERROR4 100254)

(alexandria:define-constant GLU_NURBS_ERROR5 100255)

(alexandria:define-constant GLU_NURBS_ERROR6 100256)

(alexandria:define-constant GLU_NURBS_ERROR7 100257)

(alexandria:define-constant GLU_NURBS_ERROR8 100258)

(alexandria:define-constant GLU_NURBS_ERROR9 100259)

(alexandria:define-constant GLU_NURBS_ERROR10 100260)

(alexandria:define-constant GLU_NURBS_ERROR11 100261)

(alexandria:define-constant GLU_NURBS_ERROR12 100262)

(alexandria:define-constant GLU_NURBS_ERROR13 100263)

(alexandria:define-constant GLU_NURBS_ERROR14 100264)

(alexandria:define-constant GLU_NURBS_ERROR15 100265)

(alexandria:define-constant GLU_NURBS_ERROR16 100266)

(alexandria:define-constant GLU_NURBS_ERROR17 100267)

(alexandria:define-constant GLU_NURBS_ERROR18 100268)

(alexandria:define-constant GLU_NURBS_ERROR19 100269)

(alexandria:define-constant GLU_NURBS_ERROR20 100270)

(alexandria:define-constant GLU_NURBS_ERROR21 100271)

(alexandria:define-constant GLU_NURBS_ERROR22 100272)

(alexandria:define-constant GLU_NURBS_ERROR23 100273)

(alexandria:define-constant GLU_NURBS_ERROR24 100274)

(alexandria:define-constant GLU_NURBS_ERROR25 100275)

(alexandria:define-constant GLU_NURBS_ERROR26 100276)

(alexandria:define-constant GLU_NURBS_ERROR27 100277)

(alexandria:define-constant GLU_NURBS_ERROR28 100278)

(alexandria:define-constant GLU_NURBS_ERROR29 100279)

(alexandria:define-constant GLU_NURBS_ERROR30 100280)

(alexandria:define-constant GLU_NURBS_ERROR31 100281)

(alexandria:define-constant GLU_NURBS_ERROR32 100282)

(alexandria:define-constant GLU_NURBS_ERROR33 100283)

(alexandria:define-constant GLU_NURBS_ERROR34 100284)

(alexandria:define-constant GLU_NURBS_ERROR35 100285)

(alexandria:define-constant GLU_NURBS_ERROR36 100286)

(alexandria:define-constant GLU_NURBS_ERROR37 100287)

(alexandria:define-constant GLU_AUTO_LOAD_MATRIX 100200)

(alexandria:define-constant GLU_CULLING 100201)

(alexandria:define-constant GLU_SAMPLING_TOLERANCE 100203)

(alexandria:define-constant GLU_DISPLAY_MODE 100204)

(alexandria:define-constant GLU_PARAMETRIC_TOLERANCE 100202)

(alexandria:define-constant GLU_SAMPLING_METHOD 100205)

(alexandria:define-constant GLU_U_STEP 100206)

(alexandria:define-constant GLU_V_STEP 100207)

(alexandria:define-constant GLU_NURBS_MODE 100160)

(alexandria:define-constant GLU_NURBS_MODE_EXT 100160)

(alexandria:define-constant GLU_NURBS_TESSELLATOR 100161)

(alexandria:define-constant GLU_NURBS_TESSELLATOR_EXT 100161)

(alexandria:define-constant GLU_NURBS_RENDERER 100162)

(alexandria:define-constant GLU_NURBS_RENDERER_EXT 100162)

(alexandria:define-constant GLU_OBJECT_PARAMETRIC_ERROR 100208)

(alexandria:define-constant GLU_OBJECT_PARAMETRIC_ERROR_EXT 100208)

(alexandria:define-constant GLU_OBJECT_PATH_LENGTH 100209)

(alexandria:define-constant GLU_OBJECT_PATH_LENGTH_EXT 100209)

(alexandria:define-constant GLU_PATH_LENGTH 100215)

(alexandria:define-constant GLU_PARAMETRIC_ERROR 100216)

(alexandria:define-constant GLU_DOMAIN_DISTANCE 100217)

(alexandria:define-constant GLU_MAP1_TRIM_2 100210)

(alexandria:define-constant GLU_MAP1_TRIM_3 100211)

(alexandria:define-constant GLU_POINT 100010)

(alexandria:define-constant GLU_LINE 100011)

(alexandria:define-constant GLU_FILL 100012)

(alexandria:define-constant GLU_SILHOUETTE 100013)

(alexandria:define-constant GLU_SMOOTH 100000)

(alexandria:define-constant GLU_FLAT 100001)

(alexandria:define-constant GLU_NONE 100002)

(alexandria:define-constant GLU_OUTSIDE 100020)

(alexandria:define-constant GLU_INSIDE 100021)

(alexandria:define-constant GLU_TESS_BEGIN 100100)

(alexandria:define-constant GLU_BEGIN 100100)

(alexandria:define-constant GLU_TESS_VERTEX 100101)

(alexandria:define-constant GLU_VERTEX 100101)

(alexandria:define-constant GLU_TESS_END 100102)

(alexandria:define-constant GLU_END 100102)

(alexandria:define-constant GLU_TESS_ERROR 100103)

(alexandria:define-constant GLU_TESS_EDGE_FLAG 100104)

(alexandria:define-constant GLU_EDGE_FLAG 100104)

(alexandria:define-constant GLU_TESS_COMBINE 100105)

(alexandria:define-constant GLU_TESS_BEGIN_DATA 100106)

(alexandria:define-constant GLU_TESS_VERTEX_DATA 100107)

(alexandria:define-constant GLU_TESS_END_DATA 100108)

(alexandria:define-constant GLU_TESS_ERROR_DATA 100109)

(alexandria:define-constant GLU_TESS_EDGE_FLAG_DATA 100110)

(alexandria:define-constant GLU_TESS_COMBINE_DATA 100111)

(alexandria:define-constant GLU_CW 100120)

(alexandria:define-constant GLU_CCW 100121)

(alexandria:define-constant GLU_INTERIOR 100122)

(alexandria:define-constant GLU_EXTERIOR 100123)

(alexandria:define-constant GLU_UNKNOWN 100124)

(alexandria:define-constant GLU_TESS_WINDING_RULE 100140)

(alexandria:define-constant GLU_TESS_BOUNDARY_ONLY 100141)

(alexandria:define-constant GLU_TESS_TOLERANCE 100142)

(alexandria:define-constant GLU_TESS_ERROR1 100151)

(alexandria:define-constant GLU_TESS_ERROR2 100152)

(alexandria:define-constant GLU_TESS_ERROR3 100153)

(alexandria:define-constant GLU_TESS_ERROR4 100154)

(alexandria:define-constant GLU_TESS_ERROR5 100155)

(alexandria:define-constant GLU_TESS_ERROR6 100156)

(alexandria:define-constant GLU_TESS_ERROR7 100157)

(alexandria:define-constant GLU_TESS_ERROR8 100158)

(alexandria:define-constant GLU_TESS_MISSING_BEGIN_POLYGON 100151)

(alexandria:define-constant GLU_TESS_MISSING_BEGIN_CONTOUR 100152)

(alexandria:define-constant GLU_TESS_MISSING_END_POLYGON 100153)

(alexandria:define-constant GLU_TESS_MISSING_END_CONTOUR 100154)

(alexandria:define-constant GLU_TESS_COORD_TOO_LARGE 100155)

(alexandria:define-constant GLU_TESS_NEED_COMBINE_CALLBACK 100156)

(alexandria:define-constant GLU_TESS_WINDING_ODD 100130)

(alexandria:define-constant GLU_TESS_WINDING_NONZERO 100131)

(alexandria:define-constant GLU_TESS_WINDING_POSITIVE 100132)

(alexandria:define-constant GLU_TESS_WINDING_NEGATIVE 100133)

(alexandria:define-constant GLU_TESS_WINDING_ABS_GEQ_TWO 100134)

(alexandria:define-constant GLU_TESS_MAX_COORD 1.0d150)

(cffi:defcfun ("gluBeginCurve" gluBeginCurve) :void
  (nurb :pointer))

(cffi:defcfun ("gluBeginPolygon" gluBeginPolygon) :void
  (tess :pointer))

(cffi:defcfun ("gluBeginSurface" gluBeginSurface) :void
  (nurb :pointer))

(cffi:defcfun ("gluBeginTrim" gluBeginTrim) :void
  (nurb :pointer))

(cffi:defcfun ("gluBuild1DMipmapLevels" gluBuild1DMipmapLevels) :pointer
  (target :pointer)
  (internalFormat :pointer)
  (width :pointer)
  (format :pointer)
  (type :pointer)
  (level :pointer)
  (base :pointer)
  (max :pointer)
  (data :pointer))

(cffi:defcfun ("gluBuild1DMipmaps" gluBuild1DMipmaps) :pointer
  (target :pointer)
  (internalFormat :pointer)
  (width :pointer)
  (format :pointer)
  (type :pointer)
  (data :pointer))

(cffi:defcfun ("gluBuild2DMipmapLevels" gluBuild2DMipmapLevels) :pointer
  (target :pointer)
  (internalFormat :pointer)
  (width :pointer)
  (height :pointer)
  (format :pointer)
  (type :pointer)
  (level :pointer)
  (base :pointer)
  (max :pointer)
  (data :pointer))

(cffi:defcfun ("gluBuild2DMipmaps" gluBuild2DMipmaps) :pointer
  (target :pointer)
  (internalFormat :pointer)
  (width :pointer)
  (height :pointer)
  (format :pointer)
  (type :pointer)
  (data :pointer))

(cffi:defcfun ("gluBuild3DMipmapLevels" gluBuild3DMipmapLevels) :pointer
  (target :pointer)
  (internalFormat :pointer)
  (width :pointer)
  (height :pointer)
  (depth :pointer)
  (format :pointer)
  (type :pointer)
  (level :pointer)
  (base :pointer)
  (max :pointer)
  (data :pointer))

(cffi:defcfun ("gluBuild3DMipmaps" gluBuild3DMipmaps) :pointer
  (target :pointer)
  (internalFormat :pointer)
  (width :pointer)
  (height :pointer)
  (depth :pointer)
  (format :pointer)
  (type :pointer)
  (data :pointer))

(cffi:defcfun ("gluCheckExtension" gluCheckExtension) :pointer
  (extName :pointer)
  (extString :pointer))

(cffi:defcfun ("gluCylinder" gluCylinder) :void
  (quad :pointer)
  (base :pointer)
  (top :pointer)
  (height :pointer)
  (slices :pointer)
  (stacks :pointer))

(cffi:defcfun ("gluDeleteNurbsRenderer" gluDeleteNurbsRenderer) :void
  (nurb :pointer))

(cffi:defcfun ("gluDeleteQuadric" gluDeleteQuadric) :void
  (quad :pointer))

(cffi:defcfun ("gluDeleteTess" gluDeleteTess) :void
  (tess :pointer))

(cffi:defcfun ("gluDisk" gluDisk) :void
  (quad :pointer)
  (inner :pointer)
  (outer :pointer)
  (slices :pointer)
  (loops :pointer))

(cffi:defcfun ("gluEndCurve" gluEndCurve) :void
  (nurb :pointer))

(cffi:defcfun ("gluEndPolygon" gluEndPolygon) :void
  (tess :pointer))

(cffi:defcfun ("gluEndSurface" gluEndSurface) :void
  (nurb :pointer))

(cffi:defcfun ("gluEndTrim" gluEndTrim) :void
  (nurb :pointer))

(cffi:defcfun ("gluErrorString" gluErrorString) :pointer
  (error :pointer))

(cffi:defcfun ("gluGetNurbsProperty" gluGetNurbsProperty) :void
  (nurb :pointer)
  (property :pointer)
  (data :pointer))

(cffi:defcfun ("gluGetString" gluGetString) :pointer
  (name :pointer))

(cffi:defcfun ("gluGetTessProperty" gluGetTessProperty) :void
  (tess :pointer)
  (which :pointer)
  (data :pointer))

(cffi:defcfun ("gluLoadSamplingMatrices" gluLoadSamplingMatrices) :void
  (nurb :pointer)
  (model :pointer)
  (perspective :pointer)
  (view :pointer))

(cffi:defcfun ("gluLookAt" gluLookAt) :void
  (eyeX :double)
  (eyeY :double)
  (eyeZ :double)
  (centerX :double)
  (centerY :double)
  (centerZ :double)
  (upX :double)
  (upY :double)
  (upZ :double))

(cffi:defcfun ("gluNewNurbsRenderer" gluNewNurbsRenderer) :pointer)

(cffi:defcfun ("gluNewQuadric" gluNewQuadric) :pointer)

(cffi:defcfun ("gluNewTess" gluNewTess) :pointer)

(cffi:defcfun ("gluNextContour" gluNextContour) :void
  (tess :pointer)
  (type :pointer))

(cffi:defcfun ("gluNurbsCallback" gluNurbsCallback) :void
  (nurb :pointer)
  (which :pointer)
  (CallBackFunc :pointer))

(cffi:defcfun ("gluNurbsCallbackData" gluNurbsCallbackData) :void
  (nurb :pointer)
  (userData :pointer))

(cffi:defcfun ("gluNurbsCallbackDataEXT" gluNurbsCallbackDataEXT) :void
  (nurb :pointer)
  (userData :pointer))

(cffi:defcfun ("gluNurbsCurve" gluNurbsCurve) :void
  (nurb :pointer)
  (knotCount :pointer)
  (knots :pointer)
  (stride :pointer)
  (control :pointer)
  (order :pointer)
  (type :pointer))

(cffi:defcfun ("gluNurbsProperty" gluNurbsProperty) :void
  (nurb :pointer)
  (property :pointer)
  (value :pointer))

(cffi:defcfun ("gluNurbsSurface" gluNurbsSurface) :void
  (nurb :pointer)
  (sKnotCount :pointer)
  (sKnots :pointer)
  (tKnotCount :pointer)
  (tKnots :pointer)
  (sStride :pointer)
  (tStride :pointer)
  (control :pointer)
  (sOrder :pointer)
  (tOrder :pointer)
  (type :pointer))

(cffi:defcfun ("gluOrtho2D" gluOrtho2D) :void
  (left :pointer)
  (right :pointer)
  (bottom :pointer)
  (top :pointer))

(cffi:defcfun ("gluPartialDisk" gluPartialDisk) :void
  (quad :pointer)
  (inner :pointer)
  (outer :pointer)
  (slices :pointer)
  (loops :pointer)
  (start :pointer)
  (sweep :pointer))

(cffi:defcfun ("gluPerspective" gluPerspective) :void
  (fovy :double)
  (aspect :double)
  (zNear :double)
  (zFar :double))

(cffi:defcfun ("gluPickMatrix" gluPickMatrix) :void
  (x :pointer)
  (y :pointer)
  (delX :pointer)
  (delY :pointer)
  (viewport :pointer))

(cffi:defcfun ("gluProject" gluProject) :pointer
  (objX :pointer)
  (objY :pointer)
  (objZ :pointer)
  (model :pointer)
  (proj :pointer)
  (view :pointer)
  (winX :pointer)
  (winY :pointer)
  (winZ :pointer))

(cffi:defcfun ("gluPwlCurve" gluPwlCurve) :void
  (nurb :pointer)
  (count :pointer)
  (data :pointer)
  (stride :pointer)
  (type :pointer))

(cffi:defcfun ("gluQuadricCallback" gluQuadricCallback) :void
  (quad :pointer)
  (which :pointer)
  (CallBackFunc :pointer))

(cffi:defcfun ("gluQuadricDrawStyle" gluQuadricDrawStyle) :void
  (quad :pointer)
  (draw :pointer))

(cffi:defcfun ("gluQuadricNormals" gluQuadricNormals) :void
  (quad :pointer)
  (normal :pointer))

(cffi:defcfun ("gluQuadricOrientation" gluQuadricOrientation) :void
  (quad :pointer)
  (orientation :pointer))

(cffi:defcfun ("gluQuadricTexture" gluQuadricTexture) :void
  (quad :pointer)
  (texture :pointer))

(cffi:defcfun ("gluScaleImage" gluScaleImage) :pointer
  (format :pointer)
  (wIn :pointer)
  (hIn :pointer)
  (typeIn :pointer)
  (dataIn :pointer)
  (wOut :pointer)
  (hOut :pointer)
  (typeOut :pointer)
  (dataOut :pointer))

(cffi:defcfun ("gluSphere" gluSphere) :void
  (quad :pointer)
  (radius :pointer)
  (slices :pointer)
  (stacks :pointer))

(cffi:defcfun ("gluTessBeginContour" gluTessBeginContour) :void
  (tess :pointer))

(cffi:defcfun ("gluTessBeginPolygon" gluTessBeginPolygon) :void
  (tess :pointer)
  (data :pointer))

(cffi:defcfun ("gluTessCallback" gluTessCallback) :void
  (tess :pointer)
  (which :pointer)
  (CallBackFunc :pointer))

(cffi:defcfun ("gluTessEndContour" gluTessEndContour) :void
  (tess :pointer))

(cffi:defcfun ("gluTessEndPolygon" gluTessEndPolygon) :void
  (tess :pointer))

(cffi:defcfun ("gluTessNormal" gluTessNormal) :void
  (tess :pointer)
  (valueX :pointer)
  (valueY :pointer)
  (valueZ :pointer))

(cffi:defcfun ("gluTessProperty" gluTessProperty) :void
  (tess :pointer)
  (which :pointer)
  (data :pointer))

(cffi:defcfun ("gluTessVertex" gluTessVertex) :void
  (tess :pointer)
  (location :pointer)
  (data :pointer))

(cffi:defcfun ("gluUnProject" gluUnProject) :pointer
  (winX :pointer)
  (winY :pointer)
  (winZ :pointer)
  (model :pointer)
  (proj :pointer)
  (view :pointer)
  (objX :pointer)
  (objY :pointer)
  (objZ :pointer))

(cffi:defcfun ("gluUnProject4" gluUnProject4) :pointer
  (winX :pointer)
  (winY :pointer)
  (winZ :pointer)
  (clipW :pointer)
  (model :pointer)
  (proj :pointer)
  (view :pointer)
  (nearVal :pointer)
  (farVal :pointer)
  (objX :pointer)
  (objY :pointer)
  (objZ :pointer)
  (objW :pointer))


;; additional by hand

(cffi:defcfun ("XOpenDisplay" XOpenDisplay) :pointer
              (arg0 :string))

